# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: h2o_ml_agent
# Time Created: 2025-07-18 23:04:00

def h2o_automl(
    data_raw: List[Dict[str, Any]],
    target: str,
    max_runtime_secs: int,
    exclude_algos: List[str],
    balance_classes: bool,
    nfolds: int,
    seed: int,
    max_models: int,
    stopping_metric: str,
    stopping_tolerance: float,
    stopping_rounds: int,
    sort_metric: str ,
    model_directory: Optional[str] = None,
    log_path: Optional[str] = None,
    enable_mlflow: bool, # If use has specified to enable MLflow, make sure to make this True
    mlflow_tracking_uri: Optional[str], 
    mlflow_experiment_name: str,
    mlflow_run_name: str,
    **kwargs # Additional parameters for H2OAutoML (feel free to add these based on user instructions and recommended steps)
):

    import h2o
    from h2o.automl import H2OAutoML
    import pandas as pd
    import json

    # Optional MLflow usage
    if enable_mlflow:
        import mlflow
        if mlflow_tracking_uri:
            mlflow.set_tracking_uri(mlflow_tracking_uri)
        mlflow.set_experiment(mlflow_experiment_name)
        run_context = mlflow.start_run(run_name=mlflow_run_name)
    else:
        # Dummy context manager to skip MLflow if not enabled
        from contextlib import nullcontext
        run_context = nullcontext()

    exclude_algos = exclude_algos or ["DeepLearning"]  # default if not provided

    # Convert data to DataFrame
    df = pd.DataFrame(data_raw)

    with run_context as run:
        # If using MLflow, track run ID
        run_id = None
        if enable_mlflow and run is not None:
            run_id = run.info.run_id
            import mlflow
            

        # If using MLflow, log the model
        if enable_mlflow and run is not None:
            mlflow.h2o.log_model(H2OAutoML(max_runtime_secs=max_runtime_secs, exclude_algos=exclude_algos, balance_classes=balance_classes, nfolds=nfolds, seed=seed, max_models=max_models, stopping_metric=stopping_metric, stopping_tolerance=stopping_tolerance, stopping_rounds=stopping_rounds, sort_metric=sort_metric).leader, artifact_path="model")
            
            #Log the params
            mlflow.log_params(dict(
                target= target,
                max_runtime_secs= max_runtime_secs,
                exclude_algos= str(exclude_algos),
                balance_classes= balance_classes,
                nfolds= nfolds,
                seed= seed,
                max_models= max_models,
                stopping_metric= stopping_metric,
                stopping_tolerance= stopping_tolerance,
                stopping_rounds= stopping_rounds,
                sort_metric= sort_metric,
                model_directory= model_directory,
                log_path= log_path
            ))

        # Convert data to DataFrame
        df = pd.DataFrame(data_raw)

        # Create H2OFrame
        data_h2o = h2o.H2OFrame(df)

        # Setup AutoML
        aml = H2OAutoML(
            max_runtime_secs=max_runtime_secs,
            exclude_algos=exclude_algos,
            balance_classes=balance_classes,
            nfolds=nfolds,
            seed=seed,
            max_models=max_models,
            stopping_metric=stopping_metric,
            stopping_tolerance=stopping_tolerance,
            stopping_rounds=stopping_rounds,
            sort_metric=sort_metric,
            **kwargs
        )

        # Train
        x = [col for col in data_h2o.columns if col != target]
        aml.train(x=x, y=target, training_frame=data_h2o)

        # Save model if we have a directory/log path
        if model_directory is None and log_path is None:
            model_path = None
        else:
            path_to_save = model_directory if model_directory else log_path
            model_path = h2o.save_model(model=aml.leader, path=path_to_save, force=True)

        # Leaderboard (DataFrame -> dict)
        leaderboard_df = pd.DataFrame(aml.leaderboard)
        leaderboard_dict = leaderboard_df.to_dict()

        # Gather top-model metrics from the first row
        top_metrics = leaderboard_df.iloc[0].to_dict()  

        # Construct model_results
        model_results = dict(
            model_flavor= "H2O AutoML",
            model_path= model_path,
            best_model_id= aml.leader.model_id,
            metrics= top_metrics  # all metrics from the top row
        )

        # Build the output
        output = dict(
            leaderboard= leaderboard_dict,
            best_model_id= aml.leader.model_id,
            model_path= model_path,
            model_results= model_results,
            mlflow_run_id= run_id
        )

    return output