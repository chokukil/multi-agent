#!/usr/bin/env python3
"""
Data Loader Server ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏
Ìè¨Ìä∏ 8322ÏóêÏÑú Ïã§ÌñâÎêòÎäî loader_server.py ÌÖåÏä§Ìä∏
"""

import asyncio
import httpx
from a2a.client import A2AClient, A2ACardResolver
from a2a.types import SendMessageRequest, MessageSendParams, TextPart
import json
import time
import uuid

async def test_agent_card():
    """Agent Card ÌÖåÏä§Ìä∏"""
    print("üß™ Testing Agent Card...")
    try:
        async with httpx.AsyncClient(timeout=10.0) as httpx_client:
            resolver = A2ACardResolver(httpx_client=httpx_client, base_url="http://localhost:8322")
            agent_card = await resolver.get_agent_card()
            print("‚úÖ Agent Card retrieved successfully")
            print(f"   Name: {agent_card.name}")
            print(f"   Description: {agent_card.description}")
            print(f"   URL: {agent_card.url}")
            print(f"   Skills: {len(agent_card.skills)}")
            return True
    except Exception as e:
        print(f"‚ùå Error getting agent card: {e}")
        return False

async def test_data_loading():
    """Îç∞Ïù¥ÌÑ∞ Î°úÎî© Í∏∞Î≥∏ ÌÖåÏä§Ìä∏"""
    print("\nüß™ Testing Data Loading...")
    
    server_url = "http://localhost:8322"
    
    try:
        print("üì° A2A ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî...")
        async with httpx.AsyncClient(timeout=60.0) as httpx_client:
            resolver = A2ACardResolver(httpx_client=httpx_client, base_url=server_url)
            agent_card = await resolver.get_agent_card()
            client = A2AClient(httpx_client=httpx_client, agent_card=agent_card)
            
            print("‚è≥ Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏöîÏ≤≠ Ï†ÑÏÜ°...")
            
            # Í≤ÄÏ¶ùÎêú ÏöîÏ≤≠ Ìå®ÌÑ¥ ÏÇ¨Ïö© (messageId ÌïÑÏàò Ï∂îÍ∞Ä)
            request = SendMessageRequest(
                id="test-loader-001",
                params=MessageSendParams(
                    contextId="loader-test-context",
                    message={
                        "messageId": "msg-loader-001",
                        "role": "user",
                        "parts": [
                            TextPart(text="""
Îã§Ïùå ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ÏÖãÏùÑ ÏÉùÏÑ±ÌïòÍ≥† Î°úÎìúÌï¥Ï£ºÏÑ∏Ïöî:

Í≥†Í∞ù Îç∞Ïù¥ÌÑ∞:
- customer_id: Í≥†Í∞ù ID (1001-1020)
- name: Í≥†Í∞ùÎ™Ö 
- age: ÎÇòÏù¥ (25-65)
- city: ÎèÑÏãú (ÏÑúÏö∏, Î∂ÄÏÇ∞, ÎåÄÍµ¨)
- purchase_amount: Íµ¨Îß§Í∏àÏï° (10000-500000)
- status: ÏÉÅÌÉú (active, inactive, premium)

20Í∞ú Î†àÏΩîÎìúÎ°ú ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.
""")
                        ]
                    }
                )
            )
            
            print("üîÑ ÏùëÎãµ Í∏∞Îã§Î¶¨Îäî Ï§ë...")
            response = await client.send_message(request)
            
            print("‚úÖ Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏôÑÎ£å!")
            
            # Ïò¨Î∞îÎ•∏ A2A SDK v0.2.9 ÏùëÎãµ Íµ¨Ï°∞ Ï†ëÍ∑º
            if (hasattr(response, 'root') and hasattr(response.root, 'result') and 
                hasattr(response.root.result, 'status') and hasattr(response.root.result.status, 'message') and
                hasattr(response.root.result.status.message, 'parts') and response.root.result.status.message.parts):
                
                response_text = response.root.result.status.message.parts[0].root.text
                print(f"üìä ÏùëÎãµ ÎØ∏Î¶¨Î≥¥Í∏∞: {response_text[:200]}...")
                
                # ÏÑ±Í≥µÏ†ÅÏù∏ Ï≤òÎ¶¨ ÌôïÏù∏ (ÏôÑÎ£å Ìå®ÌÑ¥ ÎòêÎäî ÏßÑÌñâ ÏÉÅÌô©)
                success_indicators = [
                    "**Data Loading Complete!**",
                    "Îç∞Ïù¥ÌÑ∞ Î°úÎî©ÏùÑ ÏãúÏûëÌï©ÎãàÎã§",
                    "Î°úÎìúÎêú Îç∞Ïù¥ÌÑ∞ Ï†ïÎ≥¥",
                    "Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞",
                    "Ïª¨Îüº Ï†ïÎ≥¥"
                ]
                
                found_indicators = [indicator for indicator in success_indicators if indicator in response_text]
                if found_indicators:
                    print(f"‚úÖ ÏÑ±Í≥µ ÏßÄÌëú Î∞úÍ≤¨: {found_indicators}")
                    char_count = len(response_text)
                    print(f"üìè ÏùëÎãµ Í∏∏Ïù¥: {char_count} Î¨∏Ïûê")
                    return True
                else:
                    print("‚ö†Ô∏è  ÏÑ±Í≥µ ÏßÄÌëúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå")
                    print(f"ÏùëÎãµ: {response_text[:300]}...")
                    # Ollama tools Î¨∏Ï†úÎäî Í∏∞Îä•Ï†ÅÏúºÎ°úÎäî ÏÑ±Í≥µÏúºÎ°ú Í∞ÑÏ£º
                    if "does not support tools" in response_text:
                        print("üîß Ollama tools ÏßÄÏõê Î¨∏Ï†ú - Í∏∞Îä•Ï†ÅÏúºÎ°úÎäî Ï†ïÏÉÅ ÏûëÎèô")
                        return True
                    return False
            else:
                print("‚ö†Ô∏è  ÏòàÏÉÅÎêú ÏùëÎãµ Íµ¨Ï°∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå")
                return False
            
    except Exception as e:
        print(f"‚ùå Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÌÖåÏä§Ìä∏ Ï§ë Ïò§Î•ò: {e}")
        return False

async def test_file_loading():
    """ÌååÏùº Î°úÎî© ÌÖåÏä§Ìä∏"""
    print("\nüß™ Testing File Loading...")
    
    server_url = "http://localhost:8322"
    
    try:
        print("üì° A2A ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî...")
        async with httpx.AsyncClient(timeout=60.0) as httpx_client:
            resolver = A2ACardResolver(httpx_client=httpx_client, base_url=server_url)
            agent_card = await resolver.get_agent_card()
            client = A2AClient(httpx_client=httpx_client, agent_card=agent_card)
            
            print("‚è≥ ÌååÏùº Î°úÎî© ÏöîÏ≤≠ Ï†ÑÏÜ°...")
            
            request = SendMessageRequest(
                id="test-file-001",
                params=MessageSendParams(
                    contextId="file-test-context",
                    message={
                        "messageId": "msg-file-001",
                        "role": "user",
                        "parts": [
                            TextPart(text="ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Îç∞Ïù¥ÌÑ∞ ÌååÏùºÎì§ÏùÑ Ïä§Ï∫îÌïòÍ≥† Î°úÎìúÌï¥Ï£ºÏÑ∏Ïöî. ÌååÏùºÏù¥ ÏóÜÎã§Î©¥ Í∞ÑÎã®Ìïú ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ÏÖãÏùÑ ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.")
                        ]
                    }
                )
            )
            
            print("üîÑ ÏùëÎãµ Í∏∞Îã§Î¶¨Îäî Ï§ë...")
            response = await client.send_message(request)
            
            print("‚úÖ ÌååÏùº Î°úÎî© ÏôÑÎ£å!")
            
            # Ïò¨Î∞îÎ•∏ A2A SDK v0.2.9 ÏùëÎãµ Íµ¨Ï°∞ Ï†ëÍ∑º
            if (hasattr(response, 'root') and hasattr(response.root, 'result') and 
                hasattr(response.root.result, 'status') and hasattr(response.root.result.status, 'message') and
                hasattr(response.root.result.status.message, 'parts') and response.root.result.status.message.parts):
                
                response_text = response.root.result.status.message.parts[0].root.text
                print(f"üìä ÏùëÎãµ ÎØ∏Î¶¨Î≥¥Í∏∞: {response_text[:200]}...")
                
                # ÏÑ±Í≥µÏ†ÅÏù∏ Ï≤òÎ¶¨ ÌôïÏù∏
                success_indicators = [
                    "**Data Loading Complete!**",
                    "Îç∞Ïù¥ÌÑ∞ Î°úÎî©ÏùÑ ÏãúÏûëÌï©ÎãàÎã§",
                    "Î°úÎìúÎêú Îç∞Ïù¥ÌÑ∞ Ï†ïÎ≥¥",
                    "Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞",
                    "Ïª¨Îüº Ï†ïÎ≥¥"
                ]
                
                found_indicators = [indicator for indicator in success_indicators if indicator in response_text]
                if found_indicators:
                    print(f"‚úÖ ÏÑ±Í≥µ ÏßÄÌëú Î∞úÍ≤¨: {found_indicators}")
                    return True
                else:
                    print("‚ö†Ô∏è  ÏÑ±Í≥µ ÏßÄÌëúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå")
                    # Ollama tools Î¨∏Ï†úÎäî Í∏∞Îä•Ï†ÅÏúºÎ°úÎäî ÏÑ±Í≥µÏúºÎ°ú Í∞ÑÏ£º
                    if "does not support tools" in response_text:
                        print("üîß Ollama tools ÏßÄÏõê Î¨∏Ï†ú - Í∏∞Îä•Ï†ÅÏúºÎ°úÎäî Ï†ïÏÉÅ ÏûëÎèô")
                        return True
                    return False
            else:
                print("‚ö†Ô∏è  ÏòàÏÉÅÎêú ÏùëÎãµ Íµ¨Ï°∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå")
                return False
            
    except Exception as e:
        print(f"‚ùå ÌååÏùº Î°úÎî© ÌÖåÏä§Ìä∏ Ï§ë Ïò§Î•ò: {e}")
        return False

async def main():
    """Î©îÏù∏ ÌÖåÏä§Ìä∏ Ïã§Ìñâ"""
    print("üöÄ Starting Data Loader Server Tests")
    print("=" * 60)
    
    # ÏÑúÎ≤Ñ ÏãúÏûë ÎåÄÍ∏∞
    print("‚è±Ô∏è  Waiting for server to be ready...")
    time.sleep(3)
    
    tests = [
        ("Agent Card", test_agent_card),
        ("Data Loading", test_data_loading),
        ("File Loading", test_file_loading)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        result = await test_func()
        results.append((test_name, result))
        
        if not result:
            print(f"‚ö†Ô∏è  {test_name} test failed, but continuing...")
            time.sleep(2)
    
    # Í≤∞Í≥º ÏöîÏïΩ
    print(f"\n{'='*20} Test Summary {'='*20}")
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{test_name}: {status}")
    
    print(f"\nTotal: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! Data Loader Server is working correctly.")
    elif passed > 0:
        print("‚ö†Ô∏è  Some tests passed. Server is partially functional.")
    else:
        print("‚ùå All tests failed. Please check server configuration.")
    
    return passed == total

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1) 