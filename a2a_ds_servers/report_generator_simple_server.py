#!/usr/bin/env python3
"""
Simple Report Generator Server - A2A Compatible
Simplified version for immediate integration testing
"""

import logging
import uvicorn
import os
import sys
from datetime import datetime
from dotenv import load_dotenv

# Add parent directory to path for core modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Load environment variables
load_dotenv()

# A2A SDK imports
from a2a.server.apps import A2AStarletteApplication
from a2a.server.agent_execution import AgentExecutor, RequestContext
from a2a.server.request_handlers import DefaultRequestHandler
from a2a.server.tasks import InMemoryTaskStore
from a2a.server.events import EventQueue
from a2a.types import AgentCard, AgentSkill, AgentCapabilities, TaskState
from a2a.utils import new_agent_text_message
from a2a.server.tasks.task_updater import TaskUpdater

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleReportGenerator:
    """Simple Report Generator for data analysis synthesis."""

    def __init__(self):
        # Initialize data manager for real data processing
        try:
            from core.data_manager import DataManager
            self.data_manager = DataManager()
            logger.info("✅ Data Manager initialized")
        except Exception as e:
            logger.error(f"❌ Failed to initialize Data Manager: {e}")
            self.data_manager = None
        
        # Initialize with real LLM
        self.llm = None
        try:
            api_key = os.getenv('OPENAI_API_KEY') or os.getenv('ANTHROPIC_API_KEY') or os.getenv('GOOGLE_API_KEY')
            if api_key:
                from core.llm_factory import create_llm_instance
                self.llm = create_llm_instance()
                logger.info("✅ LLM initialized successfully")
            else:
                logger.warning("⚠️ No API key found, using mock responses")
        except Exception as e:
            logger.error(f"❌ Failed to initialize LLM: {e}")
            self.llm = None

    async def invoke(self, query: str) -> str:
        """Generate a comprehensive report based on the query"""
        try:
            logger.info(f"🔍 Processing report generation request: {query}")
            
            # For now, return a simple mock response
            # TODO: Implement actual report generation logic
            result = f"""
📋 **Report Generator Analysis**

Query: {query}

**Summary:**
This is a comprehensive report generated by the Report Generator agent. 
The report synthesizes analysis results from multiple data science agents to provide 
evidence-based insights and findings.

**Key Findings:**
- Data analysis completed successfully
- Multiple agent results aggregated
- Evidence-based conclusions drawn
- Visualization artifacts collected

**Recommendations:**
- Continue data exploration with specialized agents
- Validate findings through cross-analysis
- Generate additional visualizations as needed

**Report Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            
            logger.info("✅ Report generation completed")
            return result.strip()
            
        except Exception as e:
            logger.error(f"❌ Error in report generation: {e}")
            return f"Error generating report: {str(e)}"

class SimpleReportGeneratorExecutor(AgentExecutor):
    """Executor for Simple Report Generator."""

    def __init__(self):
        self.agent = SimpleReportGenerator()

    async def execute(self, context: RequestContext, event_queue: EventQueue) -> None:
        """Execute report generation task."""
        try:
            logger.info(f"🚀 Report Generator task started - Context ID: {context.context_id}")
            
            # Extract user input
            user_input = ""
            if context.message and context.message.parts:
                for part in context.message.parts:
                    if hasattr(part, 'root') and hasattr(part.root, 'text'):
                        user_input += part.root.text + " "
            
            user_input = user_input.strip()
            if not user_input:
                user_input = "Generate comprehensive report"
            
            logger.info(f"📝 Processing query: {user_input}")
            
            # Update task status
            task_updater = TaskUpdater(context, event_queue)
            await task_updater.update_status(
                TaskState.working,
                message="Generating comprehensive report..."
            )
            
            # Generate report
            result = await self.agent.invoke(user_input)
            
            # Complete task
            await task_updater.update_status(
                TaskState.completed,
                message=f"Report generation completed successfully: {result}"
            )
            
            logger.info("✅ Report Generator task completed")
            
        except Exception as e:
            logger.error(f"❌ Report Generator task failed: {e}")
            task_updater = TaskUpdater(context, event_queue)
            await task_updater.update_status(
                TaskState.failed,
                message=f"Report generation failed: {str(e)}"
            )

    async def cancel(self, context: RequestContext, event_queue: EventQueue) -> None:
        logger.info("🛑 Report Generator task cancelled")

def create_agent_card() -> AgentCard:
    """Create agent card for report_generator"""
    return AgentCard(
        name="report_generator",
        description="Comprehensive data analysis report generator that synthesizes results from multiple analysis agents",
        url="http://localhost:8315/",
        version="1.0.0",
        defaultInputModes=["text"],
        defaultOutputModes=["text"],
        skills=[
            AgentSkill(
                id="report_generation",
                name="report_generation",
                description="Generate comprehensive reports from multiple analysis results",
                tags=["report", "synthesis", "analysis", "documentation"],
                examples=["generate report", "create summary", "synthesize results"]
            ),
            AgentSkill(
                id="result_validation",
                name="result_validation", 
                description="Validate analysis results for accuracy and consistency",
                tags=["validation", "verification", "accuracy", "quality"],
                examples=["validate results", "check accuracy", "verify findings"]
            ),
            AgentSkill(
                id="visualization_aggregation",
                name="visualization_aggregation",
                description="Aggregate and organize visualizations from multiple agents",
                tags=["visualization", "aggregation", "dashboard", "charts"],
                examples=["combine charts", "create dashboard", "aggregate plots"]
            )
        ],
        capabilities=AgentCapabilities(
            streaming=True,
            cancellation=True
        ),
        supportsAuthenticatedExtendedCard=False
    )

def main():
    """Main function to start the report_generator server"""
    logger.info("🚀 Starting Report Generator A2A Server on port 8315...")
    
    # Create agent card
    agent_card = create_agent_card()
    
    # Create request handler
    request_handler = DefaultRequestHandler(
        agent_executor=SimpleReportGeneratorExecutor(),
        task_store=InMemoryTaskStore(),
    )
    
    # Create A2A application
    server = A2AStarletteApplication(
        agent_card=agent_card,
        http_handler=request_handler,
    )
    
    print("📋 Starting Report Generator Server")
    print("🌐 Server starting on http://localhost:8315")
    print("📋 Agent card: http://localhost:8315/.well-known/agent.json")
    
    # Run server
    uvicorn.run(server.build(), host="0.0.0.0", port=8315, log_level="info")

if __name__ == "__main__":
    main() 