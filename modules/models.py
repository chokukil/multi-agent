"""
Data Models for Cherry AI Streamlit Platform

Enhanced data structures based on the design specifications with comprehensive UI/UX support.
"""

from dataclasses import dataclass, field
from typing import Any, Dict, List, Optional, Literal, Union
from datetime import datetime
from enum import Enum
import pandas as pd


class TaskState(Enum):
    """Task execution states"""
    PENDING = "pending"
    WORKING = "working"
    COMPLETED = "completed"
    FAILED = "failed"


class ArtifactType(Enum):
    """Types of artifacts generated by agents"""
    PLOTLY_CHART = "plotly_chart"
    TABLE = "table"
    IMAGE = "image"
    CODE = "code"
    MARKDOWN = "markdown"
    JSON = "json"


class ScreenSize(Enum):
    """Screen size categories for responsive design"""
    MOBILE = "mobile"
    TABLET = "tablet"
    DESKTOP = "desktop"


@dataclass
class EnhancedChatMessage:
    """Enhanced chat message with UI metadata and artifacts"""
    id: str
    content: str
    role: Literal["user", "assistant", "system"]
    timestamp: datetime
    artifacts: List['EnhancedArtifact'] = field(default_factory=list)
    agent_info: Optional['AgentInfo'] = None
    ui_metadata: Dict[str, Any] = field(default_factory=dict)
    progress_info: Optional['ProgressInfo'] = None
    recommendations: List['OneClickRecommendation'] = field(default_factory=list)


@dataclass
class VisualDataCard:
    """Visual data card for dataset display with enhanced UI features"""
    id: str
    name: str
    file_path: str
    format: str
    rows: int
    columns: int
    memory_usage: str
    preview: pd.DataFrame
    metadata: Dict[str, Any]
    relationships: List['DataRelationship'] = field(default_factory=list)
    quality_indicators: Optional['DataQualityInfo'] = None
    selection_state: bool = True
    upload_progress: float = 100.0


@dataclass
class DataQualityInfo:
    """Data quality indicators for visual display"""
    missing_values_count: int
    missing_percentage: float
    data_types_summary: Dict[str, int]
    quality_score: float
    issues: List[str] = field(default_factory=list)


@dataclass
class DataRelationship:
    """Relationship between datasets"""
    target_dataset_id: str
    relationship_type: str
    common_columns: List[str]
    confidence_score: float
    merge_suggestions: List[str] = field(default_factory=list)


@dataclass
class EnhancedTaskRequest:
    """Enhanced task request with UI context"""
    id: str
    user_message: str
    selected_datasets: List[str]
    context: 'DataContext'
    priority: int = 1
    ui_context: Optional['UIContext'] = None
    execution_preferences: Optional['ExecutionPreferences'] = None


@dataclass
class UIContext:
    """UI context for responsive design and accessibility"""
    screen_size: ScreenSize
    device_type: Literal["desktop", "tablet", "mobile"]
    accessibility_preferences: Dict[str, Any] = field(default_factory=dict)
    theme_preference: Literal["light", "dark", "auto"] = "auto"
    layout_preferences: Dict[str, Any] = field(default_factory=dict)


@dataclass
class ExecutionPreferences:
    """User preferences for task execution"""
    prefer_parallel: bool = True
    timeout_seconds: int = 300
    retry_count: int = 3
    verbose_logging: bool = False


@dataclass
class AgentProgressInfo:
    """Real-time agent progress information"""
    port: int
    name: str
    status: TaskState
    execution_time: float
    artifacts_generated: List[str]
    progress_percentage: float = 0.0
    current_task: str = ""
    avatar_icon: str = ""
    status_color: str = ""


@dataclass
class EnhancedArtifact:
    """Enhanced artifact with rendering and download options"""
    id: str
    type: str  # Changed from ArtifactType to str for flexibility
    data: Any  # Changed from content to data
    metadata: Dict[str, Any]
    source_agent: int
    created_at: datetime  # Changed from timestamp to created_at
    
    # Additional fields used by artifact renderer
    title: str = ""
    description: str = ""
    icon: str = "ðŸ“Š"
    format: str = "json"
    file_size_mb: float = 0.0
    
    # Optional rendering and interaction options
    render_options: Optional['RenderOptions'] = None
    download_options: List['DownloadOption'] = field(default_factory=list)
    interactive_features: Optional['InteractiveFeatures'] = None


@dataclass
class RenderOptions:
    """Options for artifact rendering"""
    width: Optional[int] = None
    height: Optional[int] = None
    theme: str = "streamlit"
    interactive: bool = True
    show_toolbar: bool = True


@dataclass
class DownloadOption:
    """Download option for artifacts"""
    format: str
    filename: str
    description: str
    raw_artifact: bool = False
    size_estimate: Optional[str] = None


@dataclass
class InteractiveFeatures:
    """Interactive features for artifacts"""
    zoomable: bool = False
    clickable: bool = False
    selectable: bool = False
    copyable: bool = False


@dataclass
class OneClickRecommendation:
    """One-click analysis recommendation"""
    title: str
    description: str
    action_type: str
    parameters: Dict[str, Any]
    estimated_time: int
    confidence_score: float
    complexity_level: Literal["beginner", "intermediate", "advanced"]
    expected_result_preview: str
    icon: str
    color_theme: str
    execution_button_text: str


@dataclass
class DataContext:
    """Context information about the data being analyzed"""
    domain: str
    data_types: List[str]
    relationships: List[DataRelationship]
    quality_assessment: DataQualityInfo
    suggested_analyses: List[str] = field(default_factory=list)


@dataclass
class ProgressInfo:
    """Progress information for streaming responses"""
    agents_working: List[AgentProgressInfo]
    current_step: str
    total_steps: int
    completion_percentage: float
    estimated_remaining_time: Optional[int] = None


@dataclass
class AgentInfo:
    """Information about an A2A agent"""
    port: int
    name: str
    capabilities: List[str]
    status: str
    avatar_icon: str
    description: str


@dataclass
class StreamingResponse:
    """Response with streaming capability"""
    content: str
    is_complete: bool
    chunk_index: int
    total_chunks: Optional[int] = None
    progress_info: Optional[ProgressInfo] = None


@dataclass
class SessionState:
    """Enhanced session state management"""
    session_id: str
    uploaded_datasets: Dict[str, VisualDataCard] = field(default_factory=dict)
    selected_datasets: List[str] = field(default_factory=list)
    chat_history: List[EnhancedChatMessage] = field(default_factory=list)
    active_tasks: Dict[str, 'TaskInfo'] = field(default_factory=dict)
    user_preferences: Dict[str, Any] = field(default_factory=dict)
    ui_context: Optional[UIContext] = None


@dataclass
class TaskInfo:
    """Information about an active task"""
    task_id: str
    request: EnhancedTaskRequest
    status: TaskState
    start_time: datetime
    end_time: Optional[datetime] = None
    agents_involved: List[AgentInfo] = field(default_factory=list)
    results: List[EnhancedArtifact] = field(default_factory=list)
    error_info: Optional[str] = None