"""
Ïù∏ÌÑ∞ÎûôÌã∞Î∏å Ïª®Ìä∏Î°§ ÏãúÏä§ÌÖú

Ïù¥ Î™®ÎìàÏùÄ ÏïÑÌã∞Ìå©Ìä∏Î≥Ñ ÏßÅÍ¥ÄÏ†Å Ï°∞Ïûë ÎèÑÍµ¨, ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§ Î∞è Ìà¥ÌåÅ ÏßÄÏõê,
ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Ï†ÄÏû• Î∞è Î≥µÏõê Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌïòÎäî Ïù∏ÌÑ∞ÎûôÌã∞Î∏å Ïª®Ìä∏Î°§ ÏãúÏä§ÌÖúÏùÑ Íµ¨ÌòÑÌï©ÎãàÎã§.

Ï£ºÏöî Í∏∞Îä•:
- ÏïÑÌã∞Ìå©Ìä∏Î≥Ñ ÎßûÏ∂§Ìòï Ï°∞Ïûë ÎèÑÍµ¨
- ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§ Î∞è Ìï´ÌÇ§ ÏßÄÏõê
- ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Ï†ÄÏû• Î∞è Î≥µÏõê
- Ìà¥ÌåÅ Î∞è Í∞ÄÏù¥Îìú ÏãúÏä§ÌÖú
"""

import json
import logging
import time
from collections import defaultdict
from dataclasses import dataclass, field
from datetime import datetime
from typing import Any, Dict, List, Optional, Callable, Union
from enum import Enum
import streamlit as st
import plotly.graph_objects as go
import pandas as pd
from io import BytesIO
import base64

logger = logging.getLogger(__name__)

class ArtifactType(Enum):
    """ÏïÑÌã∞Ìå©Ìä∏ Ïú†Ìòï"""
    CHART = "chart"           # Ï∞®Ìä∏ (Plotly)
    TABLE = "table"          # ÌÖåÏù¥Î∏î (DataFrame)
    IMAGE = "image"          # Ïù¥ÎØ∏ÏßÄ
    CODE = "code"            # ÏΩîÎìú
    TEXT = "text"            # ÌÖçÏä§Ìä∏
    METRIC = "metric"        # Î©îÌä∏Î¶≠

class ActionType(Enum):
    """Ïï°ÏÖò Ïú†Ìòï"""
    ZOOM = "zoom"                    # Ï§å Ïù∏/ÏïÑÏõÉ
    RESET_VIEW = "reset_view"        # Î∑∞ Î¶¨ÏÖã
    DOWNLOAD = "download"            # Îã§Ïö¥Î°úÎìú
    COPY = "copy"                    # Î≥µÏÇ¨
    FILTER = "filter"                # ÌïÑÌÑ∞ÎßÅ
    SORT = "sort"                    # Ï†ïÎ†¨
    SEARCH = "search"                # Í≤ÄÏÉâ
    FULLSCREEN = "fullscreen"        # Ï†ÑÏ≤¥ÌôîÎ©¥
    REFRESH = "refresh"              # ÏÉàÎ°úÍ≥†Ïπ®
    EXPORT = "export"                # ÎÇ¥Î≥¥ÎÇ¥Í∏∞
    EDIT = "edit"                    # Ìé∏Ïßë
    SHARE = "share"                  # Í≥µÏú†

@dataclass
class ShortcutKey:
    """Îã®Ï∂ïÌÇ§ Ï†ïÏùò"""
    key_combination: str           # Ïòà: "Ctrl+C", "Shift+F"
    action: ActionType
    description: str
    artifact_types: List[ArtifactType] = field(default_factory=list)  # Ï†ÅÏö© Í∞ÄÎä•Ìïú ÏïÑÌã∞Ìå©Ìä∏ Ïú†Ìòï
    enabled: bool = True

@dataclass
class UserPreferences:
    """ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï"""
    user_id: str
    
    # ÏùºÎ∞ò ÏÑ§Ï†ï
    theme: str = "light"                    # light, dark
    default_chart_size: str = "medium"      # small, medium, large
    auto_download: bool = False
    show_tooltips: bool = True
    enable_shortcuts: bool = True
    
    # ÌëúÏãú ÏÑ§Ï†ï
    max_table_rows: int = 100
    chart_animation: bool = True
    show_data_labels: bool = True
    decimal_places: int = 2
    
    # Îã®Ï∂ïÌÇ§ ÏÑ§Ï†ï
    custom_shortcuts: Dict[str, str] = field(default_factory=dict)
    disabled_shortcuts: List[str] = field(default_factory=list)
    
    # ÎÇ¥Î≥¥ÎÇ¥Í∏∞ ÏÑ§Ï†ï
    default_image_format: str = "png"       # png, jpg, svg, pdf
    default_data_format: str = "csv"        # csv, xlsx, json
    include_metadata: bool = True
    
    # ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Ñ
    last_updated: datetime = field(default_factory=datetime.now)

@dataclass
class ControlAction:
    """Ïª®Ìä∏Î°§ Ïï°ÏÖò"""
    action_id: str
    action_type: ActionType
    artifact_id: str
    parameters: Dict[str, Any] = field(default_factory=dict)
    timestamp: datetime = field(default_factory=datetime.now)
    success: bool = True
    error_message: str = ""

class InteractiveControlsSystem:
    """Ïù∏ÌÑ∞ÎûôÌã∞Î∏å Ïª®Ìä∏Î°§ ÏãúÏä§ÌÖú"""
    
    def __init__(self):
        # Í∏∞Î≥∏ Îã®Ï∂ïÌÇ§ Ï†ïÏùò
        self.default_shortcuts = [
            ShortcutKey("Ctrl+C", ActionType.COPY, "Î≥µÏÇ¨", [ArtifactType.CHART, ArtifactType.TABLE, ArtifactType.TEXT]),
            ShortcutKey("Ctrl+D", ActionType.DOWNLOAD, "Îã§Ïö¥Î°úÎìú", [ArtifactType.CHART, ArtifactType.TABLE, ArtifactType.IMAGE]),
            ShortcutKey("Ctrl+F", ActionType.SEARCH, "Í≤ÄÏÉâ", [ArtifactType.TABLE, ArtifactType.TEXT]),
            ShortcutKey("F11", ActionType.FULLSCREEN, "Ï†ÑÏ≤¥ÌôîÎ©¥", [ArtifactType.CHART, ArtifactType.IMAGE]),
            ShortcutKey("Ctrl+R", ActionType.REFRESH, "ÏÉàÎ°úÍ≥†Ïπ®", list(ArtifactType)),
            ShortcutKey("Ctrl+Z", ActionType.RESET_VIEW, "Î∑∞ Î¶¨ÏÖã", [ArtifactType.CHART]),
            ShortcutKey("Ctrl+E", ActionType.EXPORT, "ÎÇ¥Î≥¥ÎÇ¥Í∏∞", list(ArtifactType)),
            ShortcutKey("Ctrl+S", ActionType.SHARE, "Í≥µÏú†", list(ArtifactType))
        ]
        
        # ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï
        self.user_preferences: Dict[str, UserPreferences] = {}
        self.current_user_id: str = "default"
        
        # Ïï°ÏÖò ÌûàÏä§ÌÜ†Î¶¨
        self.action_history: List[ControlAction] = []
        
        # ÏïÑÌã∞Ìå©Ìä∏Î≥Ñ Ïª®Ìä∏Î°§ ÏÉÅÌÉú
        self.artifact_states: Dict[str, Dict[str, Any]] = defaultdict(dict)
        
        # Ïï°ÏÖò Ìï∏Îì§Îü¨
        self.action_handlers: Dict[ActionType, Callable] = {}
        
        # Ìà¥ÌåÅ Î©îÏãúÏßÄ
        self.tooltips = {
            ActionType.ZOOM: "ÎßàÏö∞Ïä§ Ìú†Î°ú Ï§å Ïù∏/ÏïÑÏõÉ, ÎçîÎ∏îÌÅ¥Î¶≠ÏúºÎ°ú Î¶¨ÏÖã",
            ActionType.DOWNLOAD: "ÌòÑÏû¨ ÏïÑÌã∞Ìå©Ìä∏Î•º Î°úÏª¨Ïóê Ï†ÄÏû•Ìï©ÎãàÎã§",
            ActionType.COPY: "ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨Ìï©ÎãàÎã§",
            ActionType.FILTER: "Îç∞Ïù¥ÌÑ∞Î•º ÌïÑÌÑ∞ÎßÅÌï©ÎãàÎã§",
            ActionType.SORT: "Îç∞Ïù¥ÌÑ∞Î•º Ï†ïÎ†¨Ìï©ÎãàÎã§",
            ActionType.SEARCH: "ÎÇ¥Ïö©ÏùÑ Í≤ÄÏÉâÌï©ÎãàÎã§",
            ActionType.FULLSCREEN: "Ï†ÑÏ≤¥ÌôîÎ©¥ÏúºÎ°ú Î≥¥Í∏∞",
            ActionType.REFRESH: "ÏµúÏã† ÏÉÅÌÉúÎ°ú ÏÉàÎ°úÍ≥†Ïπ®",
            ActionType.EXPORT: "Îã§ÏñëÌïú ÌòïÏãùÏúºÎ°ú ÎÇ¥Î≥¥ÎÇ¥Í∏∞",
            ActionType.SHARE: "Îã§Î•∏ ÏÇ¨Ïö©ÏûêÏôÄ Í≥µÏú†"
        }
        
        # Í∏∞Î≥∏ Ìï∏Îì§Îü¨ Îì±Î°ù
        self._register_default_handlers()
    
    def _register_default_handlers(self):
        """Í∏∞Î≥∏ Ïï°ÏÖò Ìï∏Îì§Îü¨ Îì±Î°ù"""
        
        self.action_handlers[ActionType.DOWNLOAD] = self._handle_download
        self.action_handlers[ActionType.COPY] = self._handle_copy
        self.action_handlers[ActionType.EXPORT] = self._handle_export
        self.action_handlers[ActionType.FULLSCREEN] = self._handle_fullscreen
        self.action_handlers[ActionType.RESET_VIEW] = self._handle_reset_view
    
    def set_user_preferences(self, user_id: str, preferences: UserPreferences = None):
        """ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï"""
        
        self.current_user_id = user_id
        
        if preferences:
            self.user_preferences[user_id] = preferences
        elif user_id not in self.user_preferences:
            # Í∏∞Î≥∏ ÏÑ§Ï†ï ÏÉùÏÑ±
            self.user_preferences[user_id] = UserPreferences(user_id=user_id)
    
    def get_user_preferences(self, user_id: str = None) -> UserPreferences:
        """ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Ï°∞Ìöå"""
        
        user_id = user_id or self.current_user_id
        
        if user_id not in self.user_preferences:
            self.user_preferences[user_id] = UserPreferences(user_id=user_id)
        
        return self.user_preferences[user_id]
    
    def render_artifact_controls(self, 
                                artifact_id: str, 
                                artifact_type: ArtifactType,
                                artifact_data: Any = None,
                                container=None) -> Dict[str, Any]:
        """ÏïÑÌã∞Ìå©Ìä∏Î≥Ñ Ïª®Ìä∏Î°§ Î†åÎçîÎßÅ"""
        
        if container is None:
            container = st.container()
        
        preferences = self.get_user_preferences()
        control_results = {}
        
        with container:
            # Ïª®Ìä∏Î°§ Î∞î Ìó§Îçî
            col1, col2, col3 = st.columns([2, 3, 2])
            
            with col1:
                st.markdown(f"**üéõÔ∏è {artifact_type.value.title()} Ïª®Ìä∏Î°§**")
            
            with col3:
                # Ï†ÑÏ≤¥ÌôîÎ©¥ ÌÜ†Í∏Ä
                if st.button("üîç", help="Ï†ÑÏ≤¥ÌôîÎ©¥", key=f"fullscreen_{artifact_id}"):
                    control_results['fullscreen'] = True
            
            # ÏïÑÌã∞Ìå©Ìä∏ Ïú†ÌòïÎ≥Ñ Ïª®Ìä∏Î°§
            if artifact_type == ArtifactType.CHART:
                control_results.update(self._render_chart_controls(artifact_id, artifact_data, preferences))
            
            elif artifact_type == ArtifactType.TABLE:
                control_results.update(self._render_table_controls(artifact_id, artifact_data, preferences))
            
            elif artifact_type == ArtifactType.IMAGE:
                control_results.update(self._render_image_controls(artifact_id, artifact_data, preferences))
            
            elif artifact_type == ArtifactType.CODE:
                control_results.update(self._render_code_controls(artifact_id, artifact_data, preferences))
            
            elif artifact_type == ArtifactType.TEXT:
                control_results.update(self._render_text_controls(artifact_id, artifact_data, preferences))
            
            # Í≥µÌÜµ Ïª®Ìä∏Î°§
            control_results.update(self._render_common_controls(artifact_id, artifact_type, preferences))
            
            # Îã®Ï∂ïÌÇ§ Í∞ÄÏù¥Îìú
            if preferences.show_tooltips:
                self._render_shortcut_guide(artifact_type)
        
        # Ïï°ÏÖò Ïã§Ìñâ
        for action_type, params in control_results.items():
            if params and action_type in self.action_handlers:
                self._execute_action(artifact_id, ActionType(action_type), params)
        
        return control_results
    
    def _render_chart_controls(self, artifact_id: str, chart_data: Any, preferences: UserPreferences) -> Dict[str, Any]:
        """Ï∞®Ìä∏ Ïª®Ìä∏Î°§ Î†åÎçîÎßÅ"""
        
        controls = {}
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            # Ï∞®Ìä∏ ÌÅ¨Í∏∞ Ï°∞Ï†à
            size_options = ["small", "medium", "large"]
            current_size = self.artifact_states[artifact_id].get('size', preferences.default_chart_size)
            
            new_size = st.selectbox(
                "ÌÅ¨Í∏∞",
                options=size_options,
                index=size_options.index(current_size),
                key=f"chart_size_{artifact_id}"
            )
            
            if new_size != current_size:
                self.artifact_states[artifact_id]['size'] = new_size
                controls['resize'] = {'size': new_size}
        
        with col2:
            # Ï∞®Ìä∏ Ïú†Ìòï (Í∞ÄÎä•Ìïú Í≤ΩÏö∞)
            if st.button("üìä", help="Ï∞®Ìä∏ Ïú†Ìòï Î≥ÄÍ≤Ω", key=f"chart_type_{artifact_id}"):
                controls['change_type'] = True
        
        with col3:
            # Î∑∞ Î¶¨ÏÖã
            if st.button("üîÑ", help="Î∑∞ Î¶¨ÏÖã (Ctrl+Z)", key=f"reset_view_{artifact_id}"):
                controls['reset_view'] = True
        
        with col4:
            # Ïï†ÎãàÎ©îÏù¥ÏÖò ÌÜ†Í∏Ä
            current_animation = self.artifact_states[artifact_id].get('animation', preferences.chart_animation)
            
            animation = st.toggle(
                "Ïï†ÎãàÎ©îÏù¥ÏÖò",
                value=current_animation,
                key=f"animation_{artifact_id}"
            )
            
            if animation != current_animation:
                self.artifact_states[artifact_id]['animation'] = animation
                controls['animation'] = {'enabled': animation}
        
        return controls
    
    def _render_table_controls(self, artifact_id: str, table_data: Any, preferences: UserPreferences) -> Dict[str, Any]:
        """ÌÖåÏù¥Î∏î Ïª®Ìä∏Î°§ Î†åÎçîÎßÅ"""
        
        controls = {}
        
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            # Ìñâ Ïàò Ï†úÌïú
            current_rows = self.artifact_states[artifact_id].get('max_rows', preferences.max_table_rows)
            
            max_rows = st.number_input(
                "ÏµúÎåÄ ÌñâÏàò",
                min_value=10,
                max_value=1000,
                value=current_rows,
                step=10,
                key=f"max_rows_{artifact_id}"
            )
            
            if max_rows != current_rows:
                self.artifact_states[artifact_id]['max_rows'] = max_rows
                controls['limit_rows'] = {'max_rows': max_rows}
        
        with col2:
            # Í≤ÄÏÉâ
            search_term = st.text_input(
                "Í≤ÄÏÉâ",
                placeholder="Í≤ÄÏÉâÏñ¥ ÏûÖÎ†•",
                key=f"search_{artifact_id}"
            )
            
            if search_term:
                controls['search'] = {'term': search_term}
        
        with col3:
            # Ï†ïÎ†¨
            if st.button("‚ÜïÔ∏è", help="Ï†ïÎ†¨", key=f"sort_{artifact_id}"):
                controls['sort'] = True
        
        with col4:
            # ÌïÑÌÑ∞
            if st.button("üîç", help="ÌïÑÌÑ∞", key=f"filter_{artifact_id}"):
                controls['filter'] = True
        
        with col5:
            # ÏÜåÏàòÏ†ê ÏûêÎ¶¨Ïàò
            current_decimals = self.artifact_states[artifact_id].get('decimals', preferences.decimal_places)
            
            decimals = st.number_input(
                "ÏÜåÏàòÏ†ê",
                min_value=0,
                max_value=6,
                value=current_decimals,
                key=f"decimals_{artifact_id}"
            )
            
            if decimals != current_decimals:
                self.artifact_states[artifact_id]['decimals'] = decimals
                controls['format_decimals'] = {'places': decimals}
        
        return controls
    
    def _render_image_controls(self, artifact_id: str, image_data: Any, preferences: UserPreferences) -> Dict[str, Any]:
        """Ïù¥ÎØ∏ÏßÄ Ïª®Ìä∏Î°§ Î†åÎçîÎßÅ"""
        
        controls = {}
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            # Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞
            if st.button("üîç+", help="ÌôïÎåÄ", key=f"zoom_in_{artifact_id}"):
                controls['zoom'] = {'direction': 'in'}
        
        with col2:
            if st.button("üîç-", help="Ï∂ïÏÜå", key=f"zoom_out_{artifact_id}"):
                controls['zoom'] = {'direction': 'out'}
        
        with col3:
            # ÌöåÏ†Ñ
            if st.button("‚Üª", help="ÌöåÏ†Ñ", key=f"rotate_{artifact_id}"):
                controls['rotate'] = {'angle': 90}
        
        with col4:
            # ÏõêÎ≥∏ ÌÅ¨Í∏∞
            if st.button("üìê", help="ÏõêÎ≥∏ ÌÅ¨Í∏∞", key=f"original_size_{artifact_id}"):
                controls['reset_size'] = True
        
        return controls
    
    def _render_code_controls(self, artifact_id: str, code_data: Any, preferences: UserPreferences) -> Dict[str, Any]:
        """ÏΩîÎìú Ïª®Ìä∏Î°§ Î†åÎçîÎßÅ"""
        
        controls = {}
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            # Ïñ∏Ïñ¥ ÏÑ†ÌÉù
            languages = ["python", "javascript", "sql", "json", "yaml", "markdown"]
            current_lang = self.artifact_states[artifact_id].get('language', 'python')
            
            language = st.selectbox(
                "Ïñ∏Ïñ¥",
                options=languages,
                index=languages.index(current_lang) if current_lang in languages else 0,
                key=f"language_{artifact_id}"
            )
            
            if language != current_lang:
                self.artifact_states[artifact_id]['language'] = language
                controls['highlight'] = {'language': language}
        
        with col2:
            # Ï§Ñ Î≤àÌò∏ ÌÜ†Í∏Ä
            current_line_numbers = self.artifact_states[artifact_id].get('line_numbers', True)
            
            line_numbers = st.toggle(
                "Ï§Ñ Î≤àÌò∏",
                value=current_line_numbers,
                key=f"line_numbers_{artifact_id}"
            )
            
            if line_numbers != current_line_numbers:
                self.artifact_states[artifact_id]['line_numbers'] = line_numbers
                controls['line_numbers'] = {'enabled': line_numbers}
        
        with col3:
            # ÏΩîÎìú Ïã§Ìñâ (Í∞ÄÎä•Ìïú Í≤ΩÏö∞)
            if st.button("‚ñ∂Ô∏è", help="Ïã§Ìñâ", key=f"run_code_{artifact_id}"):
                controls['execute'] = True
        
        with col4:
            # Ìè¨Îß∑ÌåÖ
            if st.button("üíÖ", help="Ìè¨Îß∑ÌåÖ", key=f"format_code_{artifact_id}"):
                controls['format'] = True
        
        return controls
    
    def _render_text_controls(self, artifact_id: str, text_data: Any, preferences: UserPreferences) -> Dict[str, Any]:
        """ÌÖçÏä§Ìä∏ Ïª®Ìä∏Î°§ Î†åÎçîÎßÅ"""
        
        controls = {}
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            # Ìè∞Ìä∏ ÌÅ¨Í∏∞
            font_sizes = ["small", "medium", "large"]
            current_font = self.artifact_states[artifact_id].get('font_size', 'medium')
            
            font_size = st.selectbox(
                "Ìè∞Ìä∏ ÌÅ¨Í∏∞",
                options=font_sizes,
                index=font_sizes.index(current_font),
                key=f"font_size_{artifact_id}"
            )
            
            if font_size != current_font:
                self.artifact_states[artifact_id]['font_size'] = font_size
                controls['font_size'] = {'size': font_size}
        
        with col2:
            # Í≤ÄÏÉâ
            search_term = st.text_input(
                "Í≤ÄÏÉâ",
                placeholder="ÌÖçÏä§Ìä∏ Í≤ÄÏÉâ",
                key=f"text_search_{artifact_id}"
            )
            
            if search_term:
                controls['search'] = {'term': search_term}
        
        with col3:
            # ÏõåÎìúÎû© ÌÜ†Í∏Ä
            current_wrap = self.artifact_states[artifact_id].get('word_wrap', True)
            
            word_wrap = st.toggle(
                "Ï§ÑÎ∞îÍøà",
                value=current_wrap,
                key=f"word_wrap_{artifact_id}"
            )
            
            if word_wrap != current_wrap:
                self.artifact_states[artifact_id]['word_wrap'] = word_wrap
                controls['word_wrap'] = {'enabled': word_wrap}
        
        with col4:
            # ÏùΩÍ∏∞ Î™®Îìú
            if st.button("üìñ", help="ÏùΩÍ∏∞ Î™®Îìú", key=f"reading_mode_{artifact_id}"):
                controls['reading_mode'] = True
        
        return controls
    
    def _render_common_controls(self, artifact_id: str, artifact_type: ArtifactType, preferences: UserPreferences) -> Dict[str, Any]:
        """Í≥µÌÜµ Ïª®Ìä∏Î°§ Î†åÎçîÎßÅ"""
        
        controls = {}
        
        st.markdown("---")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            # Îã§Ïö¥Î°úÎìú
            if st.button("üíæ Îã§Ïö¥Î°úÎìú", help="Îã§Ïö¥Î°úÎìú (Ctrl+D)", key=f"download_{artifact_id}"):
                controls['download'] = True
        
        with col2:
            # Î≥µÏÇ¨
            if st.button("üìã Î≥µÏÇ¨", help="Î≥µÏÇ¨ (Ctrl+C)", key=f"copy_{artifact_id}"):
                controls['copy'] = True
        
        with col3:
            # Í≥µÏú†
            if st.button("üîó Í≥µÏú†", help="Í≥µÏú† (Ctrl+S)", key=f"share_{artifact_id}"):
                controls['share'] = True
        
        with col4:
            # ÏÉàÎ°úÍ≥†Ïπ®
            if st.button("üîÑ ÏÉàÎ°úÍ≥†Ïπ®", help="ÏÉàÎ°úÍ≥†Ïπ® (Ctrl+R)", key=f"refresh_{artifact_id}"):
                controls['refresh'] = True
        
        return controls
    
    def _render_shortcut_guide(self, artifact_type: ArtifactType):
        """Îã®Ï∂ïÌÇ§ Í∞ÄÏù¥Îìú Î†åÎçîÎßÅ"""
        
        with st.expander("‚å®Ô∏è Îã®Ï∂ïÌÇ§ Í∞ÄÏù¥Îìú", expanded=False):
            applicable_shortcuts = [
                shortcut for shortcut in self.default_shortcuts
                if not shortcut.artifact_types or artifact_type in shortcut.artifact_types
            ]
            
            if applicable_shortcuts:
                for shortcut in applicable_shortcuts:
                    col1, col2 = st.columns([1, 3])
                    
                    with col1:
                        st.code(shortcut.key_combination)
                    
                    with col2:
                        st.write(shortcut.description)
            else:
                st.info("Ïù¥ ÏïÑÌã∞Ìå©Ìä∏ Ïú†ÌòïÏóê ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Îã®Ï∂ïÌÇ§Í∞Ä ÏóÜÏäµÎãàÎã§.")
    
    def render_preferences_panel(self, container=None):
        """ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Ìå®ÎÑê Î†åÎçîÎßÅ"""
        
        if container is None:
            container = st.container()
        
        preferences = self.get_user_preferences()
        
        with container:
            st.markdown("## ‚öôÔ∏è ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï")
            
            # ÏùºÎ∞ò ÏÑ§Ï†ï
            with st.expander("üé® ÏùºÎ∞ò ÏÑ§Ï†ï", expanded=True):
                col1, col2 = st.columns(2)
                
                with col1:
                    theme = st.selectbox(
                        "ÌÖåÎßà",
                        options=["light", "dark"],
                        index=0 if preferences.theme == "light" else 1
                    )
                    
                    default_chart_size = st.selectbox(
                        "Í∏∞Î≥∏ Ï∞®Ìä∏ ÌÅ¨Í∏∞",
                        options=["small", "medium", "large"],
                        index=["small", "medium", "large"].index(preferences.default_chart_size)
                    )
                
                with col2:
                    show_tooltips = st.checkbox("Ìà¥ÌåÅ ÌëúÏãú", value=preferences.show_tooltips)
                    enable_shortcuts = st.checkbox("Îã®Ï∂ïÌÇ§ ÌôúÏÑ±Ìôî", value=preferences.enable_shortcuts)
            
            # ÌëúÏãú ÏÑ§Ï†ï
            with st.expander("üìä ÌëúÏãú ÏÑ§Ï†ï"):
                col1, col2 = st.columns(2)
                
                with col1:
                    max_table_rows = st.number_input(
                        "ÌÖåÏù¥Î∏î ÏµúÎåÄ ÌñâÏàò",
                        min_value=10,
                        max_value=1000,
                        value=preferences.max_table_rows,
                        step=10
                    )
                    
                    decimal_places = st.number_input(
                        "ÏÜåÏàòÏ†ê ÏûêÎ¶¨Ïàò",
                        min_value=0,
                        max_value=6,
                        value=preferences.decimal_places
                    )
                
                with col2:
                    chart_animation = st.checkbox("Ï∞®Ìä∏ Ïï†ÎãàÎ©îÏù¥ÏÖò", value=preferences.chart_animation)
                    show_data_labels = st.checkbox("Îç∞Ïù¥ÌÑ∞ ÎùºÎ≤® ÌëúÏãú", value=preferences.show_data_labels)
            
            # ÎÇ¥Î≥¥ÎÇ¥Í∏∞ ÏÑ§Ï†ï
            with st.expander("üíæ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ ÏÑ§Ï†ï"):
                col1, col2 = st.columns(2)
                
                with col1:
                    default_image_format = st.selectbox(
                        "Í∏∞Î≥∏ Ïù¥ÎØ∏ÏßÄ ÌòïÏãù",
                        options=["png", "jpg", "svg", "pdf"],
                        index=["png", "jpg", "svg", "pdf"].index(preferences.default_image_format)
                    )
                
                with col2:
                    default_data_format = st.selectbox(
                        "Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÌòïÏãù",
                        options=["csv", "xlsx", "json"],
                        index=["csv", "xlsx", "json"].index(preferences.default_data_format)
                    )
                
                include_metadata = st.checkbox("Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ìè¨Ìï®", value=preferences.include_metadata)
            
            # ÏÑ§Ï†ï Ï†ÄÏû•
            if st.button("üíæ ÏÑ§Ï†ï Ï†ÄÏû•", type="primary"):
                preferences.theme = theme
                preferences.default_chart_size = default_chart_size
                preferences.show_tooltips = show_tooltips
                preferences.enable_shortcuts = enable_shortcuts
                preferences.max_table_rows = max_table_rows
                preferences.decimal_places = decimal_places
                preferences.chart_animation = chart_animation
                preferences.show_data_labels = show_data_labels
                preferences.default_image_format = default_image_format
                preferences.default_data_format = default_data_format
                preferences.include_metadata = include_metadata
                preferences.last_updated = datetime.now()
                
                st.success("‚úÖ ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!")
                logger.info(f"‚öôÔ∏è ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Ï†ÄÏû• - {preferences.user_id}")
    
    def _execute_action(self, artifact_id: str, action_type: ActionType, parameters: Dict[str, Any]):
        """Ïï°ÏÖò Ïã§Ìñâ"""
        
        action = ControlAction(
            action_id=f"{artifact_id}_{action_type.value}_{int(time.time())}",
            action_type=action_type,
            artifact_id=artifact_id,
            parameters=parameters
        )
        
        try:
            if action_type in self.action_handlers:
                result = self.action_handlers[action_type](artifact_id, parameters)
                action.success = result.get('success', True)
                action.error_message = result.get('error', '')
            else:
                logger.warning(f"Ïï°ÏÖò Ìï∏Îì§Îü¨Í∞Ä ÏóÜÏäµÎãàÎã§: {action_type}")
                action.success = False
                action.error_message = f"Unknown action: {action_type}"
            
        except Exception as e:
            action.success = False
            action.error_message = str(e)
            logger.error(f"Ïï°ÏÖò Ïã§Ìñâ Ïò§Î•ò - {action_type}: {e}")
        
        self.action_history.append(action)
        
        # ÌûàÏä§ÌÜ†Î¶¨ ÌÅ¨Í∏∞ Ï†úÌïú
        if len(self.action_history) > 1000:
            self.action_history = self.action_history[-500:]
    
    def _handle_download(self, artifact_id: str, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """Îã§Ïö¥Î°úÎìú Ìï∏Îì§Îü¨"""
        
        try:
            # Îã§Ïö¥Î°úÎìú Î°úÏßÅ Íµ¨ÌòÑ
            logger.info(f"üíæ Îã§Ïö¥Î°úÎìú Ïã§Ìñâ - {artifact_id}")
            return {'success': True}
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def _handle_copy(self, artifact_id: str, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """Î≥µÏÇ¨ Ìï∏Îì§Îü¨"""
        
        try:
            # Î≥µÏÇ¨ Î°úÏßÅ Íµ¨ÌòÑ
            logger.info(f"üìã Î≥µÏÇ¨ Ïã§Ìñâ - {artifact_id}")
            return {'success': True}
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def _handle_export(self, artifact_id: str, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ìï∏Îì§Îü¨"""
        
        try:
            # ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Î°úÏßÅ Íµ¨ÌòÑ
            logger.info(f"üì§ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ïã§Ìñâ - {artifact_id}")
            return {'success': True}
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def _handle_fullscreen(self, artifact_id: str, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """Ï†ÑÏ≤¥ÌôîÎ©¥ Ìï∏Îì§Îü¨"""
        
        try:
            # Ï†ÑÏ≤¥ÌôîÎ©¥ Î°úÏßÅ Íµ¨ÌòÑ
            logger.info(f"üîç Ï†ÑÏ≤¥ÌôîÎ©¥ Ïã§Ìñâ - {artifact_id}")
            return {'success': True}
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def _handle_reset_view(self, artifact_id: str, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """Î∑∞ Î¶¨ÏÖã Ìï∏Îì§Îü¨"""
        
        try:
            # Î∑∞ Î¶¨ÏÖã Î°úÏßÅ Íµ¨ÌòÑ
            logger.info(f"üîÑ Î∑∞ Î¶¨ÏÖã Ïã§Ìñâ - {artifact_id}")
            return {'success': True}
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def register_action_handler(self, action_type: ActionType, handler: Callable):
        """Ïï°ÏÖò Ìï∏Îì§Îü¨ Îì±Î°ù"""
        
        self.action_handlers[action_type] = handler
    
    def get_action_history(self, artifact_id: str = None, limit: int = 100) -> List[ControlAction]:
        """Ïï°ÏÖò ÌûàÏä§ÌÜ†Î¶¨ Ï°∞Ìöå"""
        
        history = self.action_history
        
        if artifact_id:
            history = [action for action in history if action.artifact_id == artifact_id]
        
        return history[-limit:]
    
    def export_user_preferences(self, user_id: str = None) -> Dict[str, Any]:
        """ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï ÎÇ¥Î≥¥ÎÇ¥Í∏∞"""
        
        user_id = user_id or self.current_user_id
        preferences = self.get_user_preferences(user_id)
        
        return {
            'user_id': preferences.user_id,
            'theme': preferences.theme,
            'default_chart_size': preferences.default_chart_size,
            'auto_download': preferences.auto_download,
            'show_tooltips': preferences.show_tooltips,
            'enable_shortcuts': preferences.enable_shortcuts,
            'max_table_rows': preferences.max_table_rows,
            'chart_animation': preferences.chart_animation,
            'show_data_labels': preferences.show_data_labels,
            'decimal_places': preferences.decimal_places,
            'custom_shortcuts': preferences.custom_shortcuts,
            'disabled_shortcuts': preferences.disabled_shortcuts,
            'default_image_format': preferences.default_image_format,
            'default_data_format': preferences.default_data_format,
            'include_metadata': preferences.include_metadata,
            'last_updated': preferences.last_updated.isoformat()
        }