{
  "scan_timestamp": "2025-07-13T21:18:30.513328",
  "summary": {
    "total_files_scanned": 127,
    "total_violations": 1640,
    "llm_first_compliance_score": 28.1,
    "files_with_violations": 105
  },
  "violations_by_type": {
    "rule_based_logic": 268,
    "template_response": 72,
    "conditional_hardcode": 238,
    "hardcoded_values": 950,
    "pattern_matching": 108,
    "dataset_dependency": 1,
    "fixed_workflow": 3
  },
  "violations_by_severity": {
    "high": 567,
    "medium": 1072,
    "critical": 1
  },
  "violations": [
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 275,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if \"status\" in result and \"message\" in result[\"status\"]'",
      "code_snippet": "if \"status\" in result and \"message\" in result[\"status\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if \"status\" in result and \"message\" in result[\"status\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if \"status\" in result and \"message\" in result[\"status\"]"
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 295,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if \"message\" in result and \"parts\" in result[\"message\"]'",
      "code_snippet": "if \"message\" in result and \"parts\" in result[\"message\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if \"message\" in result and \"parts\" in result[\"message\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if \"message\" in result and \"parts\" in result[\"message\"]"
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 338,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'ifact in result[\"artifacts\"]'",
      "code_snippet": "for artifact in result[\"artifacts\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'ifact in result[\"artifacts\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "ifact in result[\"artifacts\"]"
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 530,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if artifact_name in [\"execution_plan\", \"execution_plan.json\"]'",
      "code_snippet": "if artifact_name in [\"execution_plan\", \"execution_plan.json\"] or \"execution_plan\" in artifact_name:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if artifact_name in [\"execution_plan\", \"execution_plan.json\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if artifact_name in [\"execution_plan\", \"execution_plan.json\"]"
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 29,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif level == \"warning\":\n            log_msg = f\"'",
      "code_snippet": "elif level == \"warning\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif level == \"warning\":\n            log_msg = f\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif level == \"warning\":\n            log_msg = f\""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 31,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif level == \"success\":\n            log_msg = f\"'",
      "code_snippet": "elif level == \"success\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif level == \"success\":\n            log_msg = f\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif level == \"success\":\n            log_msg = f\""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 51,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif level == \"warning\":\n                safe_warning(f\"'",
      "code_snippet": "elif level == \"warning\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif level == \"warning\":\n                safe_warning(f\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif level == \"warning\":\n                safe_warning(f\""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 53,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif level == \"success\":\n                safe_success(f\"'",
      "code_snippet": "elif level == \"success\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif level == \"success\":\n                safe_success(f\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif level == \"success\":\n                safe_success(f\""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 630,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif plan_data.get(\"plan_type\") == \"ai_ds_team_orchestration\":\n                steps = plan_data.get(\"'",
      "code_snippet": "elif plan_data.get(\"plan_type\") == \"ai_ds_team_orchestration\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif plan_data.get(\"plan_type\") == \"ai_ds_team_orchestration\":\n                steps = plan_data.get(\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif plan_data.get(\"plan_type\") == \"ai_ds_team_orchestration\":\n                steps = plan_data.get(\""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 836,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif agent_name == \"🧹 Data Cleaning\":\n            return \"'",
      "code_snippet": "elif agent_name == \"🧹 Data Cleaning\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif agent_name == \"🧹 Data Cleaning\":\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif agent_name == \"🧹 Data Cleaning\":\n            return \""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 839,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif agent_name == \"🔍 EDA Tools\":\n            return \"'",
      "code_snippet": "elif agent_name == \"🔍 EDA Tools\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif agent_name == \"🔍 EDA Tools\":\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif agent_name == \"🔍 EDA Tools\":\n            return \""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 842,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif agent_name == \"📊 Data Visualization\":\n            return \"'",
      "code_snippet": "elif agent_name == \"📊 Data Visualization\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif agent_name == \"📊 Data Visualization\":\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif agent_name == \"📊 Data Visualization\":\n            return \""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 845,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif agent_name == \"🔧 Data Wrangling\":\n            return \"'",
      "code_snippet": "elif agent_name == \"🔧 Data Wrangling\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif agent_name == \"🔧 Data Wrangling\":\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif agent_name == \"🔧 Data Wrangling\":\n            return \""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 848,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif agent_name == \"⚙️ Feature Engineering\":\n            return \"'",
      "code_snippet": "elif agent_name == \"⚙️ Feature Engineering\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif agent_name == \"⚙️ Feature Engineering\":\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif agent_name == \"⚙️ Feature Engineering\":\n            return \""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 851,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif agent_name == \"🗄️ SQL Database\":\n            return \"'",
      "code_snippet": "elif agent_name == \"🗄️ SQL Database\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif agent_name == \"🗄️ SQL Database\":\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif agent_name == \"🗄️ SQL Database\":\n            return \""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 854,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif agent_name == \"🤖 H2O ML\":\n            return \"'",
      "code_snippet": "elif agent_name == \"🤖 H2O ML\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif agent_name == \"🤖 H2O ML\":\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif agent_name == \"🤖 H2O ML\":\n            return \""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 857,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif agent_name == \"📈 MLflow Tools\":\n            return \"'",
      "code_snippet": "elif agent_name == \"📈 MLflow Tools\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif agent_name == \"📈 MLflow Tools\":\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif agent_name == \"📈 MLflow Tools\":\n            return \""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 840,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'return \"기초 통계량, 분포 분석, 상관관계 매트릭스, 이상값 탐지 결과 및 데이터 패턴 인사이트\"'",
      "code_snippet": "return \"기초 통계량, 분포 분석, 상관관계 매트릭스, 이상값 탐지 결과 및 데이터 패턴 인사이트\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'return \"기초 통계량, 분포 분석, 상관관계 매트릭스, 이상값 탐지 결과 및 데이터 패턴 인사이트\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "return\\s+[f]?[\"\\'].*분석.*결과.*[\"\\']",
        "matched_text": "return \"기초 통계량, 분포 분석, 상관관계 매트릭스, 이상값 탐지 결과 및 데이터 패턴 인사이트\""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 849,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'return \"새로운 특성 변수, 특성 중요도 분석, 차원 축소 결과 및 특성 선택 추천사항\"'",
      "code_snippet": "return \"새로운 특성 변수, 특성 중요도 분석, 차원 축소 결과 및 특성 선택 추천사항\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'return \"새로운 특성 변수, 특성 중요도 분석, 차원 축소 결과 및 특성 선택 추천사항\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "return\\s+[f]?[\"\\'].*분석.*결과.*[\"\\']",
        "matched_text": "return \"새로운 특성 변수, 특성 중요도 분석, 차원 축소 결과 및 특성 선택 추천사항\""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 862,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'return \"전문 분석 결과 및 도메인별 인사이트\"'",
      "code_snippet": "return \"전문 분석 결과 및 도메인별 인사이트\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'return \"전문 분석 결과 및 도메인별 인사이트\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "return\\s+[f]?[\"\\'].*분석.*결과.*[\"\\']",
        "matched_text": "return \"전문 분석 결과 및 도메인별 인사이트\""
      }
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 27,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if level == \"error\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 29,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif level == \"warning\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 31,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif level == \"success\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 49,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if level == \"error\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 51,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif level == \"warning\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 53,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif level == \"success\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 83,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"data\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 103,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 107,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"message\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 168,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if agent_name == \"🧠 CherryAI v8 Universal Orchestrator\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 177,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if agent_name == \"🧠 CherryAI v8 Universal Orchestrator\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 179,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 184,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 220,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "data_reference = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 245,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 249,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"message\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 279,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.get(\"kind\") == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 287,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if msg.get(\"role\") == \"agent\" and \"parts\" in msg:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 289,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.get(\"kind\") == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 297,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.get(\"kind\") == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 326,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 349,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if artifact_metadata.get(\"content_type\") == \"application/vnd.plotly.v1+json\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 356,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 358,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"content\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 369,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 371,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"content\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 381,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 383,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"content\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 393,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 402,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 409,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 417,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 482,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if artifact_name == \"comprehensive_analysis\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 491,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part_kind == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 498,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "v8_step = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 505,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"parameters\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 535,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if metadata.get(\"plan_type\") == \"ai_ds_team_orchestration\" or metadata.get(\"content_type\") == \"application/json\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 539,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.get(\"kind\") == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 554,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.get(\"kind\") == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 565,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if entry.get(\"role\") == \"agent\" and \"message\" in entry:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 569,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.get(\"kind\") == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 581,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.get(\"kind\") == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 630,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif plan_data.get(\"plan_type\") == \"ai_ds_team_orchestration\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 657,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.get(\"kind\") == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 691,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if entry.get(\"role\") == \"agent\" and \"message\" in entry:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 695,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.get(\"kind\") == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 708,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.get(\"kind\") == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 798,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "standardized_step = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 833,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if agent_name == \"📁 Data Loader\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 836,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif agent_name == \"🧹 Data Cleaning\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 839,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif agent_name == \"🔍 EDA Tools\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 842,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif agent_name == \"📊 Data Visualization\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 845,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif agent_name == \"🔧 Data Wrangling\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 848,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif agent_name == \"⚙️ Feature Engineering\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 851,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif agent_name == \"🗄️ SQL Database\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 854,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif agent_name == \"🤖 H2O ML\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 857,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif agent_name == \"📈 MLflow Tools\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 866,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a/a2a_streamlit_client.py",
      "line_number": 428,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'parse_orchestration_plan'",
      "code_snippet": "def parse_orchestration_plan(self, orchestrator_response: Dict[str, Any]) -> List[Dict[str, Any]]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_parse_orchestration_plan, llm_parse_orchestration_plan)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "parse_orchestration_plan",
        "pattern": "parse_"
      }
    },
    {
      "file_path": "core/a2a_agent_tracer.py",
      "line_number": 52,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "input_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_agent_tracer.py",
      "line_number": 151,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "processed_result = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_agent_tracer.py",
      "line_number": 208,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "df_info[f\"df_{i}\"] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_agent_tracer.py",
      "line_number": 233,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "result_info = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_data_analysis_executor.py",
      "line_number": 16,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.agent_configs = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_data_analysis_executor.py",
      "line_number": 77,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"data\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_data_analysis_executor.py",
      "line_number": 97,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_data_analysis_executor.py",
      "line_number": 119,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_data_analysis_executor.py",
      "line_number": 123,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"message\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_data_analysis_executor.py",
      "line_number": 156,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_data_analysis_executor.py",
      "line_number": 164,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_data_analysis_executor.py",
      "line_number": 171,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_data_analysis_executor.py",
      "line_number": 180,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_data_analysis_executor.py",
      "line_number": 188,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_data_analysis_executor.py",
      "line_number": 196,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_data_analysis_executor.py",
      "line_number": 208,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"data\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_data_analysis_executor.py",
      "line_number": 215,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_agent_health'",
      "code_snippet": "async def check_agent_health(self, agent_url: str) -> bool:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_agent_health, llm_check_agent_health)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_agent_health",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 126,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif step_result[\"status\"] == \"skipped\":\n                    logger.info(f\"'",
      "code_snippet": "elif step_result[\"status\"] == \"skipped\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif step_result[\"status\"] == \"skipped\":\n                    logger.info(f\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif step_result[\"status\"] == \"skipped\":\n                    logger.info(f\""
      }
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 385,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif part_kind == \"data\":\n                    artifacts.append({\n                        \"'",
      "code_snippet": "elif part_kind == \"data\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif part_kind == \"data\":\n                    artifacts.append({\n                        \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif part_kind == \"data\":\n                    artifacts.append({\n                        \""
      }
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 396,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif part_kind == \"file\":\n                    artifacts.append({\n                        \"'",
      "code_snippet": "elif part_kind == \"file\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif part_kind == \"file\":\n                    artifacts.append({\n                        \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif part_kind == \"file\":\n                    artifacts.append({\n                        \""
      }
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 407,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif part_kind == \"chart\" or \"plot\" in part_kind.lower():\n                    artifacts.append({\n                        \"'",
      "code_snippet": "elif part_kind == \"chart\" or \"plot\" in part_kind.lower():",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif part_kind == \"chart\" or \"plot\" in part_kind.lower():\n                    artifacts.append({\n                        \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif part_kind == \"chart\" or \"plot\" in part_kind.lower():\n                    artifacts.append({\n                        \""
      }
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 92,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "results = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 117,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if step_result[\"status\"] == \"failed\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 126,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif step_result[\"status\"] == \"skipped\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 134,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if results[\"status\"] != \"failed\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 181,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 192,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 211,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "agent_port_map = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 271,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "request_payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 275,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"message\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 318,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 354,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "context_summary = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 374,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part_kind == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 375,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "artifacts.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 385,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif part_kind == \"data\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 386,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "artifacts.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 396,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif part_kind == \"file\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 397,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "artifacts.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 407,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif part_kind == \"chart\" or \"plot\" in part_kind.lower():",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 408,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "artifacts.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 412,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"metadata\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/a2a_task_executor.py",
      "line_number": 431,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "artifact[\"metadata\"].update({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 224,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(pattern in code for pattern in ['open(', 'file(', '.write(', '.read(']'",
      "code_snippet": "if any(pattern in code for pattern in ['open(', 'file(', '.write(', '.read(']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(pattern in code for pattern in ['open(', 'file(', '.write(', '.read(']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(pattern in code for pattern in ['open(', 'file(', '.write(', '.read(']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 229,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(pattern in code for pattern in ['urllib', 'requests', 'http', 'socket']'",
      "code_snippet": "if any(pattern in code for pattern in ['urllib', 'requests', 'http', 'socket']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(pattern in code for pattern in ['urllib', 'requests', 'http', 'socket']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(pattern in code for pattern in ['urllib', 'requests', 'http', 'socket']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 320,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in code_lower for keyword in ['plot', 'chart', 'graph', 'matplotlib', 'seaborn', 'plotly']'",
      "code_snippet": "if any(keyword in code_lower for keyword in ['plot', 'chart', 'graph', 'matplotlib', 'seaborn', 'plotly']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in code_lower for keyword in ['plot', 'chart', 'graph', 'matplotlib', 'seaborn', 'plotly']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in code_lower for keyword in ['plot', 'chart', 'graph', 'matplotlib', 'seaborn', 'plotly']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 324,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in code_lower for keyword in ['sklearn', 'tensorflow', 'keras', 'model', 'train', 'predict']'",
      "code_snippet": "if any(keyword in code_lower for keyword in ['sklearn', 'tensorflow', 'keras', 'model', 'train', 'predict']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in code_lower for keyword in ['sklearn', 'tensorflow', 'keras', 'model', 'train', 'predict']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in code_lower for keyword in ['sklearn', 'tensorflow', 'keras', 'model', 'train', 'predict']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 328,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in code_lower for keyword in ['pandas', 'dataframe', 'groupby', 'merge', 'join']'",
      "code_snippet": "if any(keyword in code_lower for keyword in ['pandas', 'dataframe', 'groupby', 'merge', 'join']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in code_lower for keyword in ['pandas', 'dataframe', 'groupby', 'merge', 'join']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in code_lower for keyword in ['pandas', 'dataframe', 'groupby', 'merge', 'join']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 332,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in code_lower for keyword in ['mean', 'std', 'corr', 'describe', 'statistical']'",
      "code_snippet": "if any(keyword in code_lower for keyword in ['mean', 'std', 'corr', 'describe', 'statistical']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in code_lower for keyword in ['mean', 'std', 'corr', 'describe', 'statistical']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in code_lower for keyword in ['mean', 'std', 'corr', 'describe', 'statistical']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 336,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in code_lower for keyword in ['sql', 'database', 'query', 'select', 'insert', 'update']'",
      "code_snippet": "if any(keyword in code_lower for keyword in ['sql', 'database', 'query', 'select', 'insert', 'update']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in code_lower for keyword in ['sql', 'database', 'query', 'select', 'insert', 'update']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in code_lower for keyword in ['sql', 'database', 'query', 'select', 'insert', 'update']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 340,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in code_lower for keyword in ['open', 'read', 'write', 'file', 'csv', 'json']'",
      "code_snippet": "if any(keyword in code_lower for keyword in ['open', 'read', 'write', 'file', 'csv', 'json']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in code_lower for keyword in ['open', 'read', 'write', 'file', 'csv', 'json']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in code_lower for keyword in ['open', 'read', 'write', 'file', 'csv', 'json']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 344,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in code_lower for keyword in ['requests', 'http', 'api', 'get', 'post']'",
      "code_snippet": "if any(keyword in code_lower for keyword in ['requests', 'http', 'api', 'get', 'post']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in code_lower for keyword in ['requests', 'http', 'api', 'get', 'post']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in code_lower for keyword in ['requests', 'http', 'api', 'get', 'post']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 348,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in code_lower for keyword in ['data', 'analysis', 'numpy', 'array']'",
      "code_snippet": "if any(keyword in code_lower for keyword in ['data', 'analysis', 'numpy', 'array']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in code_lower for keyword in ['data', 'analysis', 'numpy', 'array']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in code_lower for keyword in ['data', 'analysis', 'numpy', 'array']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 536,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if last_line and not any(last_line.startswith(kw) for kw in ['if', 'for', 'while', 'def', 'class', 'import', 'from']'",
      "code_snippet": "if last_line and not any(last_line.startswith(kw) for kw in ['if', 'for', 'while', 'def', 'class', 'import', 'from']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if last_line and not any(last_line.startswith(kw) for kw in ['if', 'for', 'while', 'def', 'class', 'import', 'from']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if last_line and not any(last_line.startswith(kw) for kw in ['if', 'for', 'while', 'def', 'class', 'import', 'from']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 898,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(pattern in code_lower for pattern in ['.append(', '.extend(']'",
      "code_snippet": "if any(pattern in code_lower for pattern in ['.append(', '.extend(']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(pattern in code_lower for pattern in ['.append(', '.extend(']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(pattern in code_lower for pattern in ['.append(', '.extend(']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 903,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(pattern in code_lower for pattern in ['numpy', 'pandas', 'vectorized']'",
      "code_snippet": "if any(pattern in code_lower for pattern in ['numpy', 'pandas', 'vectorized']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(pattern in code_lower for pattern in ['numpy', 'pandas', 'vectorized']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(pattern in code_lower for pattern in ['numpy', 'pandas', 'vectorized']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 906,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if 'list comprehension' in code_lower or '[' in code and 'for' in code and ']'",
      "code_snippet": "if 'list comprehension' in code_lower or '[' in code and 'for' in code and ']' in code:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if 'list comprehension' in code_lower or '[' in code and 'for' in code and ']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if 'list comprehension' in code_lower or '[' in code and 'for' in code and ']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 924,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if code_type not in self.statistics['code_types']'",
      "code_snippet": "if code_type not in self.statistics['code_types']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if code_type not in self.statistics['code_types']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if code_type not in self.statistics['code_types']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 936,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if agent_id not in self.statistics['agents']'",
      "code_snippet": "if agent_id not in self.statistics['agents']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if agent_id not in self.statistics['agents']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if agent_id not in self.statistics['agents']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 948,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if today not in self.statistics['daily_stats']'",
      "code_snippet": "if today not in self.statistics['daily_stats']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if today not in self.statistics['daily_stats']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if today not in self.statistics['daily_stats']"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 274,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('#''",
      "code_snippet": "comment_lines = [line for line in non_empty_lines if line.strip().startswith('#')]",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('#'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('#'"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 827,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('#''",
      "code_snippet": "lines_of_code = len([line for line in lines if line.strip() and not line.strip().startswith('#')])",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('#'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('#'"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 844,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('#''",
      "code_snippet": "comment_lines = [line for line in lines if line.strip().startswith('#')]",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('#'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('#'"
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 425,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"보안 위험 코드: {'; '.join(security_issues)}\"'",
      "code_snippet": "error_message=f\"보안 위험 코드: {'; '.join(security_issues)}\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"보안 위험 코드: {'; '.join(security_issues)}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"보안 위험 코드: {'; '.join(security_issues)}\""
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 493,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"실행 시간 초과 ({self.timeout}초)\"'",
      "code_snippet": "error_message=f\"실행 시간 초과 ({self.timeout}초)\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"실행 시간 초과 ({self.timeout}초)\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"실행 시간 초과 ({self.timeout}초)\""
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 772,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"코드 추적 실패\"'",
      "code_snippet": "error_message=\"코드 추적 실패\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"코드 추적 실패\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"코드 추적 실패\""
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 804,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"코드가 제공되지 않았습니다.\"'",
      "code_snippet": "error_message=\"코드가 제공되지 않았습니다.\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"코드가 제공되지 않았습니다.\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"코드가 제공되지 않았습니다.\""
      }
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 431,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'__builtins__': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 585,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.statistics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 654,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 697,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 723,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 925,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.statistics['code_types'][code_type] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 937,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.statistics['agents'][agent_id] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 949,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.statistics['daily_stats'][today] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 1029,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 1050,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "trends['complexity'] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 1057,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "trends['readability'] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 1064,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "trends['security'] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 1071,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "trends['performance'] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 1077,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 1202,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 1227,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 1250,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 1269,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/advanced_code_tracker.py",
      "line_number": 1339,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/agents/parsers.py",
      "line_number": 14,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'```python(.*?)```''",
      "code_snippet": "python_code_match = re.search(r'```python(.*?)```', text, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'```python(.*?)```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'```python(.*?)```'"
      }
    },
    {
      "file_path": "core/agents/parsers.py",
      "line_number": 19,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r\"python(.*?)'\"'",
      "code_snippet": "python_code_match = re.search(r\"python(.*?)'\", text, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r\"python(.*?)'\"' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r\"python(.*?)'\""
      }
    },
    {
      "file_path": "core/agents/parsers.py",
      "line_number": 36,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'```sql(.*?)```''",
      "code_snippet": "sql_code_match = re.search(r'```sql(.*?)```', text, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'```sql(.*?)```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'```sql(.*?)```'"
      }
    },
    {
      "file_path": "core/agents/parsers.py",
      "line_number": 37,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r\"SQLQuery:\\s*(.*)\"'",
      "code_snippet": "sql_code_match_2 = re.search(r\"SQLQuery:\\s*(.*)\", text)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r\"SQLQuery:\\s*(.*)\"' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r\"SQLQuery:\\s*(.*)\""
      }
    },
    {
      "file_path": "core/agents/parsers.py",
      "line_number": 45,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r\"sql(.*?)'\"'",
      "code_snippet": "sql_code_match = re.search(r\"sql(.*?)'\", text, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r\"sql(.*?)'\"' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r\"sql(.*?)'\""
      }
    },
    {
      "file_path": "core/agents/templates.py",
      "line_number": 459,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if user_input.strip().lower() == \"yes\"'",
      "code_snippet": "if user_input.strip().lower() == \"yes\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if user_input.strip().lower() == \"yes\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*\\.lower\\(\\).*==.*[\"\\'].*[\"\\']",
        "matched_text": "if user_input.strip().lower() == \"yes\""
      }
    },
    {
      "file_path": "core/agents/templates.py",
      "line_number": 456,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: '.format(steps=state.get(recommended_steps_key, '') + \"\\n\\n\" + code_markdown))'",
      "code_snippet": "user_input = interrupt(value=prompt_text.format(steps=state.get(recommended_steps_key, '') + \"\\n\\n\" + code_markdown))",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. '.format(steps=state.get(recommended_steps_key, '') + \"\\n\\n\" + code_markdown))' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.format\\(.*\\)",
        "matched_text": ".format(steps=state.get(recommended_steps_key, '') + \"\\n\\n\" + code_markdown))"
      }
    },
    {
      "file_path": "core/agents/templates.py",
      "line_number": 780,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: '.format(code=code_snippet)'",
      "code_snippet": "prompt = explanation_prompt_template.format(code=code_snippet)",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. '.format(code=code_snippet)' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.format\\(.*\\)",
        "matched_text": ".format(code=code_snippet)"
      }
    },
    {
      "file_path": "core/agents/templates.py",
      "line_number": 459,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if user_input.strip().lower() == \"yes\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/agents/templates.py",
      "line_number": 661,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "Generic function to fix a given piece of agent code using an LLM and a prompt template.",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/agents/templates.py",
      "line_number": 675,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "A string template for the prompt that will be sent to the LLM. It should contain",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/agents/templates.py",
      "line_number": 755,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "A prompt template that can be used to explain the code. It should contain a placeholder",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 42,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 43,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"orchestrator\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 50,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"data_cleaning\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 57,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"data_loader\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 64,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"data_visualization\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 71,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"data_wrangling\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 78,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"feature_engineering\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 85,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"sql_database\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 92,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"eda_tools\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 99,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"h2o_ml\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 106,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"mlflow_tools\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 113,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"python_repl\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 135,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 294,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "workflow_templates = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/agent_orchestrator.py",
      "line_number": 122,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_agent_health'",
      "code_snippet": "async def check_agent_health(self, agent_id: str) -> Dict[str, Any]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_agent_health, llm_check_agent_health)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_agent_health",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 113,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if 'sse_streams' in st.session_state and stream_id in st.session_state['sse_streams']'",
      "code_snippet": "if 'sse_streams' in st.session_state and stream_id in st.session_state['sse_streams']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if 'sse_streams' in st.session_state and stream_id in st.session_state['sse_streams']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if 'sse_streams' in st.session_state and stream_id in st.session_state['sse_streams']"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 130,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if 'sse_streams' in st.session_state and stream_id in st.session_state['sse_streams']'",
      "code_snippet": "if 'sse_streams' in st.session_state and stream_id in st.session_state['sse_streams']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if 'sse_streams' in st.session_state and stream_id in st.session_state['sse_streams']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if 'sse_streams' in st.session_state and stream_id in st.session_state['sse_streams']"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 278,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if stream_id not in st.session_state['streaming_content']'",
      "code_snippet": "if stream_id not in st.session_state['streaming_content']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if stream_id not in st.session_state['streaming_content']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if stream_id not in st.session_state['streaming_content']"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 861,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if 'followup_suggestions' in chat and chat['followup_suggestions']'",
      "code_snippet": "if 'followup_suggestions' in chat and chat['followup_suggestions']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if 'followup_suggestions' in chat and chat['followup_suggestions']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if 'followup_suggestions' in chat and chat['followup_suggestions']"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1858,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if len(df.select_dtypes(include=['number']'",
      "code_snippet": "- 기본 통계: {df.describe().to_dict() if len(df.select_dtypes(include=['number']).columns) > 0 else '수치 데이터 없음'}",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if len(df.select_dtypes(include=['number']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if len(df.select_dtypes(include=['number']"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1978,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if learning_record[\"success\"]'",
      "code_snippet": "if learning_record[\"success\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if learning_record[\"success\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if learning_record[\"success\"]"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 304,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif status == 'completed':\n                duration = stream_info.get(''",
      "code_snippet": "elif status == 'completed':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif status == 'completed':\n                duration = stream_info.get('' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif status == 'completed':\n                duration = stream_info.get('"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 806,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif artifact.get('type') == 'dataframe':\n                    try:\n                        st.dataframe(artifact[''",
      "code_snippet": "elif artifact.get('type') == 'dataframe':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif artifact.get('type') == 'dataframe':\n                    try:\n                        st.dataframe(artifact['' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif artifact.get('type') == 'dataframe':\n                    try:\n                        st.dataframe(artifact['"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 812,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif artifact.get('type') == 'image':\n                    try:\n                        st.image(artifact[''",
      "code_snippet": "elif artifact.get('type') == 'image':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif artifact.get('type') == 'image':\n                    try:\n                        st.image(artifact['' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif artifact.get('type') == 'image':\n                    try:\n                        st.image(artifact['"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 818,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif artifact.get('type') == 'code':\n                    try:\n                        st.code(artifact[''",
      "code_snippet": "elif artifact.get('type') == 'code':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif artifact.get('type') == 'code':\n                    try:\n                        st.code(artifact['' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif artifact.get('type') == 'code':\n                    try:\n                        st.code(artifact['"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 521,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'\\{.*\\}''",
      "code_snippet": "json_match = re.search(r'\\{.*\\}', result, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'\\{.*\\}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'\\{.*\\}'"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 583,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'\\{.*\\}''",
      "code_snippet": "json_match = re.search(r'\\{.*\\}', result, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'\\{.*\\}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'\\{.*\\}'"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 201,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith(\"data: \"'",
      "code_snippet": "if line.startswith(\"data: \"):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith(\"data: \"' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith(\"data: \""
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 237,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith(\"data: \"'",
      "code_snippet": "content = line[6:] if line.startswith(\"data: \") else line",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith(\"data: \"' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith(\"data: \""
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 246,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith(\"event: \"'",
      "code_snippet": "elif line.startswith(\"event: \"):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith(\"event: \"' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith(\"event: \""
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1457,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('#''",
      "code_snippet": "exec_code = '\\n'.join([line for line in code_lines if not line.strip().startswith('#')])",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('#'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('#'"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1537,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('.csv''",
      "code_snippet": "if uploaded_file.name.endswith('.csv'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('.csv'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('.csv'"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1541,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('.json''",
      "code_snippet": "elif uploaded_file.name.endswith('.json'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('.json'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('.json'"
      }
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 79,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.active_streams[stream_id] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 92,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "st.session_state['sse_streams'][stream_id] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 104,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "update = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 162,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 165,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"params\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 167,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"message\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 184,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "headers={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 214,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.get(\"type\") == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 218,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 228,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 239,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 248,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 257,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 265,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 302,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if status == 'streaming':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 304,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif status == 'completed':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 471,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "data_summary = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 604,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "stage_progress = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 625,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "agent_servers = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 658,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "type_icons = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 800,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if artifact.get('type') == 'plotly_chart':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 806,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif artifact.get('type') == 'dataframe':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 812,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif artifact.get('type') == 'image':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 818,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif artifact.get('type') == 'code':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 847,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "method_color = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 912,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "session_metadata = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 957,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "st.session_state['llm_streaming_updates'].append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 969,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "session_tracer.record_agent_result(\"LLM_Dynamic_Strategist\", {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1024,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "context_data={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1037,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "session_tracer.record_agent_result(agent_id, {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1048,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "session_tracer.record_agent_result(agent_id, {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1072,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "session_tracer.end_user_session({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1084,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1099,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "session_tracer.end_user_session({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1107,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1120,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "basic_info = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1228,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1235,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1256,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "available_agents[f\"agent_{port}\"] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1276,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "st.session_state['llm_streaming_updates'].append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1352,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1445,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "safe_globals = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1465,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "artifacts.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1585,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "new_chat = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1616,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "sample_data = pd.DataFrame({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1630,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "sample_data = pd.DataFrame({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1644,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "sample_data = pd.DataFrame({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1693,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "basic_info = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1730,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "characteristics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1739,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1874,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1881,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1931,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "safe_globals = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1948,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "visualizations.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 1967,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "learning_record = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 2002,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 2011,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/data_workspace.py",
      "line_number": 98,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'handle_sse_chunk'",
      "code_snippet": "async def handle_sse_chunk(self, stream_id: str, chunk: str):",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_handle_sse_chunk, llm_handle_sse_chunk)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "handle_sse_chunk",
        "pattern": "handle_"
      }
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 171,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if file_extension in ['xlsx', 'xls']'",
      "code_snippet": "elif file_extension in ['xlsx', 'xls']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if file_extension in ['xlsx', 'xls']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if file_extension in ['xlsx', 'xls']"
      }
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 173,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif file_extension == 'json':\n                df, raw_data = self._process_json_file(file)\n            else:\n                raise ValueError(f\"'",
      "code_snippet": "elif file_extension == 'json':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif file_extension == 'json':\n                df, raw_data = self._process_json_file(file)\n            else:\n                raise ValueError(f\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif file_extension == 'json':\n                df, raw_data = self._process_json_file(file)\n            else:\n                raise ValueError(f\""
      }
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 26,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "SUPPORTED_FILE_TYPES = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 65,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.config = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 75,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.stats = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 169,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if file_extension == 'csv':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 173,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif file_extension == 'json':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 223,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "raw_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 247,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "raw_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 278,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "raw_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 302,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "basic_stats = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 311,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 314,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 333,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'metadata': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 352,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "file_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 387,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if metadata.processing_status == \"error\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 420,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 82,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'validate_uploaded_files'",
      "code_snippet": "def validate_uploaded_files(self, uploaded_files: List[Any]) -> List[Tuple[bool, str, Any]]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_validate_uploaded_files, llm_validate_uploaded_files)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "validate_uploaded_files",
        "pattern": "validate_"
      }
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 119,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'process_uploaded_files'",
      "code_snippet": "def process_uploaded_files(self, uploaded_files: List[Any]) -> List[ProcessedFile]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_process_uploaded_files, llm_process_uploaded_files)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "process_uploaded_files",
        "pattern": "process_"
      }
    },
    {
      "file_path": "core/app_components/file_upload_processor.py",
      "line_number": 440,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'process_and_prepare_files_for_a2a'",
      "code_snippet": "def process_and_prepare_files_for_a2a(uploaded_files: List[Any]) -> Optional[Dict[str, Any]]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_process_and_prepare_files_for_a2a, llm_process_and_prepare_files_for_a2a)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "process_and_prepare_files_for_a2a",
        "pattern": "process_"
      }
    },
    {
      "file_path": "core/app_components/main_app_controller.py",
      "line_number": 152,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if agent.agent_type.value in [\"mcp_sse\", \"mcp_stdio\"]]'",
      "code_snippet": "if agent.agent_type.value in [\"mcp_sse\", \"mcp_stdio\"]]",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if agent.agent_type.value in [\"mcp_sse\", \"mcp_stdio\"]]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if agent.agent_type.value in [\"mcp_sse\", \"mcp_stdio\"]]"
      }
    },
    {
      "file_path": "core/app_components/main_app_controller.py",
      "line_number": 105,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message = f\"Broker init failed: {str(e)}\"'",
      "code_snippet": "self.system_health.error_message = f\"Broker init failed: {str(e)}\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message = f\"Broker init failed: {str(e)}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message = f\"Broker init failed: {str(e)}\""
      }
    },
    {
      "file_path": "core/app_components/main_app_controller.py",
      "line_number": 122,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message = f\"Orchestrator init failed: {str(e)}\"'",
      "code_snippet": "self.system_health.error_message = f\"Orchestrator init failed: {str(e)}\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message = f\"Orchestrator init failed: {str(e)}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message = f\"Orchestrator init failed: {str(e)}\""
      }
    },
    {
      "file_path": "core/app_components/main_app_controller.py",
      "line_number": 135,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message = f\"Critical init error: {str(e)}\"'",
      "code_snippet": "self.system_health.error_message = f\"Critical init error: {str(e)}\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message = f\"Critical init error: {str(e)}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message = f\"Critical init error: {str(e)}\""
      }
    },
    {
      "file_path": "core/app_components/main_app_controller.py",
      "line_number": 73,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.config = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/main_app_controller.py",
      "line_number": 83,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.stats = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/main_app_controller.py",
      "line_number": 205,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "message = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/main_app_controller.py",
      "line_number": 226,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/main_app_controller.py",
      "line_number": 138,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_system_health'",
      "code_snippet": "async def check_system_health(self) -> SystemHealth:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_system_health, llm_check_system_health)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_system_health",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/app_components/main_app_controller.py",
      "line_number": 241,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'handle_error'",
      "code_snippet": "def handle_error(self, error: Exception, context: str = \"\") -> str:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_handle_error, llm_handle_error)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "handle_error",
        "pattern": "handle_"
      }
    },
    {
      "file_path": "core/app_components/main_dashboard.py",
      "line_number": 143,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if status[\"status\"] == \"online\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/app_components/main_dashboard.py",
      "line_number": 241,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:32\", \"type\": \"system\", \"message\": \"A2A 에이전트 시스템 시작\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/main_dashboard.py",
      "line_number": 242,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:31\", \"type\": \"agent\", \"message\": \"Data Cleaning 에이전트 준비 완료\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/main_dashboard.py",
      "line_number": 243,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:31\", \"type\": \"agent\", \"message\": \"Data Loader 에이전트 준비 완료\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/main_dashboard.py",
      "line_number": 244,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:30\", \"type\": \"mcp\", \"message\": \"MCP 도구 통합 완료\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/main_dashboard.py",
      "line_number": 245,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:30\", \"type\": \"system\", \"message\": \"Context Engineering 시스템 초기화\"}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/main_dashboard.py",
      "line_number": 249,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "icon = {\"system\": \"🔧\", \"agent\": \"🧬\", \"mcp\": \"🛠️\"}.get(activity[\"type\"], \"📝\")",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/main_dashboard.py",
      "line_number": 20,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_agent_status'",
      "code_snippet": "def check_agent_status(port: int) -> Dict[str, Any]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_agent_status, llm_check_agent_status)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_agent_status",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 13,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 14,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"playwright\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 23,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"file_manager\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 32,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"database\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 41,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"http_client\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 50,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"code_executor\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 59,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"data_processor\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 68,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"ai_assistant\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 155,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "test_scenarios = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 156,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"playwright\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 161,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"file_manager\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 166,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"database\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 235,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "integration_stats = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 259,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:32:45\", \"tool\": \"🌐 Playwright\", \"action\": \"스크린샷 캡처\", \"status\": \"✅\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 260,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:32:30\", \"tool\": \"📁 File Manager\", \"action\": \"파일 목록 조회\", \"status\": \"✅\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 261,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:32:15\", \"tool\": \"🗄️ Database\", \"action\": \"SQL 쿼리 실행\", \"status\": \"✅\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 262,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:32:00\", \"tool\": \"🌍 HTTP Client\", \"action\": \"API 호출\", \"status\": \"✅\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 263,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:31:45\", \"tool\": \"⚙️ Code Executor\", \"action\": \"Python 코드 실행\", \"status\": \"✅\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 264,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:31:30\", \"tool\": \"🔄 Data Processor\", \"action\": \"데이터 변환\", \"status\": \"✅\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/mcp_integration.py",
      "line_number": 265,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:31:15\", \"tool\": \"🤖 AI Assistant\", \"action\": \"LLM 호출\", \"status\": \"✅\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/monitoring_panel.py",
      "line_number": 19,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/monitoring_panel.py",
      "line_number": 148,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "performance_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/monitoring_panel.py",
      "line_number": 192,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "column_config={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/monitoring_panel.py",
      "line_number": 212,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "mcp_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/monitoring_panel.py",
      "line_number": 271,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "network_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/monitoring_panel.py",
      "line_number": 315,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:32\", \"level\": \"INFO\", \"message\": \"A2A 에이전트 시스템 정상 가동 중\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/monitoring_panel.py",
      "line_number": 316,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:30\", \"level\": \"SUCCESS\", \"message\": \"모든 MCP 도구 연결 성공\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/monitoring_panel.py",
      "line_number": 317,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:28\", \"level\": \"WARNING\", \"message\": \"Data_Loader 에이전트 응답 시간 증가\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/monitoring_panel.py",
      "line_number": 318,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:25\", \"level\": \"INFO\", \"message\": \"새로운 데이터 분석 요청 처리 완료\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/monitoring_panel.py",
      "line_number": 319,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"time\": \"09:23\", \"level\": \"SUCCESS\", \"message\": \"시스템 성능 최적화 완료\"}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/monitoring_panel.py",
      "line_number": 323,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "level_colors = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/monitoring_panel.py",
      "line_number": 330,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "level_icons = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/realtime_streaming_handler.py",
      "line_number": 117,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if ui_container and self.config['enable_progress_updates']'",
      "code_snippet": "if ui_container and self.config['enable_progress_updates']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if ui_container and self.config['enable_progress_updates']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if ui_container and self.config['enable_progress_updates']"
      }
    },
    {
      "file_path": "core/app_components/realtime_streaming_handler.py",
      "line_number": 214,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if event_type in ['a2a_response', 'mcp_sse_response', 'mcp_stdio_response']'",
      "code_snippet": "if event_type in ['a2a_response', 'mcp_sse_response', 'mcp_stdio_response']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if event_type in ['a2a_response', 'mcp_sse_response', 'mcp_stdio_response']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if event_type in ['a2a_response', 'mcp_sse_response', 'mcp_stdio_response']"
      }
    },
    {
      "file_path": "core/app_components/realtime_streaming_handler.py",
      "line_number": 236,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if event_type in ['status_update', 'routing']'",
      "code_snippet": "elif event_type in ['status_update', 'routing']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if event_type in ['status_update', 'routing']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if event_type in ['status_update', 'routing']"
      }
    },
    {
      "file_path": "core/app_components/realtime_streaming_handler.py",
      "line_number": 248,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif event_type == 'error':\n                error_msg = data.get(''",
      "code_snippet": "elif event_type == 'error':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif event_type == 'error':\n                error_msg = data.get('' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif event_type == 'error':\n                error_msg = data.get('"
      }
    },
    {
      "file_path": "core/app_components/realtime_streaming_handler.py",
      "line_number": 122,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'response = \"\"'",
      "code_snippet": "accumulated_response = \"\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'response = \"\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "response\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "response = \"\""
      }
    },
    {
      "file_path": "core/app_components/realtime_streaming_handler.py",
      "line_number": 67,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.config = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/realtime_streaming_handler.py",
      "line_number": 77,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.stats = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/realtime_streaming_handler.py",
      "line_number": 248,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif event_type == 'error':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/app_components/realtime_streaming_handler.py",
      "line_number": 342,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/realtime_streaming_handler.py",
      "line_number": 101,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'process_stream_async'",
      "code_snippet": "async def process_stream_async(",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_process_stream_async, llm_process_stream_async)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "process_stream_async",
        "pattern": "process_"
      }
    },
    {
      "file_path": "core/app_components/realtime_streaming_handler.py",
      "line_number": 362,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'process_query_with_streaming'",
      "code_snippet": "def process_query_with_streaming(",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_process_query_with_streaming, llm_process_query_with_streaming)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "process_query_with_streaming",
        "pattern": "process_"
      }
    },
    {
      "file_path": "core/app_components/system_status_monitor.py",
      "line_number": 499,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif alert['level'] == 'warning':\n                    st.warning(f\"'",
      "code_snippet": "elif alert['level'] == 'warning':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif alert['level'] == 'warning':\n                    st.warning(f\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif alert['level'] == 'warning':\n                    st.warning(f\""
      }
    },
    {
      "file_path": "core/app_components/system_status_monitor.py",
      "line_number": 95,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.config = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/system_status_monitor.py",
      "line_number": 374,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "alerts.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/system_status_monitor.py",
      "line_number": 384,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "alerts.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/system_status_monitor.py",
      "line_number": 395,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "alerts.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/system_status_monitor.py",
      "line_number": 456,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "a2a_data.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/system_status_monitor.py",
      "line_number": 482,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "mcp_data.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/system_status_monitor.py",
      "line_number": 497,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if alert['level'] == 'error':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/app_components/system_status_monitor.py",
      "line_number": 499,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif alert['level'] == 'warning':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/app_components/system_status_monitor.py",
      "line_number": 506,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/app_components/system_status_monitor.py",
      "line_number": 183,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_service_health'",
      "code_snippet": "async def check_service_health(self, service_id: str) -> ServiceInfo:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_service_health, llm_check_service_health)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_service_health",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/app_components/system_status_monitor.py",
      "line_number": 312,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_all_services'",
      "code_snippet": "async def check_all_services(self) -> SystemOverview:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_all_services, llm_check_all_services)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_all_services",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/artifact_system.py",
      "line_number": 147,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if tags and not any(tag in metadata[\"tags\"]'",
      "code_snippet": "if tags and not any(tag in metadata[\"tags\"] for tag in tags):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if tags and not any(tag in metadata[\"tags\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if tags and not any(tag in metadata[\"tags\"]"
      }
    },
    {
      "file_path": "core/artifact_system.py",
      "line_number": 28,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.type_dirs = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/artifact_system.py",
      "line_number": 52,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "artifact_metadata = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/artifact_system.py",
      "line_number": 224,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if metadata[\"type\"] != \"python\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/artifact_system.py",
      "line_number": 245,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "exec_namespace = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/artifact_system.py",
      "line_number": 284,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "result = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/artifact_system.py",
      "line_number": 295,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "result = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/artifact_system.py",
      "line_number": 308,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/artifact_system.py",
      "line_number": 354,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "extensions = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 934,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if format.lower() == 'json''",
      "code_snippet": "if format.lower() == 'json':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if format.lower() == 'json'' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*\\.lower\\(\\).*==.*[\"\\'].*[\"\\']",
        "matched_text": "if format.lower() == 'json'"
      }
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 937,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if format.lower() == 'html''",
      "code_snippet": "elif format.lower() == 'html':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if format.lower() == 'html'' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*\\.lower\\(\\).*==.*[\"\\'].*[\"\\']",
        "matched_text": "if format.lower() == 'html'"
      }
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 940,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if format.lower() == 'markdown''",
      "code_snippet": "elif format.lower() == 'markdown':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if format.lower() == 'markdown'' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*\\.lower\\(\\).*==.*[\"\\'].*[\"\\']",
        "matched_text": "if format.lower() == 'markdown'"
      }
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 862,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if quality_info['overall_quality'] in [DataQuality.POOR, DataQuality.CRITICAL]'",
      "code_snippet": "if quality_info['overall_quality'] in [DataQuality.POOR, DataQuality.CRITICAL]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if quality_info['overall_quality'] in [DataQuality.POOR, DataQuality.CRITICAL]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if quality_info['overall_quality'] in [DataQuality.POOR, DataQuality.CRITICAL]"
      }
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 937,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif format.lower() == 'html':\n                return self._generate_html_report(profile)\n            \n            elif format.lower() == ''",
      "code_snippet": "elif format.lower() == 'html':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif format.lower() == 'html':\n                return self._generate_html_report(profile)\n            \n            elif format.lower() == '' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif format.lower() == 'html':\n                return self._generate_html_report(profile)\n            \n            elif format.lower() == '"
      }
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 316,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('.csv''",
      "code_snippet": "if data.endswith('.csv'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('.csv'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('.csv'"
      }
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 320,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('.json''",
      "code_snippet": "elif data.endswith('.json'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('.json'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('.json'"
      }
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 322,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('.parquet''",
      "code_snippet": "elif data.endswith('.parquet'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('.parquet'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('.parquet'"
      }
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 283,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 353,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 461,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if series.dtype == 'bool' or set(series.dropna().unique()) <= {True, False, 0, 1, 'True', 'False', 'true', 'false'}:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 477,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if series.dtype == 'object':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 488,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if series.dtype == 'object' or series.dtype.name == 'category':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 654,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 666,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if df[col].dtype == 'object':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 752,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "high_correlations.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 758,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 934,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if format.lower() == 'json':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 937,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif format.lower() == 'html':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 940,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif format.lower() == 'markdown':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 1075,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 1096,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "sample_data = pd.DataFrame({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/auto_data_profiler.py",
      "line_number": 1148,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/callbacks/artifact_stream.py",
      "line_number": 83,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if node == \"final_responder\" or node == \"Final_Responder\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/callbacks/artifact_stream.py",
      "line_number": 92,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_lineage.py",
      "line_number": 135,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if current_metadata[\"dtypes\"].get(col) != self.original_metadata[\"dtypes\"]'",
      "code_snippet": "if current_metadata[\"dtypes\"].get(col) != self.original_metadata[\"dtypes\"].get(col):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if current_metadata[\"dtypes\"].get(col) != self.original_metadata[\"dtypes\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if current_metadata[\"dtypes\"].get(col) != self.original_metadata[\"dtypes\"]"
      }
    },
    {
      "file_path": "core/data_lineage.py",
      "line_number": 24,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "hash_dict = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_lineage.py",
      "line_number": 38,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_lineage.py",
      "line_number": 52,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.transformations = [{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_lineage.py",
      "line_number": 75,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "transformation = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_lineage.py",
      "line_number": 91,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "changes = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_lineage.py",
      "line_number": 102,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "validation_result = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_lineage.py",
      "line_number": 170,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "suspicious_patterns.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_lineage.py",
      "line_number": 182,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "suspicious_patterns.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_lineage.py",
      "line_number": 194,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "suspicious_patterns.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_lineage.py",
      "line_number": 208,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_lineage.py",
      "line_number": 209,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"original_data\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_lineage.py",
      "line_number": 216,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"final_data\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_lineage.py",
      "line_number": 100,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'validate_data_consistency'",
      "code_snippet": "def validate_data_consistency(self, current_data: pd.DataFrame) -> Tuple[bool, Dict]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_validate_data_consistency, llm_validate_data_consistency)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "validate_data_consistency",
        "pattern": "validate_"
      }
    },
    {
      "file_path": "core/data_manager.py",
      "line_number": 324,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('.xlsx') or data_id.endswith('.xls''",
      "code_snippet": "if data_id.endswith('.xlsx') or data_id.endswith('.xls'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('.xlsx') or data_id.endswith('.xls'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('.xlsx') or data_id.endswith('.xls'"
      }
    },
    {
      "file_path": "core/data_manager.py",
      "line_number": 327,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('.csv''",
      "code_snippet": "elif data_id.endswith('.csv'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('.csv'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('.csv'"
      }
    },
    {
      "file_path": "core/data_manager.py",
      "line_number": 72,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "shared_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_manager.py",
      "line_number": 98,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "entry = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_manager.py",
      "line_number": 134,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "new_entry = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_manager.py",
      "line_number": 192,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "summary = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_manager.py",
      "line_number": 237,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/data_manager.py",
      "line_number": 360,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if item.is_dir() and item.name != \"default\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/data_manager.py",
      "line_number": 367,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if session_dir.exists() and session_dir.name != \"default\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/data_manager.py",
      "line_number": 390,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_data_status'",
      "code_snippet": "def check_data_status() -> Dict[str, Any]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_data_status, llm_check_data_status)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_data_status",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/debug_manager.py",
      "line_number": 30,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "debug_entry = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/debug_manager.py",
      "line_number": 55,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metric_entry = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/debug_manager.py",
      "line_number": 76,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "error_entry = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/debug_manager.py",
      "line_number": 107,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/debug_manager.py",
      "line_number": 113,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {\"function\": \"unknown\", \"filename\": \"unknown\", \"line\": 0}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/debug_manager.py",
      "line_number": 115,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {\"function\": \"unknown\", \"filename\": \"unknown\", \"line\": 0}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/debug_manager.py",
      "line_number": 121,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/debug_manager.py",
      "line_number": 184,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/direct_analysis.py",
      "line_number": 242,
      "violation_type": "dataset_dependency",
      "severity": "critical",
      "description": "데이터셋 특화 하드코딩: 'pclass'",
      "code_snippet": "for pclass, rate in class_survival.items():",
      "suggested_fix": "범용적 분석 로직으로 대체. 특정 데이터셋('pclass')에 의존하지 않는 LLM 기반 분석 구현",
      "llm_first_impact": 0.9,
      "confidence": 0.8,
      "context": {
        "pattern": "pclass|Pclass",
        "matched_text": "pclass"
      }
    },
    {
      "file_path": "core/direct_analysis.py",
      "line_number": 32,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/direct_analysis.py",
      "line_number": 53,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/direct_analysis.py",
      "line_number": 62,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/direct_analysis.py",
      "line_number": 72,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_communicator.py",
      "line_number": 339,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if \"result\" in data and \"message\" in data[\"result\"]'",
      "code_snippet": "if \"result\" in data and \"message\" in data[\"result\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if \"result\" in data and \"message\" in data[\"result\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if \"result\" in data and \"message\" in data[\"result\"]"
      }
    },
    {
      "file_path": "core/enhanced_a2a_communicator.py",
      "line_number": 335,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith(\"data: \"'",
      "code_snippet": "if chunk.startswith(\"data: \"):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith(\"data: \"' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith(\"data: \""
      }
    },
    {
      "file_path": "core/enhanced_a2a_communicator.py",
      "line_number": 204,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "operation_metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_communicator.py",
      "line_number": 226,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_communicator.py",
      "line_number": 272,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "attributes={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_communicator.py",
      "line_number": 298,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_communicator.py",
      "line_number": 303,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"message\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_communicator.py",
      "line_number": 361,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_communicator.py",
      "line_number": 379,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_communicator.py",
      "line_number": 384,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"message\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_communicator.py",
      "line_number": 412,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_communicator.py",
      "line_number": 432,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.get(\"type\") == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_communicator.py",
      "line_number": 465,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_executor.py",
      "line_number": 349,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'response=\"[AI_DS_Agent processing...]\"'",
      "code_snippet": "response=\"[AI_DS_Agent processing...]\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'response=\"[AI_DS_Agent processing...]\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "response\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "response=\"[AI_DS_Agent processing...]\""
      }
    },
    {
      "file_path": "core/enhanced_a2a_executor.py",
      "line_number": 80,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_executor.py",
      "line_number": 119,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_executor.py",
      "line_number": 184,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_executor.py",
      "line_number": 226,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_executor.py",
      "line_number": 306,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "analysis = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_executor.py",
      "line_number": 317,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "data_context = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_a2a_executor.py",
      "line_number": 207,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'format_response_for_a2a'",
      "code_snippet": "def format_response_for_a2a(self, response_content: str) -> List[TextPart]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_format_response_for_a2a, llm_format_response_for_a2a)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "format_response_for_a2a",
        "pattern": "format_"
      }
    },
    {
      "file_path": "core/enhanced_langfuse_tracer.py",
      "line_number": 143,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"Agent execution failed: {str(e)}\"'",
      "code_snippet": "status_message=f\"Agent execution failed: {str(e)}\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"Agent execution failed: {str(e)}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"Agent execution failed: {str(e)}\""
      }
    },
    {
      "file_path": "core/enhanced_langfuse_tracer.py",
      "line_number": 197,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"Step failed: {str(e)}\"'",
      "code_snippet": "status_message=f\"Step failed: {str(e)}\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"Step failed: {str(e)}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"Step failed: {str(e)}\""
      }
    },
    {
      "file_path": "core/enhanced_langfuse_tracer.py",
      "line_number": 88,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_langfuse_tracer.py",
      "line_number": 119,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_langfuse_tracer.py",
      "line_number": 131,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.agent_contexts[agent_name] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_langfuse_tracer.py",
      "line_number": 181,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_langfuse_tracer.py",
      "line_number": 223,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_langfuse_tracer.py",
      "line_number": 251,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_langfuse_tracer.py",
      "line_number": 280,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_langfuse_tracer.py",
      "line_number": 305,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_langfuse_tracer.py",
      "line_number": 341,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 493,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if entry.level in ['ERROR', 'CRITICAL', 'FATAL']]'",
      "code_snippet": "error_entries = [entry for entry in recent_entries if entry.level in ['ERROR', 'CRITICAL', 'FATAL']]",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if entry.level in ['ERROR', 'CRITICAL', 'FATAL']]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if entry.level in ['ERROR', 'CRITICAL', 'FATAL']]"
      }
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 238,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'pattern_id=pattern_config[\"pattern_id\"'",
      "code_snippet": "pattern_id=pattern_config[\"pattern_id\"],",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'pattern_id=pattern_config[\"pattern_id\"' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "pattern.*=.*[\"\\'].*[\"\\']",
        "matched_text": "pattern_id=pattern_config[\"pattern_id\""
      }
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 104,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('.log''",
      "code_snippet": "if not event.is_directory and event.src_path.endswith('.log'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('.log'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('.log'"
      }
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 133,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.performance_metrics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 154,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 164,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 174,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 184,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 194,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 204,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 214,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 224,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 497,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "anomalies.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 507,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "anomalies.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 521,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "anomalies.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 647,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_log_analyzer.py",
      "line_number": 668,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 96,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if i.interaction_type in [\"response\", \"collaboration\"]'",
      "code_snippet": "successful_interactions = sum(1 for i in interactions if i.interaction_type in [\"response\", \"collaboration\"])",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if i.interaction_type in [\"response\", \"collaboration\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if i.interaction_type in [\"response\", \"collaboration\"]"
      }
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 102,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if interactions[i].interaction_type == \"request\" and interactions[i+1]'",
      "code_snippet": "if interactions[i].interaction_type == \"request\" and interactions[i+1].interaction_type == \"response\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if interactions[i].interaction_type == \"request\" and interactions[i+1]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if interactions[i].interaction_type == \"request\" and interactions[i+1]"
      }
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 412,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif format == \"langfuse\":\n            return self._export_to_langfuse_format(analysis)\n        else:\n            raise ValueError(f\"'",
      "code_snippet": "elif format == \"langfuse\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif format == \"langfuse\":\n            return self._export_to_langfuse_format(analysis)\n        else:\n            raise ValueError(f\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif format == \"langfuse\":\n            return self._export_to_langfuse_format(analysis)\n        else:\n            raise ValueError(f\""
      }
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 93,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {\"css\": 0.0, \"cooperation_quality\": 0.0, \"communication_efficiency\": 0.0, \"task_distribution\": 0.0}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 102,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if interactions[i].interaction_type == \"request\" and interactions[i+1].interaction_type == \"response\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 119,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 138,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {\"tue\": 0.0, \"success_rate\": 0.0, \"avg_response_time\": 0.0, \"resource_efficiency\": 0.0}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 153,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 183,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 299,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "tool_usage.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 315,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "agent_performance = defaultdict(lambda: {\"spans\": 0, \"errors\": 0, \"duration\": 0})",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 324,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 326,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"summary\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 332,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"transparency_metrics\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 390,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 397,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"data_summary\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 410,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if format == \"json\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 412,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif format == \"langfuse\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 420,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "langfuse_format = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 434,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "langfuse_format[\"spans\"].append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/enhanced_tracing_system.py",
      "line_number": 512,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/error_recovery.py",
      "line_number": 98,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.agent_alternatives: Dict[str, List[str]] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/error_recovery.py",
      "line_number": 105,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.recovery_strategies = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/error_recovery.py",
      "line_number": 141,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/execution/timeout_manager.py",
      "line_number": 22,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "agent_multipliers: Dict[str, float] = Field(default_factory=lambda: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/execution/timeout_manager.py",
      "line_number": 110,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/execution/timeout_manager.py",
      "line_number": 163,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "complexity_mapping = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 568,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif operator == \"lt\":\n            return value < threshold\n        elif operator == \"'",
      "code_snippet": "elif operator == \"lt\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif operator == \"lt\":\n            return value < threshold\n        elif operator == \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif operator == \"lt\":\n            return value < threshold\n        elif operator == \""
      }
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 572,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif operator == \"ne\":\n            return value != threshold\n        elif operator == \"'",
      "code_snippet": "elif operator == \"ne\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif operator == \"ne\":\n            return value != threshold\n        elif operator == \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif operator == \"ne\":\n            return value != threshold\n        elif operator == \""
      }
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 576,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif operator == \"le\":\n            return value <= threshold\n        else:\n            return False\n    \n    def _create_alert(self, rule: AlertRule, metric_value: float, metrics: Dict[str, Any]) -> Alert:\n        \"'",
      "code_snippet": "elif operator == \"le\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif operator == \"le\":\n            return value <= threshold\n        else:\n            return False\n    \n    def _create_alert(self, rule: AlertRule, metric_value: float, metrics: Dict[str, Any]) -> Alert:\n        \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif operator == \"le\":\n            return value <= threshold\n        else:\n            return False\n    \n    def _create_alert(self, rule: AlertRule, metric_value: float, metrics: Dict[str, Any]) -> Alert:\n        \""
      }
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 700,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif action == \"optimize_cpu\" and MONITORING_AVAILABLE:\n            try:\n                result = self.performance_optimizer.optimize_cpu_usage()\n                return result.success\n            except Exception:\n                return False\n        \n        elif action == \"'",
      "code_snippet": "elif action == \"optimize_cpu\" and MONITORING_AVAILABLE:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif action == \"optimize_cpu\" and MONITORING_AVAILABLE:\n            try:\n                result = self.performance_optimizer.optimize_cpu_usage()\n                return result.success\n            except Exception:\n                return False\n        \n        elif action == \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif action == \"optimize_cpu\" and MONITORING_AVAILABLE:\n            try:\n                result = self.performance_optimizer.optimize_cpu_usage()\n                return result.success\n            except Exception:\n                return False\n        \n        elif action == \""
      }
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 589,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"{rule.condition}이(가) {metric_value:.2f}로 임계값 {rule.threshold:.2f}을(를) 초과했습니다.\"'",
      "code_snippet": "message=f\"{rule.condition}이(가) {metric_value:.2f}로 임계값 {rule.threshold:.2f}을(를) 초과했습니다.\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"{rule.condition}이(가) {metric_value:.2f}로 임계값 {rule.threshold:.2f}을(를) 초과했습니다.\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"{rule.condition}이(가) {metric_value:.2f}로 임계값 {rule.threshold:.2f}을(를) 초과했습니다.\""
      }
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 656,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"알림이 {rule.escalation_minutes}분간 해결되지 않아 에스컬레이션됩니다.\\n\\n원본 알림: {alert.message}\"'",
      "code_snippet": "message=f\"알림이 {rule.escalation_minutes}분간 해결되지 않아 에스컬레이션됩니다.\\n\\n원본 알림: {alert.message}\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"알림이 {rule.escalation_minutes}분간 해결되지 않아 에스컬레이션됩니다.\\n\\n원본 알림: {alert.message}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"알림이 {rule.escalation_minutes}분간 해결되지 않아 에스컬레이션됩니다.\\n\\n원본 알림: {alert.message}\""
      }
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 213,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 217,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"attachments\": [{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 222,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"title\": \"심각도\", \"value\": alert.severity.value.upper(), \"short\": True},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 223,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"title\": \"카테고리\", \"value\": alert.category.value, \"short\": True},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 224,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"title\": \"알림 ID\", \"value\": alert.alert_id, \"short\": True},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 225,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"title\": \"시간\", \"value\": alert.timestamp.strftime('%Y-%m-%d %H:%M:%S'), \"short\": True}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 259,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 326,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"channels\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 327,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"email\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 335,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"slack\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 340,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"webhook\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 348,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"global_settings\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 497,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metrics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 509,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metrics.update({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 566,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if operator == \"gt\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 568,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif operator == \"lt\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 570,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif operator == \"eq\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 572,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif operator == \"ne\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 574,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif operator == \"ge\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 576,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif operator == \"le\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 593,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 693,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if action == \"optimize_memory\" and MONITORING_AVAILABLE:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 700,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif action == \"optimize_cpu\" and MONITORING_AVAILABLE:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 707,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif action == \"restart_agent\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 743,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/integrated_alert_system.py",
      "line_number": 764,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/intelligent_planner.py",
      "line_number": 260,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if 'sample_data' in data_context and data_context['sample_data']'",
      "code_snippet": "if 'sample_data' in data_context and data_context['sample_data']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if 'sample_data' in data_context and data_context['sample_data']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if 'sample_data' in data_context and data_context['sample_data']"
      }
    },
    {
      "file_path": "core/intelligent_planner.py",
      "line_number": 310,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if \"result\" in result and \"parts\" in result[\"result\"]'",
      "code_snippet": "if \"result\" in result and \"parts\" in result[\"result\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if \"result\" in result and \"parts\" in result[\"result\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if \"result\" in result and \"parts\" in result[\"result\"]"
      }
    },
    {
      "file_path": "core/intelligent_planner.py",
      "line_number": 131,
      "violation_type": "fixed_workflow",
      "severity": "medium",
      "description": "고정 워크플로우: 'sequence = [step.get('agent_name', '') for step in steps]'",
      "code_snippet": "agent_sequence = [step.get('agent_name', '') for step in steps]",
      "suggested_fix": "고정 워크플로우를 적응형으로 변경. 'sequence = [step.get('agent_name', '') for step in steps]' 대신 LLM이 상황에 맞는 단계 결정",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "sequence\\s*=\\s*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "sequence = [step.get('agent_name', '') for step in steps]"
      }
    },
    {
      "file_path": "core/intelligent_planner.py",
      "line_number": 142,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if agent_info.get('status') == 'available':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/intelligent_planner.py",
      "line_number": 283,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/intelligent_planner.py",
      "line_number": 287,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"message\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/intelligent_planner.py",
      "line_number": 312,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.get(\"type\") == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/intelligent_planner.py",
      "line_number": 342,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if agent_name in available_agents and available_agents[agent_name].get('status') == 'available':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/intelligent_planner.py",
      "line_number": 394,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "success_pattern = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/intelligent_planner.py",
      "line_number": 410,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if execution.get('execution_result', {}).get('status') == 'completed':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/intelligent_planner.py",
      "line_number": 411,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.execution_memory.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/intelligent_result_interpreter.py",
      "line_number": 292,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif dist_type == \"skewed\":\n                insights.append(Insight(\n                    insight_id=\"'",
      "code_snippet": "elif dist_type == \"skewed\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif dist_type == \"skewed\":\n                insights.append(Insight(\n                    insight_id=\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif dist_type == \"skewed\":\n                insights.append(Insight(\n                    insight_id=\""
      }
    },
    {
      "file_path": "core/intelligent_result_interpreter.py",
      "line_number": 318,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif trend == \"decreasing\":\n                insights.append(Insight(\n                    insight_id=\"'",
      "code_snippet": "elif trend == \"decreasing\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif trend == \"decreasing\":\n                insights.append(Insight(\n                    insight_id=\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif trend == \"decreasing\":\n                insights.append(Insight(\n                    insight_id=\""
      }
    },
    {
      "file_path": "core/intelligent_result_interpreter.py",
      "line_number": 760,
      "violation_type": "fixed_workflow",
      "severity": "medium",
      "description": "고정 워크플로우: 'steps=[\"시스템 상태를 확인하고 다시 시도해주세요.\"]'",
      "code_snippet": "next_steps=[\"시스템 상태를 확인하고 다시 시도해주세요.\"],",
      "suggested_fix": "고정 워크플로우를 적응형으로 변경. 'steps=[\"시스템 상태를 확인하고 다시 시도해주세요.\"]' 대신 LLM이 상황에 맞는 단계 결정",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "steps\\s*=\\s*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "steps=[\"시스템 상태를 확인하고 다시 시도해주세요.\"]"
      }
    },
    {
      "file_path": "core/intelligent_result_interpreter.py",
      "line_number": 281,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if dist_type == \"normal\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/intelligent_result_interpreter.py",
      "line_number": 292,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif dist_type == \"skewed\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/intelligent_result_interpreter.py",
      "line_number": 307,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if trend == \"increasing\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/intelligent_result_interpreter.py",
      "line_number": 318,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif trend == \"decreasing\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/intelligent_result_interpreter.py",
      "line_number": 738,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/intelligent_result_interpreter.py",
      "line_number": 1114,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "sample_results = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/intelligent_result_interpreter.py",
      "line_number": 1115,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"statistics\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/intelligent_result_interpreter.py",
      "line_number": 1118,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"correlations\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/intelligent_result_interpreter.py",
      "line_number": 1204,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 273,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('import') or line.strip().startswith('from''",
      "code_snippet": "if line.strip().startswith('import') or line.strip().startswith('from')]",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('import') or line.strip().startswith('from'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('import') or line.strip().startswith('from'"
      }
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 71,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 97,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 118,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "input_data={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 219,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "input_data={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 262,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "input_data={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 276,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "output={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 289,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 318,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "input_data={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 332,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "output={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 375,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "input_data={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 424,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "output={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 451,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 459,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 465,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 487,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "step_metadata = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 520,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "exec_metadata = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 558,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "transform_metadata = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 593,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "output={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 717,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 726,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 733,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 740,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 746,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {\"type\": \"unknown\", \"error\": \"summary_failed\", \"data_type\": data_type}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 771,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return json.dumps({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_ai_ds_team_wrapper.py",
      "line_number": 800,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "input_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_decorators.py",
      "line_number": 108,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_decorators.py",
      "line_number": 122,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_decorators.py",
      "line_number": 178,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_decorators.py",
      "line_number": 194,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_decorators.py",
      "line_number": 252,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_decorators.py",
      "line_number": 268,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_decorators.py",
      "line_number": 369,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/langfuse_enhanced_a2a_executor.py",
      "line_number": 276,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif part.root.kind == \"data\" and hasattr(part.root, 'data'):\n                        data_reference = part.root.data.get(''",
      "code_snippet": "elif part.root.kind == \"data\" and hasattr(part.root, 'data'):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif part.root.kind == \"data\" and hasattr(part.root, 'data'):\n                        data_reference = part.root.data.get('' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif part.root.kind == \"data\" and hasattr(part.root, 'data'):\n                        data_reference = part.root.data.get('"
      }
    },
    {
      "file_path": "core/langfuse_enhanced_a2a_executor.py",
      "line_number": 74,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "wrapper.create_agent_span(operation_name, {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_enhanced_a2a_executor.py",
      "line_number": 274,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.root.kind == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/langfuse_enhanced_a2a_executor.py",
      "line_number": 276,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif part.root.kind == \"data\" and hasattr(part.root, 'data'):",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/langfuse_enhanced_a2a_executor.py",
      "line_number": 426,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.root.kind == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/langfuse_otel_integration.py",
      "line_number": 152,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "attributes={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_otel_integration.py",
      "line_number": 188,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "attributes={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_session_tracer.py",
      "line_number": 127,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_session_tracer.py",
      "line_number": 168,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_session_tracer.py",
      "line_number": 222,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_session_tracer.py",
      "line_number": 233,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_session_tracer.py",
      "line_number": 269,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "artifact_summary.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_session_tracer.py",
      "line_number": 277,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "output={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_session_tracer.py",
      "line_number": 316,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "output={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/langfuse_session_tracer.py",
      "line_number": 357,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "summary_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 402,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(marker in response for marker in ['1.', '2.', '•', '-', '*']'",
      "code_snippet": "if any(marker in response for marker in ['1.', '2.', '•', '-', '*']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(marker in response for marker in ['1.', '2.', '•', '-', '*']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(marker in response for marker in ['1.', '2.', '•', '-', '*']"
      }
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 803,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(word in query_lower for word in ['분석', 'analyze', '요약', 'summary']'",
      "code_snippet": "if any(word in query_lower for word in ['분석', 'analyze', '요약', 'summary']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(word in query_lower for word in ['분석', 'analyze', '요약', 'summary']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(word in query_lower for word in ['분석', 'analyze', '요약', 'summary']"
      }
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 160,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif self.routing_strategy == \"least_latency\":\n            return self._select_by_latency()\n        elif self.routing_strategy == \"'",
      "code_snippet": "elif self.routing_strategy == \"least_latency\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif self.routing_strategy == \"least_latency\":\n            return self._select_by_latency()\n        elif self.routing_strategy == \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif self.routing_strategy == \"least_latency\":\n            return self._select_by_latency()\n        elif self.routing_strategy == \""
      }
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 893,
      "violation_type": "fixed_workflow",
      "severity": "medium",
      "description": "고정 워크플로우: 'steps=[\"분석 큐에 추가됨\"]'",
      "code_snippet": "reasoning_steps=[\"분석 큐에 추가됨\"]",
      "suggested_fix": "고정 워크플로우를 적응형으로 변경. 'steps=[\"분석 큐에 추가됨\"]' 대신 LLM이 상황에 맞는 단계 결정",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "steps\\s*=\\s*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "steps=[\"분석 큐에 추가됨\"]"
      }
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 158,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if self.routing_strategy == \"performance_based\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 160,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif self.routing_strategy == \"least_latency\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 162,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif self.routing_strategy == \"highest_quality\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 260,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.performance_history[provider].append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 276,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 279,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "provider.value: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 295,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.quality_criteria = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 501,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.fallback_prevention = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 863,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.analysis_history.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 912,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 913,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"global_metrics\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_enhancement/llm_first_analyzer.py",
      "line_number": 970,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 255,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if LANGFUSE_AVAILABLE and os.getenv(\"LOGGING_PROVIDER\") in [\"langfuse\", \"both\"]'",
      "code_snippet": "if LANGFUSE_AVAILABLE and os.getenv(\"LOGGING_PROVIDER\") in [\"langfuse\", \"both\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if LANGFUSE_AVAILABLE and os.getenv(\"LOGGING_PROVIDER\") in [\"langfuse\", \"both\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if LANGFUSE_AVAILABLE and os.getenv(\"LOGGING_PROVIDER\") in [\"langfuse\", \"both\"]"
      }
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 280,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif provider.upper() == \"OLLAMA\":\n        if not ChatOllama:\n            raise ImportError(\"'",
      "code_snippet": "elif provider.upper() == \"OLLAMA\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif provider.upper() == \"OLLAMA\":\n        if not ChatOllama:\n            raise ImportError(\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif provider.upper() == \"OLLAMA\":\n        if not ChatOllama:\n            raise ImportError(\""
      }
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 332,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif provider == \"OLLAMA\":\n            model = os.getenv(\"'",
      "code_snippet": "elif provider == \"OLLAMA\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif provider == \"OLLAMA\":\n            model = os.getenv(\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif provider == \"OLLAMA\":\n            model = os.getenv(\""
      }
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 111,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "RECOMMENDED_OLLAMA_MODELS = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 112,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"light\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 118,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"balanced\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 124,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"powerful\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 130,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"coding\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 149,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "model_info = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 174,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 219,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 270,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if provider.upper() == \"OPENAI\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 280,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif provider.upper() == \"OLLAMA\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 299,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 315,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "config = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 322,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if provider == \"OPENAI\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 332,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif provider == \"OLLAMA\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 364,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "status = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/llm_factory.py",
      "line_number": 383,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "suggestions = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 659,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if result.get(\"status\") in [\"healthy\", \"degraded\"]'",
      "code_snippet": "if result.get(\"status\") in [\"healthy\", \"degraded\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if result.get(\"status\") in [\"healthy\", \"degraded\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if result.get(\"status\") in [\"healthy\", \"degraded\"]"
      }
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 257,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif status == \"degraded\":\n                degraded_agents.append(agent_name)\n            else:\n                failed_agents.append(agent_name)\n            \n            if \"'",
      "code_snippet": "elif status == \"degraded\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif status == \"degraded\":\n                degraded_agents.append(agent_name)\n            else:\n                failed_agents.append(agent_name)\n            \n            if \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif status == \"degraded\":\n                degraded_agents.append(agent_name)\n            else:\n                failed_agents.append(agent_name)\n            \n            if \""
      }
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 382,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif system_health == \"degraded\":\n            recommendations.append(\"'",
      "code_snippet": "elif system_health == \"degraded\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif system_health == \"degraded\":\n            recommendations.append(\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif system_health == \"degraded\":\n            recommendations.append(\""
      }
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 78,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.a2a_agents = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 121,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 126,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"message\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 186,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 201,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 213,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "analysis = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 219,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"response_times\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 227,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"memory_usage\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 255,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if status == \"healthy\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 257,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif status == \"degraded\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 277,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "overall_analysis = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 279,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"agent_status_summary\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 288,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"performance_summary\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 311,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if results.get(\"status\") == \"all_failed\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 350,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if severity == \"low\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 355,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if severity != \"low\" or recommendations:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 368,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return sorted(bottlenecks, key=lambda x: {\"critical\": 4, \"high\": 3, \"medium\": 2, \"low\": 1}[x.severity], reverse=True)",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 379,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if system_health == \"critical\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 382,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif system_health == \"degraded\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 431,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "monitoring_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 447,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "sample = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 465,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "monitoring_data[\"alerts\"].append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 494,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "health_payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 499,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"message\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 520,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "agent_statuses[agent_name] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 529,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "agent_statuses[agent_name] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 546,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "alerts.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 552,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "alerts.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 559,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "alerts.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 567,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if agent_status[\"status\"] == \"unreachable\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 568,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "alerts.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 575,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "alerts.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 605,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "analysis = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 609,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"memory\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 614,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"cpu\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 621,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "agent: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 629,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "agent: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 705,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "severity_colors = {'critical': 'red', 'high': 'orange', 'medium': 'yellow', 'low': 'green'}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 731,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "results_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/a2a_performance_profiler.py",
      "line_number": 811,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_auto_recovery.py",
      "line_number": 89,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if server_config.get(\"type\") == \"stdio\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_auto_recovery.py",
      "line_number": 237,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if server_type == \"stdio\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_auto_recovery.py",
      "line_number": 353,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "summary = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_auto_recovery.py",
      "line_number": 362,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "summary[\"servers\"][server_id] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_auto_recovery.py",
      "line_number": 400,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_auto_recovery.py",
      "line_number": 80,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_server_health'",
      "code_snippet": "async def check_server_health(self, server_id: str) -> bool:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_server_health, llm_check_server_health)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_server_health",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 406,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if server_def.command and server_def.command not in ['python', 'node', 'npx', 'npm']'",
      "code_snippet": "if server_def.command and server_def.command not in ['python', 'node', 'npx', 'npm']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if server_def.command and server_def.command not in ['python', 'node', 'npx', 'npm']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if server_def.command and server_def.command not in ['python', 'node', 'npx', 'npm']"
      }
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 445,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if 'python' in server_id.lower() or any(cap in server_id.lower() for cap in ['data', 'analysis', 'ml']'",
      "code_snippet": "if 'python' in server_id.lower() or any(cap in server_id.lower() for cap in ['data', 'analysis', 'ml']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if 'python' in server_id.lower() or any(cap in server_id.lower() for cap in ['data', 'analysis', 'ml']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if 'python' in server_id.lower() or any(cap in server_id.lower() for cap in ['data', 'analysis', 'ml']"
      }
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 237,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif var_name_lower == 'debug':\n            return \"'",
      "code_snippet": "elif var_name_lower == 'debug':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif var_name_lower == 'debug':\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif var_name_lower == 'debug':\n            return \""
      }
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 240,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif var_name_lower == 'node_env':\n            return \"'",
      "code_snippet": "elif var_name_lower == 'node_env':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif var_name_lower == 'node_env':\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif var_name_lower == 'node_env':\n            return \""
      }
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 243,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif var_name_lower == 'pythonpath':\n            return \"'",
      "code_snippet": "elif var_name_lower == 'pythonpath':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif var_name_lower == 'pythonpath':\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif var_name_lower == 'pythonpath':\n            return \""
      }
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 80,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'pattern = re.compile(r'\\$\\{([^}]+)\\}''",
      "code_snippet": "self.env_var_pattern = re.compile(r'\\$\\{([^}]+)\\}')",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'pattern = re.compile(r'\\$\\{([^}]+)\\}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "pattern.*=.*[\"\\'].*[\"\\']",
        "matched_text": "pattern = re.compile(r'\\$\\{([^}]+)\\}'"
      }
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 415,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('http://') or server_def.url.startswith('https://''",
      "code_snippet": "if server_def.url and not (server_def.url.startswith('http://') or server_def.url.startswith('https://')):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('http://') or server_def.url.startswith('https://'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('http://') or server_def.url.startswith('https://'"
      }
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 83,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.llm_context = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 87,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'capabilities_mapping': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 237,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif var_name_lower == 'debug':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 240,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif var_name_lower == 'node_env':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 243,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif var_name_lower == 'pythonpath':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 256,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "config_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 259,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'metadata': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 283,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "server_config = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 302,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if server.cwd != './':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 320,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 514,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "environment_variables={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 524,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.metadata = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_config_manager.py",
      "line_number": 386,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'validate_server_config'",
      "code_snippet": "def validate_server_config(self, server_def: MCPServerDefinition) -> Tuple[bool, List[str]]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_validate_server_config, llm_validate_server_config)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "validate_server_config",
        "pattern": "validate_"
      }
    },
    {
      "file_path": "core/monitoring/mcp_connection_monitor.py",
      "line_number": 133,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.connections[server_id] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_connection_monitor.py",
      "line_number": 190,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.server_stats[server_id] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_connection_monitor.py",
      "line_number": 221,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "summary = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_connection_monitor.py",
      "line_number": 229,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"auto_recovery\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_connection_monitor.py",
      "line_number": 246,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "summary[\"servers\"][server_id] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_connection_monitor.py",
      "line_number": 311,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "type_counts = {\"stdio\": 0, \"sse\": 0, \"unknown\": 0}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_connection_monitor.py",
      "line_number": 148,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_all_connections'",
      "code_snippet": "async def check_all_connections(self):",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_all_connections, llm_check_all_connections)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_all_connections",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/monitoring/mcp_server_manager.py",
      "line_number": 537,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metrics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_server_manager.py",
      "line_number": 555,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.performance_history[server_id].append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_server_manager.py",
      "line_number": 603,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "server_details[server_id] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_server_manager.py",
      "line_number": 611,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "server_details[server_id] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_server_manager.py",
      "line_number": 618,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_server_manager.py",
      "line_number": 626,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"management_features\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/mcp_server_manager.py",
      "line_number": 319,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'validate_server_config'",
      "code_snippet": "async def validate_server_config(self, server_id: str) -> ValidationResult:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_validate_server_config, llm_validate_server_config)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "validate_server_config",
        "pattern": "validate_"
      }
    },
    {
      "file_path": "core/monitoring/performance_metrics_collector.py",
      "line_number": 457,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif server_def.server_type.value == \"stdio\":\n                    # STDIO는 프로세스 상태로 판단\n                    response_time = 50  # 기본값\n                    success = performance.get(\"'",
      "code_snippet": "elif server_def.server_type.value == \"stdio\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif server_def.server_type.value == \"stdio\":\n                    # STDIO는 프로세스 상태로 판단\n                    response_time = 50  # 기본값\n                    success = performance.get(\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif server_def.server_type.value == \"stdio\":\n                    # STDIO는 프로세스 상태로 판단\n                    response_time = 50  # 기본값\n                    success = performance.get(\""
      }
    },
    {
      "file_path": "core/monitoring/performance_metrics_collector.py",
      "line_number": 657,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"{server_id} {metric_type.value} {level.value}: {value:.2f}{threshold.unit} (임계값: {threshold_value}{threshold.unit})\"'",
      "code_snippet": "message=f\"{server_id} {metric_type.value} {level.value}: {value:.2f}{threshold.unit} (임계값: {threshold_value}{threshold.unit})\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"{server_id} {metric_type.value} {level.value}: {value:.2f}{threshold.unit} (임계값: {threshold_value}{threshold.unit})\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"{server_id} {metric_type.value} {level.value}: {value:.2f}{threshold.unit} (임계값: {threshold_value}{threshold.unit})\""
      }
    },
    {
      "file_path": "core/monitoring/performance_metrics_collector.py",
      "line_number": 331,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={\"port\": port, \"name\": name, \"success\": success}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/performance_metrics_collector.py",
      "line_number": 374,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={\"pid\": pid, \"port\": port, \"unit\": \"MB\"}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/monitoring/performance_metrics_collector.py",
      "line_number": 402,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if performance.get(\"status\") == \"running\" and \"metrics\" in performance:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/performance_metrics_collector.py",
      "line_number": 453,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if server_def.server_type.value == \"sse\" and server_def.url:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/monitoring/performance_metrics_collector.py",
      "line_number": 457,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif server_def.server_type.value == \"stdio\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 387,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif complexity == \"simple\" and requires_data:\n            # 단순 데이터 분석 - 적절한 에이전트 하나 선택\n            if routing_result.get(\"'",
      "code_snippet": "elif complexity == \"simple\" and requires_data:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif complexity == \"simple\" and requires_data:\n            # 단순 데이터 분석 - 적절한 에이전트 하나 선택\n            if routing_result.get(\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif complexity == \"simple\" and requires_data:\n            # 단순 데이터 분석 - 적절한 에이전트 하나 선택\n            if routing_result.get(\""
      }
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 400,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif complexity == \"complex\":\n            # 복잡한 분석 - 여러 에이전트 순차 실행\n            tasks.extend([\n                AgentTask(\n                    agent_id=\"'",
      "code_snippet": "elif complexity == \"complex\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif complexity == \"complex\":\n            # 복잡한 분석 - 여러 에이전트 순차 실행\n            tasks.extend([\n                AgentTask(\n                    agent_id=\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif complexity == \"complex\":\n            # 복잡한 분석 - 여러 에이전트 순차 실행\n            tasks.extend([\n                AgentTask(\n                    agent_id=\""
      }
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 424,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif complexity == \"multi_step\":\n            # 다단계 분석 - 계층적 실행\n            tasks.extend([\n                AgentTask(\n                    agent_id=\"'",
      "code_snippet": "elif complexity == \"multi_step\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif complexity == \"multi_step\":\n            # 다단계 분석 - 계층적 실행\n            tasks.extend([\n                AgentTask(\n                    agent_id=\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif complexity == \"multi_step\":\n            # 다단계 분석 - 계층적 실행\n            tasks.extend([\n                AgentTask(\n                    agent_id=\""
      }
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 540,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif task.agent_type == \"specialized\":\n                return await self._execute_specialized_agent_task(task)\n            elif task.agent_type == \"'",
      "code_snippet": "elif task.agent_type == \"specialized\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif task.agent_type == \"specialized\":\n                return await self._execute_specialized_agent_task(task)\n            elif task.agent_type == \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif task.agent_type == \"specialized\":\n                return await self._execute_specialized_agent_task(task)\n            elif task.agent_type == \""
      }
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 544,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif task.agent_type == \"detector\":\n                return await self._execute_detector_task(task)\n            else:\n                return {\"'",
      "code_snippet": "elif task.agent_type == \"detector\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif task.agent_type == \"detector\":\n                return await self._execute_detector_task(task)\n            else:\n                return {\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif task.agent_type == \"detector\":\n                return await self._execute_detector_task(task)\n            else:\n                return {\""
      }
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 559,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'response = f\"'{query}'에 대한 답변입니다. 이는 LLM이 직접 생성한 응답으로, 추가적인 데이터 분석이 필요하지 않은 일반적인 질문에 대한 답변입니다.\"'",
      "code_snippet": "response = f\"'{query}'에 대한 답변입니다. 이는 LLM이 직접 생성한 응답으로, 추가적인 데이터 분석이 필요하지 않은 일반적인 질문에 대한 답변입니다.\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'response = f\"'{query}'에 대한 답변입니다. 이는 LLM이 직접 생성한 응답으로, 추가적인 데이터 분석이 필요하지 않은 일반적인 질문에 대한 답변입니다.\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "response\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "response = f\"'{query}'에 대한 답변입니다. 이는 LLM이 직접 생성한 응답으로, 추가적인 데이터 분석이 필요하지 않은 일반적인 질문에 대한 답변입니다.\""
      }
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 799,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message = \"오케스트레이션 실행 중 오류가 발생했습니다.\"'",
      "code_snippet": "error_message = \"오케스트레이션 실행 중 오류가 발생했습니다.\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message = \"오케스트레이션 실행 중 오류가 발생했습니다.\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message = \"오케스트레이션 실행 중 오류가 발생했습니다.\""
      }
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 124,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.agent_endpoints = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 220,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.execution_history.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 252,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "prepared = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 274,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "file_info = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 311,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "data_type_info = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 317,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 375,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if complexity == \"simple\" and not requires_data:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 387,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif complexity == \"simple\" and requires_data:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 400,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif complexity == \"complex\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 424,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif complexity == \"multi_step\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 538,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if task.agent_type == \"llm\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 540,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif task.agent_type == \"specialized\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 542,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif task.agent_type == \"universal\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 544,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif task.agent_type == \"detector\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 561,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 584,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 612,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 635,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 702,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 724,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 743,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 910,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "sample_data = pd.DataFrame({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/multi_agent_orchestrator.py",
      "line_number": 942,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 289,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif error_type == \"connection\":\n                self.metrics.connection_errors += 1\n        \n        # 평균 응답시간 업데이트\n        if self.metrics.response_times:\n            self.metrics.avg_response_time = statistics.mean(self.metrics.response_times)\n            self.metrics.max_response_time = max(self.metrics.response_times)\n            self.metrics.min_response_time = min(self.metrics.response_times)\n        \n        # 타임아웃 적응\n        self.adapt_timeout(response_time, success)\n        \n        # 상태 업데이트\n        self._update_connection_state()\n    \n    def _update_connection_state(self):\n        \"'",
      "code_snippet": "elif error_type == \"connection\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif error_type == \"connection\":\n                self.metrics.connection_errors += 1\n        \n        # 평균 응답시간 업데이트\n        if self.metrics.response_times:\n            self.metrics.avg_response_time = statistics.mean(self.metrics.response_times)\n            self.metrics.max_response_time = max(self.metrics.response_times)\n            self.metrics.min_response_time = min(self.metrics.response_times)\n        \n        # 타임아웃 적응\n        self.adapt_timeout(response_time, success)\n        \n        # 상태 업데이트\n        self._update_connection_state()\n    \n    def _update_connection_state(self):\n        \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif error_type == \"connection\":\n                self.metrics.connection_errors += 1\n        \n        # 평균 응답시간 업데이트\n        if self.metrics.response_times:\n            self.metrics.avg_response_time = statistics.mean(self.metrics.response_times)\n            self.metrics.max_response_time = max(self.metrics.response_times)\n            self.metrics.min_response_time = min(self.metrics.response_times)\n        \n        # 타임아웃 적응\n        self.adapt_timeout(response_time, success)\n        \n        # 상태 업데이트\n        self._update_connection_state()\n    \n    def _update_connection_state(self):\n        \""
      }
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 388,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif self.state == \"open\":\n            # 복구 시간이 지났으면 half-open으로 전환\n            if (self.last_failure_time and\n                (datetime.now() - self.last_failure_time).total_seconds() > self.config.recovery_timeout):\n                self.state = \"'",
      "code_snippet": "elif self.state == \"open\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif self.state == \"open\":\n            # 복구 시간이 지났으면 half-open으로 전환\n            if (self.last_failure_time and\n                (datetime.now() - self.last_failure_time).total_seconds() > self.config.recovery_timeout):\n                self.state = \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif self.state == \"open\":\n            # 복구 시간이 지났으면 half-open으로 전환\n            if (self.last_failure_time and\n                (datetime.now() - self.last_failure_time).total_seconds() > self.config.recovery_timeout):\n                self.state = \""
      }
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 396,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif self.state == \"half_open\":\n            return self.half_open_attempts < self.config.half_open_max_calls\n        \n        return False\n    \n    def record_success(self):\n        \"'",
      "code_snippet": "elif self.state == \"half_open\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif self.state == \"half_open\":\n            return self.half_open_attempts < self.config.half_open_max_calls\n        \n        return False\n    \n    def record_success(self):\n        \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif self.state == \"half_open\":\n            return self.half_open_attempts < self.config.half_open_max_calls\n        \n        return False\n    \n    def record_success(self):\n        \""
      }
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 419,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif self.state == \"half_open\":\n            self.state = \"'",
      "code_snippet": "elif self.state == \"half_open\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif self.state == \"half_open\":\n            self.state = \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif self.state == \"half_open\":\n            self.state = \""
      }
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 287,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if error_type == \"timeout\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 289,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif error_type == \"connection\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 357,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 364,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"metrics\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 386,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if self.state == \"closed\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 388,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif self.state == \"open\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 396,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif self.state == \"half_open\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 403,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if self.state == \"half_open\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 417,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if self.state == \"closed\" and self.failure_count >= self.config.failure_threshold:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 419,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif self.state == \"half_open\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 423,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if self.state == \"half_open\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 440,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.global_metrics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 453,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.a2a_agents = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 560,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "benchmark_results = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 585,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 590,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"message\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 601,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "agent_results.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 637,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "analysis = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 646,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "analysis[\"response_time_stats\"] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 664,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "optimization_metrics[agent_name] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 666,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"timeout_adaptation\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 814,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/optimization/a2a_connection_optimizer.py",
      "line_number": 852,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/orchestration_engine.py",
      "line_number": 253,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if \"result\" in result and \"parts\" in result[\"result\"]'",
      "code_snippet": "if \"result\" in result and \"parts\" in result[\"result\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if \"result\" in result and \"parts\" in result[\"result\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if \"result\" in result and \"parts\" in result[\"result\"]"
      }
    },
    {
      "file_path": "core/orchestration_engine.py",
      "line_number": 81,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/orchestration_engine.py",
      "line_number": 108,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self._update_execution_history({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/orchestration_engine.py",
      "line_number": 117,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "final_result = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/orchestration_engine.py",
      "line_number": 150,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/orchestration_engine.py",
      "line_number": 226,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/orchestration_engine.py",
      "line_number": 230,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"message\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/orchestration_engine.py",
      "line_number": 255,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if part.get(\"type\") == \"text\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/orchestration_engine.py",
      "line_number": 40,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'process_query_with_orchestration'",
      "code_snippet": "async def process_query_with_orchestration(",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_process_query_with_orchestration, llm_process_query_with_orchestration)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "process_query_with_orchestration",
        "pattern": "process_"
      }
    },
    {
      "file_path": "core/performance/connection_pool.py",
      "line_number": 98,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.pool_metrics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance/connection_pool.py",
      "line_number": 184,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if endpoint and conn.endpoint != \"pending\" and conn.endpoint != endpoint:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/performance/connection_pool.py",
      "line_number": 194,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if endpoint and best_connection.endpoint == \"pending\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/performance/connection_pool.py",
      "line_number": 324,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if (conn.status == ConnectionStatus.IDLE and",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/performance/connection_pool.py",
      "line_number": 377,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance/connection_pool.py",
      "line_number": 428,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.pool_configs = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance/connection_pool.py",
      "line_number": 481,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "stats = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance/connection_pool.py",
      "line_number": 495,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "stats['summary'] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance/connection_pool.py",
      "line_number": 547,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/performance_monitor.py",
      "line_number": 61,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.agent_stats: Dict[str, Dict] = defaultdict(lambda: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance_monitor.py",
      "line_number": 74,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.thresholds = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance_monitor.py",
      "line_number": 184,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if status == \"completed\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/performance_monitor.py",
      "line_number": 258,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "alert = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance_monitor.py",
      "line_number": 274,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "summary = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance_monitor.py",
      "line_number": 289,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "summary.update({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance_monitor.py",
      "line_number": 449,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "agent_data.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance_monitor.py",
      "line_number": 482,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "severity_icon = {\"warning\": \"⚠️\", \"error\": \"❌\", \"info\": \"ℹ️\"}.get(alert['severity'], \"⚠️\")",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance_optimizer.py",
      "line_number": 282,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if operation in [\"general\", \"memory\"]'",
      "code_snippet": "if operation in [\"general\", \"memory\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if operation in [\"general\", \"memory\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if operation in [\"general\", \"memory\"]"
      }
    },
    {
      "file_path": "core/performance_optimizer.py",
      "line_number": 287,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if operation in [\"general\", \"categorical\"]'",
      "code_snippet": "if operation in [\"general\", \"categorical\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if operation in [\"general\", \"categorical\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if operation in [\"general\", \"categorical\"]"
      }
    },
    {
      "file_path": "core/performance_optimizer.py",
      "line_number": 292,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if operation in [\"general\", \"index\"]'",
      "code_snippet": "if operation in [\"general\", \"index\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if operation in [\"general\", \"index\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if operation in [\"general\", \"index\"]"
      }
    },
    {
      "file_path": "core/performance_optimizer.py",
      "line_number": 455,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if col_type in ['int64', 'int32']'",
      "code_snippet": "if col_type in ['int64', 'int32']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if col_type in ['int64', 'int32']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if col_type in ['int64', 'int32']"
      }
    },
    {
      "file_path": "core/performance_optimizer.py",
      "line_number": 466,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif col_type == 'float64':\n                optimized_df[col] = pd.to_numeric(optimized_df[col], downcast=''",
      "code_snippet": "elif col_type == 'float64':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif col_type == 'float64':\n                optimized_df[col] = pd.to_numeric(optimized_df[col], downcast='' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif col_type == 'float64':\n                optimized_df[col] = pd.to_numeric(optimized_df[col], downcast='"
      }
    },
    {
      "file_path": "core/performance_optimizer.py",
      "line_number": 297,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if operation == \"deduplication\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/performance_optimizer.py",
      "line_number": 306,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "optimization_stats = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance_optimizer.py",
      "line_number": 347,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance_optimizer.py",
      "line_number": 418,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance_optimizer.py",
      "line_number": 420,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"current_status\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance_optimizer.py",
      "line_number": 426,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"averages\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance_optimizer.py",
      "line_number": 431,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"peaks\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance_optimizer.py",
      "line_number": 437,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"cache_stats\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/performance_optimizer.py",
      "line_number": 466,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif col_type == 'float64':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 138,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "input_data={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 170,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "expert_answer = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 181,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"metadata\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 198,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 245,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 277,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "agent_selection = type('MockAgentSelection', (), {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 290,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "context = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 300,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "integration_result = type('MockIntegrationResult', (), {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 304,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "type('MockInsight', (), {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 315,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 327,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'agent_result_summary': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 332,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'integration_metadata': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 351,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 440,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 461,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "agent_results[agent_name] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 481,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "task_results=[{\"agent_name\": r.get(\"agent_name\", \"unknown\"),",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 485,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "aggregated_results={\"source\": \"a2a_integration\", \"agent_count\": len(a2a_agent_results), \"agent_results\": agent_results},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 501,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "role_mapping = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 523,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 538,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "mock_enhanced_query = type('MockEnhancedQuery', (), {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 575,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 589,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "mock_agent_selection = type('MockAgentSelection', (), {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 600,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "mock_integration_result = type('MockIntegrationResult', (), {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 604,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "type('MockInsight', (), {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 615,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 627,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'agent_result_summary': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 632,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'integration_metadata': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 639,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "mock_managed_plan = type('MockManagedPlan', (), {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 647,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/phase3_integration_layer.py",
      "line_number": 101,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'process_user_query_to_expert_answer'",
      "code_snippet": "async def process_user_query_to_expert_answer(",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_process_user_query_to_expert_answer, llm_process_user_query_to_expert_answer)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "process_user_query_to_expert_answer",
        "pattern": "process_"
      }
    },
    {
      "file_path": "core/plan_execute/a2a_executor.py",
      "line_number": 134,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/plan_execute/a2a_executor.py",
      "line_number": 144,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/plan_execute/a2a_executor.py",
      "line_number": 153,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/plan_execute/a2a_executor.py",
      "line_number": 162,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/plan_execute/a2a_executor.py",
      "line_number": 170,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/plan_execute/a2a_executor.py",
      "line_number": 178,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/plan_execute/a2a_executor.py",
      "line_number": 295,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "step_outputs[step_info[\"step\"]] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/plan_execute/planner.py",
      "line_number": 203,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(word in task_lower for word in [\"load\", \"import\", \"read\", \"data\"]'",
      "code_snippet": "if any(word in task_lower for word in [\"load\", \"import\", \"read\", \"data\"]):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(word in task_lower for word in [\"load\", \"import\", \"read\", \"data\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(word in task_lower for word in [\"load\", \"import\", \"read\", \"data\"]"
      }
    },
    {
      "file_path": "core/plan_execute/planner.py",
      "line_number": 205,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(word in task_lower for word in [\"clean\", \"preprocess\", \"prepare\"]'",
      "code_snippet": "elif any(word in task_lower for word in [\"clean\", \"preprocess\", \"prepare\"]):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(word in task_lower for word in [\"clean\", \"preprocess\", \"prepare\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(word in task_lower for word in [\"clean\", \"preprocess\", \"prepare\"]"
      }
    },
    {
      "file_path": "core/plan_execute/planner.py",
      "line_number": 207,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(word in task_lower for word in [\"analyze\", \"explore\", \"eda\", \"statistics\"]'",
      "code_snippet": "elif any(word in task_lower for word in [\"analyze\", \"explore\", \"eda\", \"statistics\"]):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(word in task_lower for word in [\"analyze\", \"explore\", \"eda\", \"statistics\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(word in task_lower for word in [\"analyze\", \"explore\", \"eda\", \"statistics\"]"
      }
    },
    {
      "file_path": "core/plan_execute/planner.py",
      "line_number": 209,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(word in task_lower for word in [\"plot\", \"chart\", \"visualize\", \"graph\"]'",
      "code_snippet": "elif any(word in task_lower for word in [\"plot\", \"chart\", \"visualize\", \"graph\"]):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(word in task_lower for word in [\"plot\", \"chart\", \"visualize\", \"graph\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(word in task_lower for word in [\"plot\", \"chart\", \"visualize\", \"graph\"]"
      }
    },
    {
      "file_path": "core/plan_execute/planner.py",
      "line_number": 211,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(word in task_lower for word in [\"model\", \"machine learning\", \"ml\", \"predict\"]'",
      "code_snippet": "elif any(word in task_lower for word in [\"model\", \"machine learning\", \"ml\", \"predict\"]):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(word in task_lower for word in [\"model\", \"machine learning\", \"ml\", \"predict\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(word in task_lower for word in [\"model\", \"machine learning\", \"ml\", \"predict\"]"
      }
    },
    {
      "file_path": "core/plan_execute/planner.py",
      "line_number": 213,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(word in task_lower for word in [\"report\", \"summary\", \"document\"]'",
      "code_snippet": "elif any(word in task_lower for word in [\"report\", \"summary\", \"document\"]):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(word in task_lower for word in [\"report\", \"summary\", \"document\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(word in task_lower for word in [\"report\", \"summary\", \"document\"]"
      }
    },
    {
      "file_path": "core/plan_execute/planner.py",
      "line_number": 195,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'pattern = r'(\\d+)\\.?\\s*([^\\n]+)''",
      "code_snippet": "step_pattern = r'(\\d+)\\.?\\s*([^\\n]+)'",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'pattern = r'(\\d+)\\.?\\s*([^\\n]+)'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "pattern.*=.*[\"\\'].*[\"\\']",
        "matched_text": "pattern = r'(\\d+)\\.?\\s*([^\\n]+)'"
      }
    },
    {
      "file_path": "core/plan_execute/planner.py",
      "line_number": 151,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "plan.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/plan_execute/planner.py",
      "line_number": 171,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "state[\"plan\"] = [{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/plan_execute/planner.py",
      "line_number": 216,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "steps.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/plan_execute/planner.py",
      "line_number": 226,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "steps = [{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/plan_execute/planner.py",
      "line_number": 248,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 212,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"사용률 {metrics.cpu_usage:.1f}%\"'",
      "code_snippet": "message=f\"사용률 {metrics.cpu_usage:.1f}%\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"사용률 {metrics.cpu_usage:.1f}%\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"사용률 {metrics.cpu_usage:.1f}%\""
      }
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 230,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"사용률 {metrics.memory_usage:.1f}%\"'",
      "code_snippet": "message=f\"사용률 {metrics.memory_usage:.1f}%\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"사용률 {metrics.memory_usage:.1f}%\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"사용률 {metrics.memory_usage:.1f}%\""
      }
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 248,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"사용률 {metrics.disk_usage:.1f}%\"'",
      "code_snippet": "message=f\"사용률 {metrics.disk_usage:.1f}%\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"사용률 {metrics.disk_usage:.1f}%\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"사용률 {metrics.disk_usage:.1f}%\""
      }
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 278,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message = f\"정상 응답 ({response_time:.0f}ms)\"'",
      "code_snippet": "message = f\"정상 응답 ({response_time:.0f}ms)\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message = f\"정상 응답 ({response_time:.0f}ms)\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message = f\"정상 응답 ({response_time:.0f}ms)\""
      }
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 282,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message = f\"HTTP {response.status_code} 오류\"'",
      "code_snippet": "message = f\"HTTP {response.status_code} 오류\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message = f\"HTTP {response.status_code} 오류\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message = f\"HTTP {response.status_code} 오류\""
      }
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 288,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message = \"연결 불가\"'",
      "code_snippet": "message = \"연결 불가\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message = \"연결 불가\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message = \"연결 불가\""
      }
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 294,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message = \"응답 시간 초과\"'",
      "code_snippet": "message = \"응답 시간 초과\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message = \"응답 시간 초과\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message = \"응답 시간 초과\""
      }
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 311,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"체크 실패: {str(e)}\"'",
      "code_snippet": "message=f\"체크 실패: {str(e)}\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"체크 실패: {str(e)}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"체크 실패: {str(e)}\""
      }
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 324,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"정상 실행\"'",
      "code_snippet": "message=\"정상 실행\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"정상 실행\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"정상 실행\""
      }
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 331,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"HTTP {response.status_code}\"'",
      "code_snippet": "message=f\"HTTP {response.status_code}\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"HTTP {response.status_code}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"HTTP {response.status_code}\""
      }
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 338,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"연결 실패\"'",
      "code_snippet": "message=\"연결 실패\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"연결 실패\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"연결 실패\""
      }
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 350,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"정상 응답\"'",
      "code_snippet": "message=\"정상 응답\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"정상 응답\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"정상 응답\""
      }
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 357,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"HTTP {response.status_code}\"'",
      "code_snippet": "message=f\"HTTP {response.status_code}\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"HTTP {response.status_code}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"HTTP {response.status_code}\""
      }
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 364,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"연결 실패 (선택적 서비스)\"'",
      "code_snippet": "message=\"연결 실패 (선택적 서비스)\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"연결 실패 (선택적 서비스)\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"연결 실패 (선택적 서비스)\""
      }
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 100,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.a2a_agents = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 462,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 499,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if os.name != 'nt':  # Unix 계열",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_core.py",
      "line_number": 527,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_dashboard.py",
      "line_number": 173,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif status == \"warning\":\n                        st.metric(\"'",
      "code_snippet": "elif status == \"warning\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif status == \"warning\":\n                        st.metric(\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif status == \"warning\":\n                        st.metric(\""
      }
    },
    {
      "file_path": "core/production_monitoring_dashboard.py",
      "line_number": 171,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if status == \"healthy\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_dashboard.py",
      "line_number": 173,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif status == \"warning\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_dashboard.py",
      "line_number": 276,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "df_data.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_dashboard.py",
      "line_number": 327,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "gauge={'axis': {'range': [0, 100]},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_dashboard.py",
      "line_number": 332,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'threshold': {'line': {'color': \"red\", 'width': 4},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_dashboard.py",
      "line_number": 344,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "gauge={'axis': {'range': [0, 100]},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_dashboard.py",
      "line_number": 349,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'threshold': {'line': {'color': \"red\", 'width': 4},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_dashboard.py",
      "line_number": 362,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "gauge={'axis': {'range': [0, 100]},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_dashboard.py",
      "line_number": 367,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'threshold': {'line': {'color': \"red\", 'width': 4},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_dashboard.py",
      "line_number": 467,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "df_data.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/production_monitoring_dashboard.py",
      "line_number": 683,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 438,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if char in ['\"', \"'\"]'",
      "code_snippet": "if char in ['\"', \"'\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if char in ['\"', \"'\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if char in ['\"', \"'\"]"
      }
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 108,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif.*==.*[\"\\'][^\"\\']*[\"\\']',        # 하드코딩된 값 비교\n                r''",
      "code_snippet": "r'elif.*==.*[\"\\'][^\"\\']*[\"\\']',        # 하드코딩된 값 비교",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif.*==.*[\"\\'][^\"\\']*[\"\\']',        # 하드코딩된 값 비교\n                r'' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif.*==.*[\"\\'][^\"\\']*[\"\\']',        # 하드코딩된 값 비교\n                r'"
      }
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 32,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'PATTERN_MATCHING = \"pattern_matching\"'",
      "code_snippet": "PATTERN_MATCHING = \"pattern_matching\"",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'PATTERN_MATCHING = \"pattern_matching\"' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "pattern.*=.*[\"\\'].*[\"\\']",
        "matched_text": "PATTERN_MATCHING = \"pattern_matching\""
      }
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 323,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'pattern = r'def\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(''",
      "code_snippet": "function_pattern = r'def\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\('",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'pattern = r'def\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\('' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "pattern.*=.*[\"\\'].*[\"\\']",
        "matched_text": "pattern = r'def\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\('"
      }
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 425,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('#''",
      "code_snippet": "if stripped_line.startswith('#'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('#'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('#'"
      }
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 34,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'RESPONSE = \"template_response\"'",
      "code_snippet": "TEMPLATE_RESPONSE = \"template_response\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'RESPONSE = \"template_response\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "response\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "RESPONSE = \"template_response\""
      }
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 91,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.hardcode_patterns = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 364,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "type_mapping = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 545,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "results_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 547,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"summary\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 556,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 603,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "emoji = {\"critical\": \"🚨\", \"high\": \"⚠️\", \"medium\": \"⚡\", \"low\": \"💡\"}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 626,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "plan = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 627,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"overview\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 642,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "plan[\"phases\"].append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 651,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "plan[\"phases\"].append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 662,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "plan[\"file_specific_plans\"][file_path] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/quality/hardcode_detector.py",
      "line_number": 816,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/a2a_agent_execution_orchestrator.py",
      "line_number": 247,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif agent_selection_result.selection_strategy == \"parallel\":\n            return ExecutionStrategy.PARALLEL\n        else:\n            return ExecutionStrategy.SEQUENTIAL\n    \n    async def execute_plan(\n        self,\n        plan: ExecutionPlan,\n        progress_callback: Optional[callable] = None\n    ) -> ExecutionResult:\n        \"'",
      "code_snippet": "elif agent_selection_result.selection_strategy == \"parallel\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif agent_selection_result.selection_strategy == \"parallel\":\n            return ExecutionStrategy.PARALLEL\n        else:\n            return ExecutionStrategy.SEQUENTIAL\n    \n    async def execute_plan(\n        self,\n        plan: ExecutionPlan,\n        progress_callback: Optional[callable] = None\n    ) -> ExecutionResult:\n        \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif agent_selection_result.selection_strategy == \"parallel\":\n            return ExecutionStrategy.PARALLEL\n        else:\n            return ExecutionStrategy.SEQUENTIAL\n    \n    async def execute_plan(\n        self,\n        plan: ExecutionPlan,\n        progress_callback: Optional[callable] = None\n    ) -> ExecutionResult:\n        \""
      }
    },
    {
      "file_path": "core/query_processing/a2a_agent_execution_orchestrator.py",
      "line_number": 559,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'```json\\s*(.*?)\\s*```''",
      "code_snippet": "json_match = re.search(r'```json\\s*(.*?)\\s*```', content, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'```json\\s*(.*?)\\s*```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'```json\\s*(.*?)\\s*```'"
      }
    },
    {
      "file_path": "core/query_processing/a2a_agent_execution_orchestrator.py",
      "line_number": 554,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('{') and content.endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('{') and content.endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('{') and content.endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/a2a_agent_execution_orchestrator.py",
      "line_number": 554,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/a2a_agent_execution_orchestrator.py",
      "line_number": 245,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if agent_selection_result.selection_strategy == \"pipeline\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/a2a_agent_execution_orchestrator.py",
      "line_number": 247,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif agent_selection_result.selection_strategy == \"parallel\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/a2a_agent_execution_orchestrator.py",
      "line_number": 430,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "message_payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/a2a_agent_execution_orchestrator.py",
      "line_number": 435,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"message\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/a2a_agent_execution_orchestrator.py",
      "line_number": 459,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/a2a_agent_execution_orchestrator.py",
      "line_number": 488,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "task_result = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/a2a_agent_execution_orchestrator.py",
      "line_number": 631,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/a2a_agent_execution_orchestrator.py",
      "line_number": 640,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 399,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if domain_knowledge.taxonomy.primary_domain.value in [\"manufacturing\", \"healthcare\"]'",
      "code_snippet": "if domain_knowledge.taxonomy.primary_domain.value in [\"manufacturing\", \"healthcare\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if domain_knowledge.taxonomy.primary_domain.value in [\"manufacturing\", \"healthcare\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if domain_knowledge.taxonomy.primary_domain.value in [\"manufacturing\", \"healthcare\"]"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 425,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if \"executive\" in stakeholders and stakeholders[\"executive\"]'",
      "code_snippet": "if \"executive\" in stakeholders and stakeholders[\"executive\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if \"executive\" in stakeholders and stakeholders[\"executive\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if \"executive\" in stakeholders and stakeholders[\"executive\"]"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 427,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if \"primary\" in stakeholders and stakeholders[\"primary\"]'",
      "code_snippet": "elif \"primary\" in stakeholders and stakeholders[\"primary\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if \"primary\" in stakeholders and stakeholders[\"primary\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if \"primary\" in stakeholders and stakeholders[\"primary\"]"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 503,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if intent_analysis.urgency_level.value in [\"high\", \"critical\"]'",
      "code_snippet": "if intent_analysis.urgency_level.value in [\"high\", \"critical\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if intent_analysis.urgency_level.value in [\"high\", \"critical\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if intent_analysis.urgency_level.value in [\"high\", \"critical\"]"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 585,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('```json''",
      "code_snippet": "if response_text.startswith('```json'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('```json'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('```json'"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 587,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('```''",
      "code_snippet": "if response_text.endswith('```'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('```'"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 498,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if domain_knowledge.taxonomy.primary_domain.value == \"manufacturing\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 569,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if domain_knowledge.taxonomy.primary_domain.value == \"manufacturing\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 611,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 516,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "template: AnswerTemplate,",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 534,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "template: AnswerTemplate) -> float:",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 541,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "complexity_alignment = 1.0 - abs(template.complexity_score -",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 545,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "section_completeness = min(len(template.sections) / 6, 1.0)  # Target 6 sections",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 558,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "template: AnswerTemplate) -> List[str]:",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 708,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "template = predicted_structure.primary_template",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 713,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "📋 Primary Template:",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 714,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "• Format: {template.format_type.value}",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 715,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "• Target Audience: {template.target_audience}",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 716,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "• Sections ({len(template.sections)}): {', '.join([s.title for s in template.sections[:5]])}",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 716,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "• Sections ({len(template.sections)}): {', '.join([s.title for s in template.sections[:5]])}",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 717,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "• Visualizations ({len(template.required_visualizations)}): {', '.join([v.value for v in template.required_visualizations[:5]])}",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 717,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "• Visualizations ({len(template.required_visualizations)}): {', '.join([v.value for v in template.required_visualizations[:5]])}",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 720,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "• Estimated Time: {template.estimated_completion_time}",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 721,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "• Complexity Score: {template.complexity_score:.2f}",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_predictor.py",
      "line_number": 722,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "• Quality Checkpoints: {len(template.quality_checkpoints)}",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/answer_quality_validator.py",
      "line_number": 187,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/answer_quality_validator.py",
      "line_number": 1002,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "synthesis_metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/answer_quality_validator.py",
      "line_number": 1082,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/answer_quality_validator.py",
      "line_number": 138,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'validate_answer'",
      "code_snippet": "def validate_answer(",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_validate_answer, llm_validate_answer)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "validate_answer",
        "pattern": "validate_"
      }
    },
    {
      "file_path": "core/query_processing/answer_quality_validator.py",
      "line_number": 199,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'validate_formatted_answer'",
      "code_snippet": "def validate_formatted_answer(",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_validate_formatted_answer, llm_validate_formatted_answer)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "validate_formatted_answer",
        "pattern": "validate_"
      }
    },
    {
      "file_path": "core/query_processing/answer_quality_validator.py",
      "line_number": 226,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'validate_optimized_result'",
      "code_snippet": "def validate_optimized_result(",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_validate_optimized_result, llm_validate_optimized_result)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "validate_optimized_result",
        "pattern": "validate_"
      }
    },
    {
      "file_path": "core/query_processing/domain_aware_agent_selector.py",
      "line_number": 524,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'\\{.*\\}''",
      "code_snippet": "json_match = re.search(r'\\{.*\\}', response_text, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'\\{.*\\}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'\\{.*\\}'"
      }
    },
    {
      "file_path": "core/query_processing/domain_aware_agent_selector.py",
      "line_number": 124,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "confidence_factors={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_aware_agent_selector.py",
      "line_number": 161,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "confidence_factors={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_aware_agent_selector.py",
      "line_number": 198,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "confidence_factors={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_aware_agent_selector.py",
      "line_number": 235,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "confidence_factors={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_aware_agent_selector.py",
      "line_number": 272,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "confidence_factors={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_aware_agent_selector.py",
      "line_number": 309,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "confidence_factors={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_aware_agent_selector.py",
      "line_number": 346,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "confidence_factors={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_aware_agent_selector.py",
      "line_number": 383,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "confidence_factors={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_aware_agent_selector.py",
      "line_number": 420,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "confidence_factors={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_aware_agent_selector.py",
      "line_number": 733,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_aware_agent_selector.py",
      "line_number": 773,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_extractor.py",
      "line_number": 481,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'mapping = {\"LOW\": 0.25, \"MEDIUM\": 0.5, \"HIGH\": 0.75, \"VERY_HIGH\"'",
      "code_snippet": "confidence_mapping = {\"LOW\": 0.25, \"MEDIUM\": 0.5, \"HIGH\": 0.75, \"VERY_HIGH\": 0.9}",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'mapping = {\"LOW\": 0.25, \"MEDIUM\": 0.5, \"HIGH\": 0.75, \"VERY_HIGH\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "mapping\\s*=\\s*\\{.*[\"\\'].*[\"\\']",
        "matched_text": "mapping = {\"LOW\": 0.25, \"MEDIUM\": 0.5, \"HIGH\": 0.75, \"VERY_HIGH\""
      }
    },
    {
      "file_path": "core/query_processing/domain_extractor.py",
      "line_number": 33,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'PATTERNS = \"technical_patterns\"'",
      "code_snippet": "TECHNICAL_PATTERNS = \"technical_patterns\"  # From technical language patterns",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'PATTERNS = \"technical_patterns\"' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "pattern.*=.*[\"\\'].*[\"\\']",
        "matched_text": "PATTERNS = \"technical_patterns\""
      }
    },
    {
      "file_path": "core/query_processing/domain_extractor.py",
      "line_number": 516,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('```json''",
      "code_snippet": "if response_text.startswith('```json'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('```json'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('```json'"
      }
    },
    {
      "file_path": "core/query_processing/domain_extractor.py",
      "line_number": 518,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('```''",
      "code_snippet": "if response_text.endswith('```'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('```'"
      }
    },
    {
      "file_path": "core/query_processing/domain_extractor.py",
      "line_number": 481,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "confidence_mapping = {\"LOW\": 0.25, \"MEDIUM\": 0.5, \"HIGH\": 0.75, \"VERY_HIGH\": 0.9}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_extractor.py",
      "line_number": 525,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_extractor.py",
      "line_number": 533,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 465,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if section.section_type in [\"analysis\", \"findings\"]'",
      "code_snippet": "if section.section_type in [\"analysis\", \"findings\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if section.section_type in [\"analysis\", \"findings\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if section.section_type in [\"analysis\", \"findings\"]"
      }
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 651,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if section[\"type\"] not in [\"executive_summary\", \"recommendations\", \"next_steps\"]'",
      "code_snippet": "if section[\"type\"] not in [\"executive_summary\", \"recommendations\", \"next_steps\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if section[\"type\"] not in [\"executive_summary\", \"recommendations\", \"next_steps\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if section[\"type\"] not in [\"executive_summary\", \"recommendations\", \"next_steps\"]"
      }
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 409,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'pattern = r'\\b' + re.escape(old_term) + r'\\b''",
      "code_snippet": "pattern = r'\\b' + re.escape(old_term) + r'\\b'",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'pattern = r'\\b' + re.escape(old_term) + r'\\b'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "pattern.*=.*[\"\\'].*[\"\\']",
        "matched_text": "pattern = r'\\b' + re.escape(old_term) + r'\\b'"
      }
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 128,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "formatting_conventions={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 135,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metric_units={\"performance\": \"ms\", \"memory\": \"MB\", \"storage\": \"GB\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 142,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "formatting_conventions={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 149,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metric_units={\"revenue\": \"$\", \"time\": \"days\", \"resources\": \"FTE\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 156,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "formatting_conventions={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 163,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metric_units={\"currency\": \"$\", \"percentage\": \"%\", \"ratio\": \"x\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 170,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "formatting_conventions={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 177,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metric_units={\"measurement\": \"SI\", \"statistical\": \"p-value\", \"confidence\": \"CI\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 184,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "formatting_conventions={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 191,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metric_units={\"correlation\": \"r\", \"variance\": \"σ²\", \"confidence\": \"%\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 198,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "formatting_conventions={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 276,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "DomainType.TECHNICAL: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 283,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "DomainType.BUSINESS: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 290,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "DomainType.FINANCIAL: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 347,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 428,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "structured_sections.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 442,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "content_map = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 616,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "title_map = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 691,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "visualization = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 743,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "domain_mapping = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 636,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "template = self.formatting_templates.get(context.output_format,",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 660,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "formatted_content = template.format(",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 299,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'format_answer'",
      "code_snippet": "def format_answer(self,",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_format_answer, llm_format_answer)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "format_answer",
        "pattern": "format_"
      }
    },
    {
      "file_path": "core/query_processing/domain_specific_answer_formatter.py",
      "line_number": 846,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'validate_formatting_context'",
      "code_snippet": "def validate_formatting_context(self, context: FormattingContext) -> bool:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_validate_formatting_context, llm_validate_formatting_context)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "validate_formatting_context",
        "pattern": "validate_"
      }
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 457,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif severity == \"warning\":\n            logger.warning(f\"'",
      "code_snippet": "elif severity == \"warning\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif severity == \"warning\":\n            logger.warning(f\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif severity == \"warning\":\n            logger.warning(f\""
      }
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 364,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'```json\\s*(.*?)\\s*```''",
      "code_snippet": "json_match = re.search(r'```json\\s*(.*?)\\s*```', content, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'```json\\s*(.*?)\\s*```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'```json\\s*(.*?)\\s*```'"
      }
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 572,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'```json\\s*(.*?)\\s*```''",
      "code_snippet": "json_match = re.search(r'```json\\s*(.*?)\\s*```', content, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'```json\\s*(.*?)\\s*```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'```json\\s*(.*?)\\s*```'"
      }
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 360,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('{') and content.endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('{') and content.endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('{') and content.endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 568,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('{') and content.endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('{') and content.endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('{') and content.endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 360,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 568,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 179,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 333,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{json.dumps([{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 368,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "validation_result = {\"valid\": True, \"issues\": [], \"warnings\": [], \"score\": 0.5}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 374,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 399,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if task_result.get(\"status\") == \"failed\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 455,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if severity == \"error\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 457,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif severity == \"warning\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 482,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if task_result.get(\"status\") == \"completed\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 606,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 616,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"metrics\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 631,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "analytics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 632,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"plan_overview\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 639,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"monitoring_summary\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 646,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/execution_plan_manager.py",
      "line_number": 658,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "analytics[\"integration_summary\"] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 543,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif section_id == \"key_findings\" or section_id == \"findings\":\n            return \"'",
      "code_snippet": "elif section_id == \"key_findings\" or section_id == \"findings\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif section_id == \"key_findings\" or section_id == \"findings\":\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif section_id == \"key_findings\" or section_id == \"findings\":\n            return \""
      }
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 545,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif section_id == \"recommendations\":\n            return \"'",
      "code_snippet": "elif section_id == \"recommendations\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif section_id == \"recommendations\":\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif section_id == \"recommendations\":\n            return \""
      }
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 547,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif section_id == \"next_steps\":\n            return \"'",
      "code_snippet": "elif section_id == \"next_steps\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif section_id == \"next_steps\":\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif section_id == \"next_steps\":\n            return \""
      }
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 549,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif section_id == \"detailed_analysis\":\n            # Combine sections from holistic answer\n            analysis_content = []\n            for section in holistic_answer.main_sections:\n                if section.section_type == \"'",
      "code_snippet": "elif section_id == \"detailed_analysis\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif section_id == \"detailed_analysis\":\n            # Combine sections from holistic answer\n            analysis_content = []\n            for section in holistic_answer.main_sections:\n                if section.section_type == \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif section_id == \"detailed_analysis\":\n            # Combine sections from holistic answer\n            analysis_content = []\n            for section in holistic_answer.main_sections:\n                if section.section_type == \""
      }
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 556,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif section_id == \"methodology\":\n            # Look for methodology in sections\n            for section in holistic_answer.main_sections:\n                if \"'",
      "code_snippet": "elif section_id == \"methodology\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif section_id == \"methodology\":\n            # Look for methodology in sections\n            for section in holistic_answer.main_sections:\n                if \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif section_id == \"methodology\":\n            # Look for methodology in sections\n            for section in holistic_answer.main_sections:\n                if \""
      }
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 562,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif section_id == \"supporting_data\":\n            return \"'",
      "code_snippet": "elif section_id == \"supporting_data\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif section_id == \"supporting_data\":\n            return \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif section_id == \"supporting_data\":\n            return \""
      }
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 564,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif section_id == \"quality_assessment\":\n            return f\"'",
      "code_snippet": "elif section_id == \"quality_assessment\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif section_id == \"quality_assessment\":\n            return f\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif section_id == \"quality_assessment\":\n            return f\""
      }
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 166,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"executive_summary\", \"title\": \"Executive Summary\", \"priority\": 1},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 167,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"key_findings\", \"title\": \"Key Findings\", \"priority\": 2},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 168,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"recommendations\", \"title\": \"Recommendations\", \"priority\": 3},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 169,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"next_steps\", \"title\": \"Next Steps\", \"priority\": 4},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 170,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"supporting_data\", \"title\": \"Supporting Data\", \"priority\": 5}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 172,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"style\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 180,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"overview\", \"title\": \"Technical Overview\", \"priority\": 1},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 181,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"methodology\", \"title\": \"Methodology\", \"priority\": 2},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 182,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"detailed_analysis\", \"title\": \"Detailed Analysis\", \"priority\": 3},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 183,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"implementation\", \"title\": \"Implementation\", \"priority\": 4},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 184,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"technical_specifications\", \"title\": \"Technical Specifications\", \"priority\": 5},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 185,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"appendices\", \"title\": \"Technical Appendices\", \"priority\": 6}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 187,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"style\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 196,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"title_slide\", \"title\": \"Title & Agenda\", \"priority\": 1},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 197,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"problem_statement\", \"title\": \"Problem Statement\", \"priority\": 2},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 198,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"analysis\", \"title\": \"Analysis\", \"priority\": 3},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 199,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"solutions\", \"title\": \"Solutions\", \"priority\": 4},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 200,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"recommendations\", \"title\": \"Recommendations\", \"priority\": 5},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 201,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"qa\", \"title\": \"Q&A\", \"priority\": 6}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 203,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"style\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 211,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"kpi_overview\", \"title\": \"Key Performance Indicators\", \"priority\": 1},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 212,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"metrics\", \"title\": \"Metrics & Analytics\", \"priority\": 2},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 213,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"trends\", \"title\": \"Trends & Patterns\", \"priority\": 3},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 214,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"alerts\", \"title\": \"Alerts & Notifications\", \"priority\": 4},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 215,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"actions\", \"title\": \"Recommended Actions\", \"priority\": 5}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 217,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"style\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 225,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"executive_summary\", \"title\": \"Executive Summary\", \"priority\": 1},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 226,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"detailed_analysis\", \"title\": \"Detailed Analysis\", \"priority\": 2},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 227,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"methodology\", \"title\": \"Methodology\", \"priority\": 3},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 228,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"findings\", \"title\": \"Key Findings\", \"priority\": 4},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 229,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"recommendations\", \"title\": \"Recommendations\", \"priority\": 5},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 230,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"implementation\", \"title\": \"Implementation Plan\", \"priority\": 6},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 231,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"quality_assessment\", \"title\": \"Quality Assessment\", \"priority\": 7},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 232,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{\"id\": \"appendices\", \"title\": \"Appendices\", \"priority\": 8}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 234,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"style\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 245,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "ExportFormat.MARKDOWN: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 246,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"headers\": {\"h1\": \"#\", \"h2\": \"##\", \"h3\": \"###\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 247,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"emphasis\": {\"bold\": \"**\", \"italic\": \"*\", \"code\": \"`\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 254,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "ExportFormat.HTML: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 255,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"headers\": {\"h1\": \"<h1>\", \"h2\": \"<h2>\", \"h3\": \"<h3>\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 256,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"emphasis\": {\"bold\": \"<strong>\", \"italic\": \"<em>\", \"code\": \"<code>\"},",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 263,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "ExportFormat.JSON: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 276,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"styling\": {\"responsive\": True, \"animated\": True, \"interactive_elements\": True}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 280,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"styling\": {\"responsive\": False, \"animated\": False, \"static_elements\": True}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 284,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"styling\": {\"responsive\": True, \"mobile_first\": True, \"touch_optimized\": True}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 427,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "component_versions={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 434,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "quality_metrics={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 519,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 541,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if section_id == \"executive_summary\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 543,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif section_id == \"key_findings\" or section_id == \"findings\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 545,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif section_id == \"recommendations\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 547,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif section_id == \"next_steps\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 549,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif section_id == \"detailed_analysis\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 553,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if section.section_type == \"analysis\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 556,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif section_id == \"methodology\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 562,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif section_id == \"supporting_data\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 564,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif section_id == \"quality_assessment\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 629,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "elements.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 637,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "elements.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 668,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "visualizations.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 677,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "visualizations.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 699,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "appendices.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 702,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"content\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 711,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "appendices.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 714,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"content\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 845,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 850,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 859,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"quality_metrics\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 864,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"metadata\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 1001,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 1002,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"header\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 1011,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 1020,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 1029,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"quality\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 1040,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"source_components\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 1072,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 505,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "template = self.structure_templates.get(context.structure_type, {})",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/final_answer_structuring.py",
      "line_number": 506,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "section_configs = template.get(\"sections\", [])",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 304,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'```json\\s*(.*?)\\s*```''",
      "code_snippet": "json_match = re.search(r'```json\\s*(.*?)\\s*```', content, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'```json\\s*(.*?)\\s*```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'```json\\s*(.*?)\\s*```'"
      }
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 406,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'```json\\s*(.*?)\\s*```''",
      "code_snippet": "json_match = re.search(r'```json\\s*(.*?)\\s*```', content, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'```json\\s*(.*?)\\s*```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'```json\\s*(.*?)\\s*```'"
      }
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 473,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'```json\\s*(.*?)\\s*```''",
      "code_snippet": "json_match = re.search(r'```json\\s*(.*?)\\s*```', content, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'```json\\s*(.*?)\\s*```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'```json\\s*(.*?)\\s*```'"
      }
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 300,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('{') and content.endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('{') and content.endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('{') and content.endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 402,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('{') and content.endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('{') and content.endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('{') and content.endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 469,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('{') and content.endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('{') and content.endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('{') and content.endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 553,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('-') or line.startswith('•') or line.startswith('*''",
      "code_snippet": "if line and (line.startswith('-') or line.startswith('•') or line.startswith('*')):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('-') or line.startswith('•') or line.startswith('*'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('-') or line.startswith('•') or line.startswith('*'"
      }
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 606,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('-') or line.startswith('•') or line.startswith('*''",
      "code_snippet": "if line and (line.startswith('-') or line.startswith('•') or line.startswith('*')):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('-') or line.startswith('•') or line.startswith('*'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('-') or line.startswith('•') or line.startswith('*'"
      }
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 657,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('-') or line.startswith('•') or line.startswith('*''",
      "code_snippet": "if line and (line.startswith('-') or line.startswith('•') or line.startswith('*')):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('-') or line.startswith('•') or line.startswith('*'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('-') or line.startswith('•') or line.startswith('*'"
      }
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 300,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 402,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 469,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 223,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "synthesis_metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 225,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"source_confidence\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 416,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 425,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"priority_matrix\": {\"high\": [], \"medium\": [], \"low\": []}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 527,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{json.dumps([{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 739,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/holistic_answer_synthesis_engine.py",
      "line_number": 782,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/intelligent_query_processor.py",
      "line_number": 203,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('```json''",
      "code_snippet": "if response_text.startswith('```json'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('```json'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('```json'"
      }
    },
    {
      "file_path": "core/query_processing/intelligent_query_processor.py",
      "line_number": 290,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('```json''",
      "code_snippet": "if response_text.startswith('```json'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('```json'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('```json'"
      }
    },
    {
      "file_path": "core/query_processing/intelligent_query_processor.py",
      "line_number": 363,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('```json''",
      "code_snippet": "if response_text.startswith('```json'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('```json'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('```json'"
      }
    },
    {
      "file_path": "core/query_processing/intelligent_query_processor.py",
      "line_number": 428,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('```json''",
      "code_snippet": "if response_text.startswith('```json'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('```json'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('```json'"
      }
    },
    {
      "file_path": "core/query_processing/intelligent_query_processor.py",
      "line_number": 205,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('```''",
      "code_snippet": "if response_text.endswith('```'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('```'"
      }
    },
    {
      "file_path": "core/query_processing/intelligent_query_processor.py",
      "line_number": 292,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('```''",
      "code_snippet": "if response_text.endswith('```'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('```'"
      }
    },
    {
      "file_path": "core/query_processing/intelligent_query_processor.py",
      "line_number": 365,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('```''",
      "code_snippet": "if response_text.endswith('```'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('```'"
      }
    },
    {
      "file_path": "core/query_processing/intelligent_query_processor.py",
      "line_number": 430,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('```''",
      "code_snippet": "if response_text.endswith('```'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('```'"
      }
    },
    {
      "file_path": "core/query_processing/intelligent_query_processor.py",
      "line_number": 478,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "requirements = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/intelligent_query_processor.py",
      "line_number": 113,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'process_query'",
      "code_snippet": "async def process_query(self, user_query: str, data_context: Optional[Dict] = None) -> EnhancedQuery:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_process_query, llm_process_query)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "process_query",
        "pattern": "process_"
      }
    },
    {
      "file_path": "core/query_processing/intent_analyzer.py",
      "line_number": 461,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('```json''",
      "code_snippet": "if response_text.startswith('```json'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('```json'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('```json'"
      }
    },
    {
      "file_path": "core/query_processing/intent_analyzer.py",
      "line_number": 463,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('```''",
      "code_snippet": "if response_text.endswith('```'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('```'"
      }
    },
    {
      "file_path": "core/query_processing/intent_analyzer.py",
      "line_number": 143,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/intent_analyzer.py",
      "line_number": 470,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "mapping = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/intent_analyzer.py",
      "line_number": 480,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "mapping = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 299,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'```json\\s*(.*?)\\s*```''",
      "code_snippet": "json_match = re.search(r'```json\\s*(.*?)\\s*```', content, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'```json\\s*(.*?)\\s*```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'```json\\s*(.*?)\\s*```'"
      }
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 370,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'```json\\s*(.*?)\\s*```''",
      "code_snippet": "json_match = re.search(r'```json\\s*(.*?)\\s*```', content, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'```json\\s*(.*?)\\s*```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'```json\\s*(.*?)\\s*```'"
      }
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 450,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'```json\\s*(.*?)\\s*```''",
      "code_snippet": "json_match = re.search(r'```json\\s*(.*?)\\s*```', content, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'```json\\s*(.*?)\\s*```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'```json\\s*(.*?)\\s*```'"
      }
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 295,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('{') and content.endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('{') and content.endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('{') and content.endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 366,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('{') and content.endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('{') and content.endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('{') and content.endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 446,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('{') and content.endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('{') and content.endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('{') and content.endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 617,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('-') or line.startswith('•') or line.startswith('*''",
      "code_snippet": "if line and (line.startswith('-') or line.startswith('•') or line.startswith('*')):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('-') or line.startswith('•') or line.startswith('*'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('-') or line.startswith('•') or line.startswith('*'"
      }
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 295,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 366,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 446,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('}''",
      "code_snippet": "if content.startswith('{') and content.endswith('}'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('}'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('}'"
      }
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 203,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if task_result.get(\"status\") == \"completed\" and task_result.get(\"result\"):",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 334,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{json.dumps([{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 405,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{json.dumps([{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 583,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{json.dumps([{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/multi_agent_result_integration.py",
      "line_number": 666,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test.py",
      "line_number": 392,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if results[\"complete_pipeline\"][\"success\"]'",
      "code_snippet": "if results[\"complete_pipeline\"][\"success\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if results[\"complete_pipeline\"][\"success\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if results[\"complete_pipeline\"][\"success\"]"
      }
    },
    {
      "file_path": "core/query_processing/phase3_integration_test.py",
      "line_number": 80,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "domain_knowledge.key_concepts = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test.py",
      "line_number": 116,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"market_agent\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test.py",
      "line_number": 161,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test.py",
      "line_number": 301,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test.py",
      "line_number": 304,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"phase_times\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test.py",
      "line_number": 311,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"results\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test.py",
      "line_number": 331,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test.py",
      "line_number": 332,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"holistic_answer\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test.py",
      "line_number": 349,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"final_structured_answer\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test.py",
      "line_number": 398,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "results[\"overall_assessment\"] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test.py",
      "line_number": 468,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test_simple.py",
      "line_number": 90,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "quality_metrics={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test_simple.py",
      "line_number": 252,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test_simple.py",
      "line_number": 255,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"phase_times\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test_simple.py",
      "line_number": 269,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test_simple.py",
      "line_number": 279,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/phase3_integration_test_simple.py",
      "line_number": 359,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 486,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if intent_analysis.complexity_level.value in [\"complex\", \"very_complex\"]'",
      "code_snippet": "if intent_analysis.complexity_level.value in [\"complex\", \"very_complex\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if intent_analysis.complexity_level.value in [\"complex\", \"very_complex\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if intent_analysis.complexity_level.value in [\"complex\", \"very_complex\"]"
      }
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 700,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('```json''",
      "code_snippet": "if response_text.startswith('```json'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('```json'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('```json'"
      }
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 702,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('```''",
      "code_snippet": "if response_text.endswith('```'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('```'"
      }
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 447,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 476,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if answer_structure.primary_template.target_audience != \"executive\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 481,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if answer_structure.primary_template.target_audience != \"technical\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 680,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "recommendations = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 49,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "template: str",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 347,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "template = answer_structure.primary_template",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 355,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "• Format: {template.format_type.value}",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 356,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "• Key Sections: {', '.join([s.title for s in template.sections[:5]])}",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 357,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "• Target Audience: {template.target_audience}",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 358,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "• Completion Time: {template.estimated_completion_time}",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 713,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "template=\"Add domain-specific terminology\",",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/query_enhancer.py",
      "line_number": 720,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "template=\"Specify analytical methodologies\",",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 350,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in intent for keyword in [\"strategy\", \"business\", \"roi\", \"executive\"]'",
      "code_snippet": "if any(keyword in intent for keyword in [\"strategy\", \"business\", \"roi\", \"executive\"]):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in intent for keyword in [\"strategy\", \"business\", \"roi\", \"executive\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in intent for keyword in [\"strategy\", \"business\", \"roi\", \"executive\"]"
      }
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 352,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in intent for keyword in [\"manage\", \"team\", \"resource\", \"plan\"]'",
      "code_snippet": "elif any(keyword in intent for keyword in [\"manage\", \"team\", \"resource\", \"plan\"]):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in intent for keyword in [\"manage\", \"team\", \"resource\", \"plan\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in intent for keyword in [\"manage\", \"team\", \"resource\", \"plan\"]"
      }
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 354,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in intent for keyword in [\"analyze\", \"data\", \"statistical\", \"metrics\"]'",
      "code_snippet": "elif any(keyword in intent for keyword in [\"analyze\", \"data\", \"statistical\", \"metrics\"]):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in intent for keyword in [\"analyze\", \"data\", \"statistical\", \"metrics\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in intent for keyword in [\"analyze\", \"data\", \"statistical\", \"metrics\"]"
      }
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 356,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in intent for keyword in [\"implement\", \"technical\", \"system\", \"code\"]'",
      "code_snippet": "elif any(keyword in intent for keyword in [\"implement\", \"technical\", \"system\", \"code\"]):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in intent for keyword in [\"implement\", \"technical\", \"system\", \"code\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in intent for keyword in [\"implement\", \"technical\", \"system\", \"code\"]"
      }
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 358,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in intent for keyword in [\"research\", \"study\", \"academic\", \"methodology\"]'",
      "code_snippet": "elif any(keyword in intent for keyword in [\"research\", \"study\", \"academic\", \"methodology\"]):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in intent for keyword in [\"research\", \"study\", \"academic\", \"methodology\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in intent for keyword in [\"research\", \"study\", \"academic\", \"methodology\"]"
      }
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 552,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in section.lower() for keyword in [\"summary\", \"recommendation\", \"impact\", \"roi\"]'",
      "code_snippet": "if any(keyword in section.lower() for keyword in [\"summary\", \"recommendation\", \"impact\", \"roi\"]):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in section.lower() for keyword in [\"summary\", \"recommendation\", \"impact\", \"roi\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in section.lower() for keyword in [\"summary\", \"recommendation\", \"impact\", \"roi\"]"
      }
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 491,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif target_length == \"detailed\":\n            # Add more detailed explanations\n            content = self._add_detailed_explanations(content)\n        \n        return content\n    \n    def _apply_focus_emphasis(self, content: str, user_profile: UserProfile, role_rules: Dict[str, Any], context: OptimizationContext) -> str:\n        \"'",
      "code_snippet": "elif target_length == \"detailed\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif target_length == \"detailed\":\n            # Add more detailed explanations\n            content = self._add_detailed_explanations(content)\n        \n        return content\n    \n    def _apply_focus_emphasis(self, content: str, user_profile: UserProfile, role_rules: Dict[str, Any], context: OptimizationContext) -> str:\n        \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif target_length == \"detailed\":\n            # Add more detailed explanations\n            content = self._add_detailed_explanations(content)\n        \n        return content\n    \n    def _apply_focus_emphasis(self, content: str, user_profile: UserProfile, role_rules: Dict[str, Any], context: OptimizationContext) -> str:\n        \""
      }
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 517,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif detail_level == \"technical_deep_dive\":\n            # Add technical details\n            content = self._add_technical_details(content)\n        elif detail_level == \"'",
      "code_snippet": "elif detail_level == \"technical_deep_dive\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif detail_level == \"technical_deep_dive\":\n            # Add technical details\n            content = self._add_technical_details(content)\n        elif detail_level == \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif detail_level == \"technical_deep_dive\":\n            # Add technical details\n            content = self._add_technical_details(content)\n        elif detail_level == \""
      }
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 161,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "OptimizationStrategy.CONTENT_BASED: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 163,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"weight_factors\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 170,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "OptimizationStrategy.COLLABORATIVE: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 172,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"weight_factors\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 179,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "OptimizationStrategy.CONTEXTUAL: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 181,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"weight_factors\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 188,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "OptimizationStrategy.ADAPTIVE: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 190,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"weight_factors\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 202,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "UserRole.EXECUTIVE: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 209,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "UserRole.MANAGER: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 216,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "UserRole.ANALYST: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 223,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "UserRole.ENGINEER: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 230,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "UserRole.RESEARCHER: {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 241,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 242,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"preference_learning\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 248,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"pattern_recognition\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 253,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"collaborative_filtering\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 303,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "personalization_metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 414,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 484,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if target_length == \"short\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 491,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif target_length == \"detailed\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 514,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if detail_level == \"executive_summary\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 517,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif detail_level == \"technical_deep_dive\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 520,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif detail_level == \"academic\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 652,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "context={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/query_processing/user_personalized_result_optimizer.py",
      "line_number": 728,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "stats = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/secure_file_manager.py",
      "line_number": 445,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if file_extension in ['.xlsx', '.xls']'",
      "code_snippet": "elif file_extension in ['.xlsx', '.xls']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if file_extension in ['.xlsx', '.xls']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if file_extension in ['.xlsx', '.xls']"
      }
    },
    {
      "file_path": "core/secure_file_manager.py",
      "line_number": 447,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif file_extension == '.json':\n            return pd.read_json(file_path)\n        else:\n            raise ValueError(f\"'",
      "code_snippet": "elif file_extension == '.json':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif file_extension == '.json':\n            return pd.read_json(file_path)\n        else:\n            raise ValueError(f\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif file_extension == '.json':\n            return pd.read_json(file_path)\n        else:\n            raise ValueError(f\""
      }
    },
    {
      "file_path": "core/secure_file_manager.py",
      "line_number": 314,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "session_files.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/secure_file_manager.py",
      "line_number": 369,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/secure_file_manager.py",
      "line_number": 443,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if file_extension == '.csv':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/secure_file_manager.py",
      "line_number": 447,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif file_extension == '.json':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/security_manager.py",
      "line_number": 239,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if file_path.suffix.lower() in ['.csv', '.txt', '.json']'",
      "code_snippet": "if file_path.suffix.lower() in ['.csv', '.txt', '.json']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if file_path.suffix.lower() in ['.csv', '.txt', '.json']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if file_path.suffix.lower() in ['.csv', '.txt', '.json']"
      }
    },
    {
      "file_path": "core/security_manager.py",
      "line_number": 375,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'patterns = ['urllib', 'requests', 'http', 'socket', 'urllib2''",
      "code_snippet": "network_patterns = ['urllib', 'requests', 'http', 'socket', 'urllib2']",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'patterns = ['urllib', 'requests', 'http', 'socket', 'urllib2'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "pattern.*=.*[\"\\'].*[\"\\']",
        "matched_text": "patterns = ['urllib', 'requests', 'http', 'socket', 'urllib2'"
      }
    },
    {
      "file_path": "core/security_manager.py",
      "line_number": 297,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.match(r'^[a-zA-Z0-9_-]+$''",
      "code_snippet": "if not re.match(r'^[a-zA-Z0-9_-]+$', session_id):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.match(r'^[a-zA-Z0-9_-]+$'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.match\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".match(r'^[a-zA-Z0-9_-]+$'"
      }
    },
    {
      "file_path": "core/security_manager.py",
      "line_number": 365,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(f'{func}\\\\s*\\\\(''",
      "code_snippet": "if re.search(f'{func}\\\\s*\\\\(', code):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(f'{func}\\\\s*\\\\('' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(f'{func}\\\\s*\\\\('"
      }
    },
    {
      "file_path": "core/security_manager.py",
      "line_number": 370,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'open\\s*\\(|file\\s*\\(|\\.write\\s*\\(|\\.read\\s*\\(''",
      "code_snippet": "if re.search(r'open\\s*\\(|file\\s*\\(|\\.write\\s*\\(|\\.read\\s*\\(', code):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'open\\s*\\(|file\\s*\\(|\\.write\\s*\\(|\\.read\\s*\\('' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'open\\s*\\(|file\\s*\\(|\\.write\\s*\\(|\\.read\\s*\\('"
      }
    },
    {
      "file_path": "core/security_manager.py",
      "line_number": 390,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/security_manager.py",
      "line_number": 454,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "log_entry = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/security_manager.py",
      "line_number": 472,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "summary = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/security_manager.py",
      "line_number": 293,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'validate_session'",
      "code_snippet": "def validate_session(self, session_id: str) -> bool:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_validate_session, llm_validate_session)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "validate_session",
        "pattern": "validate_"
      }
    },
    {
      "file_path": "core/security_manager.py",
      "line_number": 329,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_code_security'",
      "code_snippet": "def check_code_security(self, code: str) -> Tuple[bool, List[str], float]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_code_security, llm_check_code_security)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_code_security",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/security_manager.py",
      "line_number": 415,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'validate_session_token'",
      "code_snippet": "def validate_session_token(self, token: str) -> Optional[Dict[str, Any]]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_validate_session_token, llm_validate_session_token)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "validate_session_token",
        "pattern": "validate_"
      }
    },
    {
      "file_path": "core/session_data_manager.py",
      "line_number": 179,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'patterns = re.findall(r'(\\w+\\.(csv|xlsx|xls|json))''",
      "code_snippet": "file_patterns = re.findall(r'(\\w+\\.(csv|xlsx|xls|json))', user_request.lower())",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'patterns = re.findall(r'(\\w+\\.(csv|xlsx|xls|json))'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "pattern.*=.*[\"\\'].*[\"\\']",
        "matched_text": "patterns = re.findall(r'(\\w+\\.(csv|xlsx|xls|json))'"
      }
    },
    {
      "file_path": "core/session_data_manager.py",
      "line_number": 265,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('.xlsx') or data_id.endswith('.xls''",
      "code_snippet": "if data_id.endswith('.xlsx') or data_id.endswith('.xls'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('.xlsx') or data_id.endswith('.xls'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('.xlsx') or data_id.endswith('.xls'"
      }
    },
    {
      "file_path": "core/session_data_manager.py",
      "line_number": 268,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('.csv''",
      "code_snippet": "elif data_id.endswith('.csv'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('.csv'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('.csv'"
      }
    },
    {
      "file_path": "core/session_data_manager.py",
      "line_number": 448,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('.json''",
      "code_snippet": "if file_path.is_file() and not file_path.name.endswith('.json'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('.json'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('.json'"
      }
    },
    {
      "file_path": "core/session_data_manager.py",
      "line_number": 157,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "domain_keywords = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/session_data_manager.py",
      "line_number": 307,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "context = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/session_data_manager.py",
      "line_number": 403,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/session_data_manager.py",
      "line_number": 466,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/session_data_manager.py",
      "line_number": 487,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/session_data_manager.py",
      "line_number": 377,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_session_age'",
      "code_snippet": "def check_session_age(self, session_id: Optional[str] = None) -> Dict[str, Any]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_session_age, llm_check_session_age)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_session_age",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/session_data_manager_old.py",
      "line_number": 165,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'patterns = re.findall(r'(\\w+\\.(csv|xlsx|xls|json))''",
      "code_snippet": "file_patterns = re.findall(r'(\\w+\\.(csv|xlsx|xls|json))', user_request.lower())",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'patterns = re.findall(r'(\\w+\\.(csv|xlsx|xls|json))'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "pattern.*=.*[\"\\'].*[\"\\']",
        "matched_text": "patterns = re.findall(r'(\\w+\\.(csv|xlsx|xls|json))'"
      }
    },
    {
      "file_path": "core/session_data_manager_old.py",
      "line_number": 239,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('.xlsx') or data_id.endswith('.xls''",
      "code_snippet": "if data_id.endswith('.xlsx') or data_id.endswith('.xls'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('.xlsx') or data_id.endswith('.xls'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('.xlsx') or data_id.endswith('.xls'"
      }
    },
    {
      "file_path": "core/session_data_manager_old.py",
      "line_number": 242,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('.csv''",
      "code_snippet": "elif data_id.endswith('.csv'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('.csv'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('.csv'"
      }
    },
    {
      "file_path": "core/session_data_manager_old.py",
      "line_number": 407,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('.json''",
      "code_snippet": "if file_path.is_file() and not file_path.name.endswith('.json'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('.json'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('.json'"
      }
    },
    {
      "file_path": "core/session_data_manager_old.py",
      "line_number": 143,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "domain_keywords = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/session_data_manager_old.py",
      "line_number": 267,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "context = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/session_data_manager_old.py",
      "line_number": 363,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/session_data_manager_old.py",
      "line_number": 415,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/session_data_manager_old.py",
      "line_number": 337,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_session_age'",
      "code_snippet": "def check_session_age(self, session_id: Optional[str] = None) -> Dict[str, Any]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_session_age, llm_check_session_age)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_session_age",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/shared_knowledge_bank.py",
      "line_number": 373,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif search_type == \"graph\":\n            # 그래프 기반 검색\n            for node_id, node in self.knowledge_graph.nodes.items():\n                if query.lower() in node.content.lower():\n                    related_nodes = self.knowledge_graph.find_related_nodes(node_id)\n                    results.append({\n                        ''",
      "code_snippet": "elif search_type == \"graph\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif search_type == \"graph\":\n            # 그래프 기반 검색\n            for node_id, node in self.knowledge_graph.nodes.items():\n                if query.lower() in node.content.lower():\n                    related_nodes = self.knowledge_graph.find_related_nodes(node_id)\n                    results.append({\n                        '' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif search_type == \"graph\":\n            # 그래프 기반 검색\n            for node_id, node in self.knowledge_graph.nodes.items():\n                if query.lower() in node.content.lower():\n                    related_nodes = self.knowledge_graph.find_related_nodes(node_id)\n                    results.append({\n                        '"
      }
    },
    {
      "file_path": "core/shared_knowledge_bank.py",
      "line_number": 170,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(query_embedding.astype('float32''",
      "code_snippet": "scores, indices = self.index.search(query_embedding.astype('float32'), top_k)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(query_embedding.astype('float32'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(query_embedding.astype('float32'"
      }
    },
    {
      "file_path": "core/shared_knowledge_bank.py",
      "line_number": 42,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/shared_knowledge_bank.py",
      "line_number": 96,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/shared_knowledge_bank.py",
      "line_number": 99,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/shared_knowledge_bank.py",
      "line_number": 206,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "st.session_state[self.session_key] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/shared_knowledge_bank.py",
      "line_number": 359,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if search_type == \"embedding\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/shared_knowledge_bank.py",
      "line_number": 365,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "results.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/shared_knowledge_bank.py",
      "line_number": 373,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif search_type == \"graph\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/shared_knowledge_bank.py",
      "line_number": 378,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "results.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/shared_knowledge_bank.py",
      "line_number": 404,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "stats = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/shared_knowledge_bank.py",
      "line_number": 421,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/shared_knowledge_bank.py",
      "line_number": 437,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/shared_knowledge_bank.py",
      "line_number": 641,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "color_map = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 192,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in query_lower for keyword in ['요약', '기술통계', 'summary', 'describe']'",
      "code_snippet": "if any(keyword in query_lower for keyword in ['요약', '기술통계', 'summary', 'describe']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in query_lower for keyword in ['요약', '기술통계', 'summary', 'describe']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in query_lower for keyword in ['요약', '기술통계', 'summary', 'describe']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 196,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in query_lower for keyword in ['상관관계', 'correlation', '관계']'",
      "code_snippet": "if any(keyword in query_lower for keyword in ['상관관계', 'correlation', '관계']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in query_lower for keyword in ['상관관계', 'correlation', '관계']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in query_lower for keyword in ['상관관계', 'correlation', '관계']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 217,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in query_lower for keyword in ['분포', 'distribution', '히스토그램']'",
      "code_snippet": "if any(keyword in query_lower for keyword in ['분포', 'distribution', '히스토그램']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in query_lower for keyword in ['분포', 'distribution', '히스토그램']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in query_lower for keyword in ['분포', 'distribution', '히스토그램']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 233,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in query_lower for keyword in ['이상값', 'outlier', '특이값']'",
      "code_snippet": "if any(keyword in query_lower for keyword in ['이상값', 'outlier', '특이값']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in query_lower for keyword in ['이상값', 'outlier', '특이값']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in query_lower for keyword in ['이상값', 'outlier', '특이값']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 274,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if len(data.select_dtypes(include=['object']'",
      "code_snippet": "if len(data.select_dtypes(include=['object']).columns) > 0:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if len(data.select_dtypes(include=['object']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if len(data.select_dtypes(include=['object']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 452,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in query_lower for keyword in ['추세', 'trend', '경향']'",
      "code_snippet": "if any(keyword in query_lower for keyword in ['추세', 'trend', '경향']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in query_lower for keyword in ['추세', 'trend', '경향']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in query_lower for keyword in ['추세', 'trend', '경향']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 474,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in query_lower for keyword in ['계절성', 'seasonal', '주기']'",
      "code_snippet": "if any(keyword in query_lower for keyword in ['계절성', 'seasonal', '주기']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in query_lower for keyword in ['계절성', 'seasonal', '주기']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in query_lower for keyword in ['계절성', 'seasonal', '주기']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 494,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in query_lower for keyword in ['변동성', 'volatility', '변화']'",
      "code_snippet": "if any(keyword in query_lower for keyword in ['변동성', 'volatility', '변화']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in query_lower for keyword in ['변동성', 'volatility', '변화']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in query_lower for keyword in ['변동성', 'volatility', '변화']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 514,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in query_lower for keyword in ['상관관계', 'correlation', '관계']'",
      "code_snippet": "if any(keyword in query_lower for keyword in ['상관관계', 'correlation', '관계']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in query_lower for keyword in ['상관관계', 'correlation', '관계']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in query_lower for keyword in ['상관관계', 'correlation', '관계']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 717,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in query_lower for keyword in ['키워드', 'keyword', '단어', '용어']'",
      "code_snippet": "if any(keyword in query_lower for keyword in ['키워드', 'keyword', '단어', '용어']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in query_lower for keyword in ['키워드', 'keyword', '단어', '용어']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in query_lower for keyword in ['키워드', 'keyword', '단어', '용어']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 723,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in query_lower for keyword in ['감정', 'sentiment', '긍정', '부정']'",
      "code_snippet": "if any(keyword in query_lower for keyword in ['감정', 'sentiment', '긍정', '부정']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in query_lower for keyword in ['감정', 'sentiment', '긍정', '부정']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in query_lower for keyword in ['감정', 'sentiment', '긍정', '부정']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 729,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in query_lower for keyword in ['길이', 'length', '문장', '단어수']'",
      "code_snippet": "if any(keyword in query_lower for keyword in ['길이', 'length', '문장', '단어수']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in query_lower for keyword in ['길이', 'length', '문장', '단어수']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in query_lower for keyword in ['길이', 'length', '문장', '단어수']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 735,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in query_lower for keyword in ['언어', 'language', '특성']'",
      "code_snippet": "if any(keyword in query_lower for keyword in ['언어', 'language', '특성']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in query_lower for keyword in ['언어', 'language', '특성']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in query_lower for keyword in ['언어', 'language', '특성']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 1027,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in query_lower for keyword in ['메타데이터', 'metadata', '정보', 'exif']'",
      "code_snippet": "if any(keyword in query_lower for keyword in ['메타데이터', 'metadata', '정보', 'exif']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in query_lower for keyword in ['메타데이터', 'metadata', '정보', 'exif']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in query_lower for keyword in ['메타데이터', 'metadata', '정보', 'exif']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 1033,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(keyword in query_lower for keyword in ['크기', 'size', '해상도', 'resolution', '형식', 'format']'",
      "code_snippet": "if any(keyword in query_lower for keyword in ['크기', 'size', '해상도', 'resolution', '형식', 'format']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(keyword in query_lower for keyword in ['크기', 'size', '해상도', 'resolution', '형식', 'format']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(keyword in query_lower for keyword in ['크기', 'size', '해상도', 'resolution', '형식', 'format']"
      }
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 114,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "characteristics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 128,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "characteristics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 178,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "results[\"basic_info\"] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 223,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "distribution_stats[col] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 245,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "outlier_analysis[col] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 320,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 369,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "characteristics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 441,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "results[\"basic_info\"] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 464,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "trend_analysis[col] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 483,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "seasonal_analysis[col] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 504,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "volatility_analysis[col] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 590,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 629,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "text_analysis[col] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 637,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "characteristics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 655,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "characteristics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 666,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "characteristics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 796,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 822,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 851,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 864,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"char_length_stats\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 871,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"word_length_stats\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 892,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 901,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 936,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "characteristics = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 1107,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 1122,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata_info = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 1144,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "format_analysis = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 1162,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 1262,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "structured_data = pd.DataFrame({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/specialized_data_agents.py",
      "line_number": 1312,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/streaming/a2a_sse_client.py",
      "line_number": 191,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('event: ''",
      "code_snippet": "if line.startswith('event: '):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('event: '' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('event: '"
      }
    },
    {
      "file_path": "core/streaming/a2a_sse_client.py",
      "line_number": 193,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('data: ''",
      "code_snippet": "elif line.startswith('data: '):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('data: '' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('data: '"
      }
    },
    {
      "file_path": "core/streaming/a2a_sse_client.py",
      "line_number": 78,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "headers = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/a2a_sse_client.py",
      "line_number": 86,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/a2a_sse_client.py",
      "line_number": 267,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "payload = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/a2a_sse_client.py",
      "line_number": 308,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/a2a_sse_client.py",
      "line_number": 314,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/a2a_sse_client.py",
      "line_number": 321,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/a2a_sse_client.py",
      "line_number": 327,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'validate_all_agents'",
      "code_snippet": "async def validate_all_agents(self) -> Dict[str, Dict[str, Any]]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_validate_all_agents, llm_validate_all_agents)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "validate_all_agents",
        "pattern": "validate_"
      }
    },
    {
      "file_path": "core/streaming/mcp_stdio_bridge.py",
      "line_number": 219,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "jsonrpc_request = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/mcp_stdio_bridge.py",
      "line_number": 230,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/mcp_stdio_bridge.py",
      "line_number": 252,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/mcp_stdio_bridge.py",
      "line_number": 289,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/mcp_stdio_bridge.py",
      "line_number": 305,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/mcp_stdio_bridge.py",
      "line_number": 334,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/mcp_stdio_bridge.py",
      "line_number": 373,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/mcp_stdio_bridge.py",
      "line_number": 383,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/mcp_stdio_bridge.py",
      "line_number": 393,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/mcp_stdio_bridge.py",
      "line_number": 403,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/mcp_stdio_bridge.py",
      "line_number": 414,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/mcp_stdio_bridge.py",
      "line_number": 439,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/mcp_stdio_bridge.py",
      "line_number": 504,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/streaming/optimized_streaming_pipeline.py",
      "line_number": 61,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "sse_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/optimized_streaming_pipeline.py",
      "line_number": 130,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.network_conditions: Dict[str, float] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/optimized_streaming_pipeline.py",
      "line_number": 211,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/optimized_streaming_pipeline.py",
      "line_number": 241,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.performance_history.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/optimized_streaming_pipeline.py",
      "line_number": 279,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.buffer_stats = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/optimized_streaming_pipeline.py",
      "line_number": 365,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/optimized_streaming_pipeline.py",
      "line_number": 628,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "quality_metric = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/optimized_streaming_pipeline.py",
      "line_number": 711,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "results = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/optimized_streaming_pipeline.py",
      "line_number": 713,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"metrics\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/optimized_streaming_pipeline.py",
      "line_number": 723,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"buffer_config\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/optimized_streaming_pipeline.py",
      "line_number": 754,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/optimized_streaming_pipeline.py",
      "line_number": 758,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"metrics\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/optimized_streaming_pipeline.py",
      "line_number": 814,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 273,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if event_type in ['a2a_response', 'mcp_sse_response', 'mcp_stdio_response']'",
      "code_snippet": "elif event_type in ['a2a_response', 'mcp_sse_response', 'mcp_stdio_response']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if event_type in ['a2a_response', 'mcp_sse_response', 'mcp_stdio_response']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if event_type in ['a2a_response', 'mcp_sse_response', 'mcp_stdio_response']"
      }
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 295,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if event_type in ['mcp_sse_response', 'mcp_stdio_response']'",
      "code_snippet": "elif event_type in ['mcp_sse_response', 'mcp_stdio_response']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if event_type in ['mcp_sse_response', 'mcp_stdio_response']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if event_type in ['mcp_sse_response', 'mcp_stdio_response']"
      }
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 261,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif event_type == 'routing':\n            if self.config.show_agent_names:\n                ui_event.update({\n                    ''",
      "code_snippet": "elif event_type == 'routing':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif event_type == 'routing':\n            if self.config.show_agent_names:\n                ui_event.update({\n                    '' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif event_type == 'routing':\n            if self.config.show_agent_names:\n                ui_event.update({\n                    '"
      }
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 416,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif event_type == 'orchestration_start':\n                    chat_container.update_streaming_message(\n                        response_placeholder,\n                        content.get(''",
      "code_snippet": "elif event_type == 'orchestration_start':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif event_type == 'orchestration_start':\n                    chat_container.update_streaming_message(\n                        response_placeholder,\n                        content.get('' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif event_type == 'orchestration_start':\n                    chat_container.update_streaming_message(\n                        response_placeholder,\n                        content.get('"
      }
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 422,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif event_type == 'agent_routing' and self.config.show_agent_names:\n                    routing_message = content.get(''",
      "code_snippet": "elif event_type == 'agent_routing' and self.config.show_agent_names:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif event_type == 'agent_routing' and self.config.show_agent_names:\n                    routing_message = content.get('' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif event_type == 'agent_routing' and self.config.show_agent_names:\n                    routing_message = content.get('"
      }
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 429,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif event_type == 'error':\n                    error_message = f\"'",
      "code_snippet": "elif event_type == 'error':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif event_type == 'error':\n                    error_message = f\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif event_type == 'error':\n                    error_message = f\""
      }
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 316,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'endswith('_error''",
      "code_snippet": "elif event_type.endswith('_error'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'endswith('_error'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "endswith\\([\"\\'].*[\"\\']",
        "matched_text": "endswith('_error'"
      }
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 394,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'response = \"\"'",
      "code_snippet": "accumulated_response = \"\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'response = \"\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "response\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "response = \"\""
      }
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 430,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message = f\"❌ 오류: {content.get('error', 'Unknown error')}\"'",
      "code_snippet": "error_message = f\"❌ 오류: {content.get('error', 'Unknown error')}\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message = f\"❌ 오류: {content.get('error', 'Unknown error')}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message = f\"❌ 오류: {content.get('error', 'Unknown error')}\""
      }
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 87,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.stats = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 156,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 173,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 175,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'content': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 202,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 204,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'content': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 218,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 220,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'content': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 243,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "ui_event = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 251,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if event_type == 'orchestration_start':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 254,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'content': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 261,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif event_type == 'routing':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 265,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'content': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 279,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if event_type == 'a2a_response' and isinstance(content, dict):",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 288,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "ui_event['content'] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 298,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if event_type == 'mcp_stdio_response':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 310,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "ui_event['content'] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 319,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'content': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 402,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if event_type == 'agent_response':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 416,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif event_type == 'orchestration_start':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 422,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif event_type == 'agent_routing' and self.config.show_agent_names:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 429,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif event_type == 'error':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/streaming/streaming_orchestrator.py",
      "line_number": 596,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 506,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('data: ''",
      "code_snippet": "if line.startswith('data: '):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('data: '' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('data: '"
      }
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 581,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('data: ''",
      "code_snippet": "if line.startswith('data: '):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('data: '' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('data: '"
      }
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 618,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('data: ''",
      "code_snippet": "if line_str.startswith('data: '):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('data: '' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('data: '"
      }
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 115,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.stats = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 403,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 433,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 468,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 476,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 490,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "a2a_request = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 513,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 538,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 587,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 624,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 649,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 682,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 697,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 718,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'data': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 733,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "content={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 745,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if event.get('event') == 'a2a_response':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 769,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if agent.status == \"online\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 783,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 802,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "agent_stats[agent_type.value] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 808,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 813,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'message_stats': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/streaming/unified_message_broker.py",
      "line_number": 869,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 136,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"체크 중 예외 발생\"'",
      "code_snippet": "message=\"체크 중 예외 발생\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"체크 중 예외 발생\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"체크 중 예외 발생\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 180,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"정상 응답 (포트 {port})\"'",
      "code_snippet": "message=f\"정상 응답 (포트 {port})\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"정상 응답 (포트 {port})\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"정상 응답 (포트 {port})\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 190,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"HTTP {response.status} 오류\"'",
      "code_snippet": "message=f\"HTTP {response.status} 오류\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"HTTP {response.status} 오류\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"HTTP {response.status} 오류\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 192,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"HTTP {response.status}\"'",
      "code_snippet": "error_message=f\"HTTP {response.status}\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"HTTP {response.status}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"HTTP {response.status}\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 201,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"응답 시간 초과\"'",
      "code_snippet": "message=\"응답 시간 초과\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"응답 시간 초과\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"응답 시간 초과\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 202,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"Timeout\"'",
      "code_snippet": "error_message=\"Timeout\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"Timeout\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"Timeout\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 210,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"연결 불가\"'",
      "code_snippet": "message=\"연결 불가\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"연결 불가\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"연결 불가\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 211,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"Connection refused\"'",
      "code_snippet": "error_message=\"Connection refused\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"Connection refused\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"Connection refused\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 219,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"체크 실패\"'",
      "code_snippet": "message=\"체크 실패\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"체크 실패\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"체크 실패\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 257,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"체크 중 예외 발생\"'",
      "code_snippet": "message=\"체크 중 예외 발생\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"체크 중 예외 발생\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"체크 중 예외 발생\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 273,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"API 키가 설정되지 않음\"'",
      "code_snippet": "message=\"API 키가 설정되지 않음\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"API 키가 설정되지 않음\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"API 키가 설정되지 않음\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 274,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"No API key\"'",
      "code_snippet": "error_message=\"No API key\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"No API key\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"No API key\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 307,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"API 정상 응답\"'",
      "code_snippet": "message=\"API 정상 응답\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"API 정상 응답\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"API 정상 응답\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 317,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"API 오류: HTTP {response.status}\"'",
      "code_snippet": "message=f\"API 오류: HTTP {response.status}\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"API 오류: HTTP {response.status}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"API 오류: HTTP {response.status}\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 328,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"API 호출 실패\"'",
      "code_snippet": "message=\"API 호출 실패\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"API 호출 실패\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"API 호출 실패\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 352,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"Langfuse 정상 응답\"'",
      "code_snippet": "message=\"Langfuse 정상 응답\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"Langfuse 정상 응답\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"Langfuse 정상 응답\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 362,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"HTTP {response.status} 오류\"'",
      "code_snippet": "message=f\"HTTP {response.status} 오류\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"HTTP {response.status} 오류\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"HTTP {response.status} 오류\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 372,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"연결 실패\"'",
      "code_snippet": "message=\"연결 실패\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"연결 실패\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"연결 실패\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 394,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"Streamlit 정상 실행\"'",
      "code_snippet": "message=\"Streamlit 정상 실행\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"Streamlit 정상 실행\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"Streamlit 정상 실행\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 403,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"HTTP {response.status} 오류\"'",
      "code_snippet": "message=f\"HTTP {response.status} 오류\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"HTTP {response.status} 오류\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"HTTP {response.status} 오류\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 413,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"연결 실패\"'",
      "code_snippet": "message=\"연결 실패\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"연결 실패\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"연결 실패\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 468,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"CPU 사용률 {cpu_percent:.1f}%\"'",
      "code_snippet": "message=f\"CPU 사용률 {cpu_percent:.1f}%\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"CPU 사용률 {cpu_percent:.1f}%\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"CPU 사용률 {cpu_percent:.1f}%\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 482,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"CPU 정보 수집 실패\"'",
      "code_snippet": "message=\"CPU 정보 수집 실패\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"CPU 정보 수집 실패\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"CPU 정보 수집 실패\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 513,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"메모리 사용률 {memory.percent:.1f}%\"'",
      "code_snippet": "message=f\"메모리 사용률 {memory.percent:.1f}%\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"메모리 사용률 {memory.percent:.1f}%\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"메모리 사용률 {memory.percent:.1f}%\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 528,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"메모리 정보 수집 실패\"'",
      "code_snippet": "message=\"메모리 정보 수집 실패\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"메모리 정보 수집 실패\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"메모리 정보 수집 실패\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 560,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=f\"디스크 사용률 {disk_percent:.1f}%\"'",
      "code_snippet": "message=f\"디스크 사용률 {disk_percent:.1f}%\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=f\"디스크 사용률 {disk_percent:.1f}%\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=f\"디스크 사용률 {disk_percent:.1f}%\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 575,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"디스크 정보 수집 실패\"'",
      "code_snippet": "message=\"디스크 정보 수집 실패\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"디스크 정보 수집 실패\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"디스크 정보 수집 실패\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 593,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"네트워크 연결 정상\"'",
      "code_snippet": "message=\"네트워크 연결 정상\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"네트워크 연결 정상\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"네트워크 연결 정상\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 608,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\"네트워크 연결 실패\"'",
      "code_snippet": "message=\"네트워크 연결 실패\",",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\"네트워크 연결 실패\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\"네트워크 연결 실패\""
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 103,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.agents = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 228,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.services = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 286,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 469,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "details={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 514,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "details={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 561,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "details={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 594,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "details={",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 794,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 835,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 117,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_all_agents'",
      "code_snippet": "async def check_all_agents(self) -> Dict[str, HealthCheckResult]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_all_agents, llm_check_all_agents)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_all_agents",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 243,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_all_services'",
      "code_snippet": "async def check_all_services(self) -> Dict[str, HealthCheckResult]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_all_services, llm_check_all_services)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_all_services",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 421,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_system_resources'",
      "code_snippet": "def check_system_resources(self) -> Dict[str, HealthCheckResult]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_system_resources, llm_check_system_resources)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_system_resources",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/system_health_checker.py",
      "line_number": 635,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_system_health'",
      "code_snippet": "async def check_system_health(self) -> SystemHealthReport:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_system_health, llm_check_system_health)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_system_health",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 392,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if ext in [\"xlsx\", \"xls\"]'",
      "code_snippet": "elif ext in [\"xlsx\", \"xls\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if ext in [\"xlsx\", \"xls\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if ext in [\"xlsx\", \"xls\"]"
      }
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 394,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif ext == \"json\":\n            return load_json(file_path)\n        elif ext == \"'",
      "code_snippet": "elif ext == \"json\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif ext == \"json\":\n            return load_json(file_path)\n        elif ext == \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif ext == \"json\":\n            return load_json(file_path)\n        elif ext == \""
      }
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 398,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif ext == \"pkl\":\n            return load_pickle(file_path)\n        else:\n            return f\"'",
      "code_snippet": "elif ext == \"pkl\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif ext == \"pkl\":\n            return load_pickle(file_path)\n        else:\n            return f\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif ext == \"pkl\":\n            return load_pickle(file_path)\n        else:\n            return f\""
      }
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 315,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'pattern: str = \"*.csv\"'",
      "code_snippet": "pattern: str = \"*.csv\",",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'pattern: str = \"*.csv\"' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "pattern.*=.*[\"\\'].*[\"\\']",
        "matched_text": "pattern: str = \"*.csv\""
      }
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 125,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('.''",
      "code_snippet": "if not show_hidden and item.startswith('.'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('.'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('.'"
      }
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 203,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('.''",
      "code_snippet": "if not show_hidden and item.startswith('.'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('.'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('.'"
      }
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 213,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "records.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 224,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "records.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 236,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "records.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 246,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "records.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 291,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "file_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 390,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if ext == \"csv\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 394,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif ext == \"json\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 396,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif ext == \"parquet\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/tools/data_loader.py",
      "line_number": 398,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif ext == \"pkl\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/tools/eda.py",
      "line_number": 272,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "artifact = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/h2o.py",
      "line_number": 484,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'switched off using the exclude_algos argument. This is useful if you already have some idea of the algorithms that will do well on your dataset, though sometimes this can lead to a loss of performance because having more diversity among the set of models generally increases the performance of the Stacked Ensembles. As a first step you could leave all the algorithms on, and examine their performance characteristics (e.g. prediction speed) to get a sense of what might be practically useful in your specific use-case'",
      "code_snippet": "Particular algorithms (or groups of algorithms) can be switched off using the exclude_algos argument. This is useful if you already have some idea of the algorithms that will do well on your dataset, though sometimes this can lead to a loss of performance because having more diversity among the set of models generally increases the performance of the Stacked Ensembles. As a first step you could leave all the algorithms on, and examine their performance characteristics (e.g. prediction speed) to get a sense of what might be practically useful in your specific use-case, and then turn off algorithms that are not interesting or useful to you. We recommend using the H2O Model Explainability interface to explore and further evaluate your AutoML models, which can inform your choice of model (if you have other goals beyond simply maximizing model accuracy).",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'switched off using the exclude_algos argument. This is useful if you already have some idea of the algorithms that will do well on your dataset, though sometimes this can lead to a loss of performance because having more diversity among the set of models generally increases the performance of the Stacked Ensembles. As a first step you could leave all the algorithms on, and examine their performance characteristics (e.g. prediction speed) to get a sense of what might be practically useful in your specific use-case' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "switch.*case",
        "matched_text": "switched off using the exclude_algos argument. This is useful if you already have some idea of the algorithms that will do well on your dataset, though sometimes this can lead to a loss of performance because having more diversity among the set of models generally increases the performance of the Stacked Ensembles. As a first step you could leave all the algorithms on, and examine their performance characteristics (e.g. prediction speed) to get a sense of what might be practically useful in your specific use-case"
      }
    },
    {
      "file_path": "core/tools/h2o.py",
      "line_number": 110,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "mlflow.log_params({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/h2o.py",
      "line_number": 169,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "model_results = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/h2o.py",
      "line_number": 188,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "output = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_setup.py",
      "line_number": 121,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "description_enhancements = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_setup.py",
      "line_number": 150,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "specific_tools = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_setup.py",
      "line_number": 166,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if original_desc and original_desc.strip() and original_desc != \"No description\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_setup.py",
      "line_number": 208,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if \"url\" in server_config and server_config.get(\"transport\") == \"sse\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_tools.py",
      "line_number": 56,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if server_config.get(\"transport\") == \"sse\" and \"url\" in server_config:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_tools.py",
      "line_number": 235,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "mcp_servers = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_tools.py",
      "line_number": 261,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "role_name_mapping = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_tools.py",
      "line_number": 275,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "role_mcp_mapping = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_tools.py",
      "line_number": 294,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "port_mapping = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_tools.py",
      "line_number": 306,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "mcp_configs[tool_name] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_tools.py",
      "line_number": 332,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {\"available\": False, \"tools\": [], \"error\": \"Configuration not found\"}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_tools.py",
      "line_number": 347,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "available_tools.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_tools.py",
      "line_number": 353,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "available_tools.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_tools.py",
      "line_number": 359,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_tools.py",
      "line_number": 366,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {\"available\": False, \"tools\": [], \"error\": \"No configuration specified\"}",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_tools.py",
      "line_number": 389,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "agent_recommendations = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mcp_tools.py",
      "line_number": 53,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'check_single_server'",
      "code_snippet": "async def check_single_server(server_name: str, server_config: Dict[str, Any]) -> Tuple[str, bool]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_check_single_server, llm_check_single_server)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "check_single_server",
        "pattern": "check_"
      }
    },
    {
      "file_path": "core/tools/mlflow.py",
      "line_number": 212,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message = f\"Predictions returned. Sample: {sample_json}\"'",
      "code_snippet": "message = f\"Predictions returned. Sample: {sample_json}\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message = f\"Predictions returned. Sample: {sample_json}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message = f\"Predictions returned. Sample: {sample_json}\""
      }
    },
    {
      "file_path": "core/tools/mlflow.py",
      "line_number": 217,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message = f\"Predictions returned. Sample: {sample_json}\"'",
      "code_snippet": "message = f\"Predictions returned. Sample: {sample_json}\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message = f\"Predictions returned. Sample: {sample_json}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message = f\"Predictions returned. Sample: {sample_json}\""
      }
    },
    {
      "file_path": "core/tools/mlflow.py",
      "line_number": 222,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message = f\"Predictions returned. First 5: {preds_list[:5]}\"'",
      "code_snippet": "message = f\"Predictions returned. First 5: {preds_list[:5]}\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message = f\"Predictions returned. First 5: {preds_list[:5]}\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message = f\"Predictions returned. First 5: {preds_list[:5]}\""
      }
    },
    {
      "file_path": "core/tools/mlflow.py",
      "line_number": 227,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message = f\"Predictions returned (unrecognized type). Example: {preds_str[:100]}...\"'",
      "code_snippet": "message = f\"Predictions returned (unrecognized type). Example: {preds_str[:100]}...\"",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message = f\"Predictions returned (unrecognized type). Example: {preds_str[:100]}...\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message = f\"Predictions returned (unrecognized type). Example: {preds_str[:100]}...\""
      }
    },
    {
      "file_path": "core/tools/mlflow.py",
      "line_number": 114,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "run_info = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mlflow.py",
      "line_number": 358,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "artifacts_data.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mlflow.py",
      "line_number": 453,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mlflow.py",
      "line_number": 507,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "models_data.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mlflow.py",
      "line_number": 513,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/mlflow.py",
      "line_number": 558,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/python_tool.py",
      "line_number": 230,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if os.getenv(\"DEBUG_MODE\", \"false\").lower() == \"true\"'",
      "code_snippet": "if os.getenv(\"DEBUG_MODE\", \"false\").lower() == \"true\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if os.getenv(\"DEBUG_MODE\", \"false\").lower() == \"true\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*\\.lower\\(\\).*==.*[\"\\'].*[\"\\']",
        "matched_text": "if os.getenv(\"DEBUG_MODE\", \"false\").lower() == \"true\""
      }
    },
    {
      "file_path": "core/tools/python_tool.py",
      "line_number": 56,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "base_tool.globals.update({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/python_tool.py",
      "line_number": 230,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if os.getenv(\"DEBUG_MODE\", \"false\").lower() == \"true\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/tools/sql.py",
      "line_number": 27,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "metadata = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/sql.py",
      "line_number": 54,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "table_info = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/sql.py",
      "line_number": 79,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "table_info[\"columns\"].append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/tools/sql.py",
      "line_number": 92,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "{",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/ui/a2a_orchestration_ui.py",
      "line_number": 104,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'patterns = complexity_result.get('matched_patterns''",
      "code_snippet": "patterns = complexity_result.get('matched_patterns', [])",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'patterns = complexity_result.get('matched_patterns'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "pattern.*=.*[\"\\'].*[\"\\']",
        "matched_text": "patterns = complexity_result.get('matched_patterns'"
      }
    },
    {
      "file_path": "core/ui/a2a_orchestration_ui.py",
      "line_number": 71,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "gauge = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/ui/a2a_orchestration_ui.py",
      "line_number": 79,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "'threshold': {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/ui/a2a_orchestration_ui.py",
      "line_number": 112,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "analysis_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/ui/a2a_orchestration_ui.py",
      "line_number": 132,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "AGENT_NAME_MAPPING = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/ui/agent_preloader.py",
      "line_number": 162,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if agent_name == \"Orchestrator\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/ui/agent_preloader.py",
      "line_number": 205,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/ui/smart_display.py",
      "line_number": 276,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'startswith('#') and not line.strip().startswith('#!/''",
      "code_snippet": "if line.strip().startswith('#') and not line.strip().startswith('#!/'):",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'startswith('#') and not line.strip().startswith('#!/'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "startswith\\([\"\\'].*[\"\\']",
        "matched_text": "startswith('#') and not line.strip().startswith('#!/'"
      }
    },
    {
      "file_path": "core/ui/smart_display.py",
      "line_number": 236,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if isinstance(content, dict) and content.get('type') == 'image':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/ui/smart_display.py",
      "line_number": 300,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if content_type == \"artifact\" and isinstance(chunk, dict):",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/universal_data_analysis_router.py",
      "line_number": 389,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: '.search(r'```json\\s*(\\{.*?\\})\\s*```''",
      "code_snippet": "json_match = re.search(r'```json\\s*(\\{.*?\\})\\s*```', response_text, re.DOTALL)",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. '.search(r'```json\\s*(\\{.*?\\})\\s*```'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "\\.search\\(.*[\"\\'].*[\"\\']",
        "matched_text": ".search(r'```json\\s*(\\{.*?\\})\\s*```'"
      }
    },
    {
      "file_path": "core/universal_data_analysis_router.py",
      "line_number": 144,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/universal_data_analysis_router.py",
      "line_number": 289,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "self.routing_history.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/universal_data_analysis_router.py",
      "line_number": 313,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "name_mapping = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/universal_data_analysis_router.py",
      "line_number": 528,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "result = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/universal_data_analysis_router.py",
      "line_number": 530,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"decision\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/universal_data_analysis_router.py",
      "line_number": 539,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"agent_info\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/universal_data_analysis_router.py",
      "line_number": 555,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/universal_data_analysis_router.py",
      "line_number": 558,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"fallback\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/universal_data_analysis_router.py",
      "line_number": 585,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "file_analysis.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/universal_data_analysis_router.py",
      "line_number": 617,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/universal_data_analysis_router.py",
      "line_number": 673,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if __name__ == \"__main__\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/user_file_tracker.py",
      "line_number": 303,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if detected_domain == 'finance' and any(kw in file_name_lower for kw in ['financial', 'bank', 'stock']'",
      "code_snippet": "elif detected_domain == 'finance' and any(kw in file_name_lower for kw in ['financial', 'bank', 'stock']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if detected_domain == 'finance' and any(kw in file_name_lower for kw in ['financial', 'bank', 'stock']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if detected_domain == 'finance' and any(kw in file_name_lower for kw in ['financial', 'bank', 'stock']"
      }
    },
    {
      "file_path": "core/user_file_tracker.py",
      "line_number": 320,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if file_extension in ['.xlsx', '.xls']'",
      "code_snippet": "elif file_extension in ['.xlsx', '.xls']:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if file_extension in ['.xlsx', '.xls']' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if file_extension in ['.xlsx', '.xls']"
      }
    },
    {
      "file_path": "core/user_file_tracker.py",
      "line_number": 303,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif detected_domain == 'finance' and any(kw in file_name_lower for kw in ['financial', 'bank', 'stock']):\n                    domain_files.append(file_id)\n                # 추가 도메인 매칭 로직...\n            \n            if domain_files:\n                # 가장 최근 도메인 파일 반환\n                return max(domain_files, \n                         key=lambda fid: self.tracked_files[fid].uploaded_at)\n        \n        return None\n    \n    def _save_dataframe(self, df: pd.DataFrame, file_path: Path):\n        \"'",
      "code_snippet": "elif detected_domain == 'finance' and any(kw in file_name_lower for kw in ['financial', 'bank', 'stock']):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif detected_domain == 'finance' and any(kw in file_name_lower for kw in ['financial', 'bank', 'stock']):\n                    domain_files.append(file_id)\n                # 추가 도메인 매칭 로직...\n            \n            if domain_files:\n                # 가장 최근 도메인 파일 반환\n                return max(domain_files, \n                         key=lambda fid: self.tracked_files[fid].uploaded_at)\n        \n        return None\n    \n    def _save_dataframe(self, df: pd.DataFrame, file_path: Path):\n        \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif detected_domain == 'finance' and any(kw in file_name_lower for kw in ['financial', 'bank', 'stock']):\n                    domain_files.append(file_id)\n                # 추가 도메인 매칭 로직...\n            \n            if domain_files:\n                # 가장 최근 도메인 파일 반환\n                return max(domain_files, \n                         key=lambda fid: self.tracked_files[fid].uploaded_at)\n        \n        return None\n    \n    def _save_dataframe(self, df: pd.DataFrame, file_path: Path):\n        \""
      }
    },
    {
      "file_path": "core/user_file_tracker.py",
      "line_number": 322,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif file_extension == '.pkl':\n            df.to_pickle(file_path)\n        elif file_extension == ''",
      "code_snippet": "elif file_extension == '.pkl':",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif file_extension == '.pkl':\n            df.to_pickle(file_path)\n        elif file_extension == '' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif file_extension == '.pkl':\n            df.to_pickle(file_path)\n        elif file_extension == '"
      }
    },
    {
      "file_path": "core/user_file_tracker.py",
      "line_number": 126,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "context_data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/user_file_tracker.py",
      "line_number": 280,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "domain_keywords = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/user_file_tracker.py",
      "line_number": 301,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if detected_domain == 'semiconductor' and 'ion' in file_name_lower:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/user_file_tracker.py",
      "line_number": 303,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif detected_domain == 'finance' and any(kw in file_name_lower for kw in ['financial', 'bank', 'stock']):",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/user_file_tracker.py",
      "line_number": 318,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if file_extension == '.csv':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/user_file_tracker.py",
      "line_number": 322,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif file_extension == '.pkl':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/user_file_tracker.py",
      "line_number": 324,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif file_extension == '.json':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/user_file_tracker.py",
      "line_number": 369,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "data = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/user_file_tracker.py",
      "line_number": 394,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "files_info.append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 457,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if server_config[\"transport\"] not in [\"sse\", \"stdio\"]'",
      "code_snippet": "elif server_config[\"transport\"] not in [\"sse\", \"stdio\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if server_config[\"transport\"] not in [\"sse\", \"stdio\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if server_config[\"transport\"] not in [\"sse\", \"stdio\"]"
      }
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 22,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "config = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 24,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"llm\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 26,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"openai\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 39,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"system\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 48,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"data\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 55,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"logging\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 62,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"langfuse\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 69,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"ui\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 134,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if not self.get('llm.openai.api_key') and self.get('llm.provider') == 'OPENAI':",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 262,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if name in templates and templates[name].get(\"source\") == \"user\" and source == \"system\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 265,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "templates[name] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 387,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "templates[json_file.stem] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 361,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "for template in templates.values():",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 362,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "LLM First 원칙 위반: 'template' 안티패턴 사용",
      "code_snippet": "category = template.get(\"category\", \"other\")",
      "suggested_fix": "LLM 기반 동적 분석으로 대체 검토",
      "llm_first_impact": 0.8,
      "confidence": 0.7,
      "context": {
        "anti_pattern": "template"
      }
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 231,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'validate_config'",
      "code_snippet": "def validate_config() -> Tuple[bool, List[str]]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_validate_config, llm_validate_config)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "validate_config",
        "pattern": "validate_"
      }
    },
    {
      "file_path": "core/utils/config.py",
      "line_number": 447,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'validate_mcp_servers'",
      "code_snippet": "def validate_mcp_servers(servers: Dict[str, Dict[str, Any]]) -> List[str]:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_validate_mcp_servers, llm_validate_mcp_servers)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "validate_mcp_servers",
        "pattern": "validate_"
      }
    },
    {
      "file_path": "core/utils/helpers.py",
      "line_number": 12,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "log_entry = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/helpers.py",
      "line_number": 64,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "code_entry = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 17,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 19,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"task_manager\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 24,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"self_critic\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 29,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"memory_kv\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 34,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"result_ranker\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 39,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"logger\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 46,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"file_management\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 51,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"data_science_tools\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 56,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"semiconductor_yield_analysis\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 61,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"process_control_charts\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 66,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"semiconductor_equipment_analysis\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 71,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"defect_pattern_analysis\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 76,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"process_optimization\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 81,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"timeseries_analysis\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 86,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"anomaly_detection\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 91,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"advanced_ml_tools\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 96,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"data_preprocessing_tools\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 101,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"statistical_analysis_tools\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 106,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"report_writing_tools\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 111,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "\"semiconductor_process_tools\": {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 120,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 177,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 236,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "mcp_config = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 268,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "return {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/mcp_config_helper.py",
      "line_number": 332,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'validate_mcp_config'",
      "code_snippet": "def validate_mcp_config(mcp_config: Dict[str, Any]) -> bool:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_validate_mcp_config, llm_validate_mcp_config)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "validate_mcp_config",
        "pattern": "validate_"
      }
    },
    {
      "file_path": "core/utils/regex.py",
      "line_number": 20,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'pattern = r'^\\s*(import\\s+[^\\n]+|from\\s+\\S+\\s+import\\s+[^\\n]+)\\s*$''",
      "code_snippet": "import_pattern = r'^\\s*(import\\s+[^\\n]+|from\\s+\\S+\\s+import\\s+[^\\n]+)\\s*$'",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'pattern = r'^\\s*(import\\s+[^\\n]+|from\\s+\\S+\\s+import\\s+[^\\n]+)\\s*$'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "pattern.*=.*[\"\\'].*[\"\\']",
        "matched_text": "pattern = r'^\\s*(import\\s+[^\\n]+|from\\s+\\S+\\s+import\\s+[^\\n]+)\\s*$'"
      }
    },
    {
      "file_path": "core/utils/regex.py",
      "line_number": 27,
      "violation_type": "pattern_matching",
      "severity": "high",
      "description": "패턴 매칭 로직: 'pattern = r'(def\\s+\\w+\\s*\\(.*?\\):)''",
      "code_snippet": "function_pattern = r'(def\\s+\\w+\\s*\\(.*?\\):)'",
      "suggested_fix": "정규식 매칭을 LLM 텍스트 이해로 대체. 'pattern = r'(def\\s+\\w+\\s*\\(.*?\\):)'' 패턴 대신 자연어 처리 활용",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {
        "pattern": "pattern.*=.*[\"\\'].*[\"\\']",
        "matched_text": "pattern = r'(def\\s+\\w+\\s*\\(.*?\\):)'"
      }
    },
    {
      "file_path": "core/utils/regex.py",
      "line_number": 136,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if key == \"report_title\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/regex.py",
      "line_number": 75,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'format_agent_name'",
      "code_snippet": "def format_agent_name(agent_name: str) -> str:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_format_agent_name, llm_format_agent_name)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "format_agent_name",
        "pattern": "format_"
      }
    },
    {
      "file_path": "core/utils/regex.py",
      "line_number": 81,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'format_recommended_steps'",
      "code_snippet": "def format_recommended_steps(raw_text: str, heading: str = \"# Recommended Steps:\") -> str:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_format_recommended_steps, llm_format_recommended_steps)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "format_recommended_steps",
        "pattern": "format_"
      }
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 367,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if \"executor\" in node.lower() or node in [\"Data_Preprocessor\", \"EDA_Specialist\", \"Visualization_Expert\", \"ML_Engineer\", \"Statistical_Analyst\", \"Report_Writer\"]'",
      "code_snippet": "elif \"executor\" in node.lower() or node in [\"Data_Preprocessor\", \"EDA_Specialist\", \"Visualization_Expert\", \"ML_Engineer\", \"Statistical_Analyst\", \"Report_Writer\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if \"executor\" in node.lower() or node in [\"Data_Preprocessor\", \"EDA_Specialist\", \"Visualization_Expert\", \"ML_Engineer\", \"Statistical_Analyst\", \"Report_Writer\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if \"executor\" in node.lower() or node in [\"Data_Preprocessor\", \"EDA_Specialist\", \"Visualization_Expert\", \"ML_Engineer\", \"Statistical_Analyst\", \"Report_Writer\"]"
      }
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 514,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if \"executor\" in node.lower() or node in [\"Data_Validator\", \"Preprocessing_Expert\", \"EDA_Analyst\", \"Visualization_Expert\", \"ML_Specialist\", \"Statistical_Analyst\", \"Report_Generator\"]'",
      "code_snippet": "elif \"executor\" in node.lower() or node in [\"Data_Validator\", \"Preprocessing_Expert\", \"EDA_Analyst\", \"Visualization_Expert\", \"ML_Specialist\", \"Statistical_Analyst\", \"Report_Generator\"]:",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if \"executor\" in node.lower() or node in [\"Data_Validator\", \"Preprocessing_Expert\", \"EDA_Analyst\", \"Visualization_Expert\", \"ML_Specialist\", \"Statistical_Analyst\", \"Report_Generator\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if \"executor\" in node.lower() or node in [\"Data_Validator\", \"Preprocessing_Expert\", \"EDA_Analyst\", \"Visualization_Expert\", \"ML_Specialist\", \"Statistical_Analyst\", \"Report_Generator\"]"
      }
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 638,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'if any(executor in node.lower() for executor in [\"executor\", \"analyst\", \"specialist\", \"expert\", \"engineer\", \"writer\", \"generator\", \"preprocessor\", \"validator\"]'",
      "code_snippet": "elif any(executor in node.lower() for executor in [\"executor\", \"analyst\", \"specialist\", \"expert\", \"engineer\", \"writer\", \"generator\", \"preprocessor\", \"validator\"]):",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'if any(executor in node.lower() for executor in [\"executor\", \"analyst\", \"specialist\", \"expert\", \"engineer\", \"writer\", \"generator\", \"preprocessor\", \"validator\"]' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "if.*in.*\\[.*[\"\\'].*[\"\\'].*\\]",
        "matched_text": "if any(executor in node.lower() for executor in [\"executor\", \"analyst\", \"specialist\", \"expert\", \"engineer\", \"writer\", \"generator\", \"preprocessor\", \"validator\"]"
      }
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 357,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif node == \"router\":\n                content_parts.append(\"'",
      "code_snippet": "elif node == \"router\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif node == \"router\":\n                content_parts.append(\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif node == \"router\":\n                content_parts.append(\""
      }
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 362,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif node == \"replanner\":\n                content_parts.append(\"'",
      "code_snippet": "elif node == \"replanner\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif node == \"replanner\":\n                content_parts.append(\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif node == \"replanner\":\n                content_parts.append(\""
      }
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 503,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif node == \"router\":\n            # 현재 단계 업데이트\n            current_step = st.session_state.get(\"'",
      "code_snippet": "elif node == \"router\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif node == \"router\":\n            # 현재 단계 업데이트\n            current_step = st.session_state.get(\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif node == \"router\":\n            # 현재 단계 업데이트\n            current_step = st.session_state.get(\""
      }
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 556,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif node == \"replanner\":\n            # 재계획 단계 - 다음 단계로 이동\n            current_step = st.session_state.get(\"'",
      "code_snippet": "elif node == \"replanner\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif node == \"replanner\":\n            # 재계획 단계 - 다음 단계로 이동\n            current_step = st.session_state.get(\"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif node == \"replanner\":\n            # 재계획 단계 - 다음 단계로 이동\n            current_step = st.session_state.get(\""
      }
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 614,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif node == \"router\":\n            if hasattr(content, \"'",
      "code_snippet": "elif node == \"router\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif node == \"router\":\n            if hasattr(content, \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif node == \"router\":\n            if hasattr(content, \""
      }
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 619,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif node == \"replanner\":\n            if hasattr(content, \"'",
      "code_snippet": "elif node == \"replanner\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif node == \"replanner\":\n            if hasattr(content, \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif node == \"replanner\":\n            if hasattr(content, \""
      }
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 624,
      "violation_type": "rule_based_logic",
      "severity": "high",
      "description": "Rule 기반 로직: 'elif node == \"final_responder\" or node == \"Final_Responder\":\n            # 🆕 Final Responder의 내용은 텍스트 영역으로\n            if hasattr(content, \"'",
      "code_snippet": "elif node == \"final_responder\" or node == \"Final_Responder\":",
      "suggested_fix": "조건문을 LLM 판단으로 대체. 'elif node == \"final_responder\" or node == \"Final_Responder\":\n            # 🆕 Final Responder의 내용은 텍스트 영역으로\n            if hasattr(content, \"' 대신 LLM에게 컨텍스트 기반 결정 위임",
      "llm_first_impact": 0.8,
      "confidence": 0.8,
      "context": {
        "pattern": "elif.*==.*[\"\\'][^\"\\']*[\"\\']",
        "matched_text": "elif node == \"final_responder\" or node == \"Final_Responder\":\n            # 🆕 Final Responder의 내용은 텍스트 영역으로\n            if hasattr(content, \""
      }
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 35,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if llm_provider.upper() == \"OLLAMA\" and timeout <= 300:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 119,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 129,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 140,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "yield {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 282,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "execution_state = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 348,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if node == \"planner\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 357,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif node == \"router\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 362,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif node == \"replanner\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 412,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if node == \"final_responder\" or node == \"Final_Responder\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 482,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if node == \"planner\" and isinstance(content, dict) and \"plan\" in content:",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 503,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif node == \"router\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 536,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "st.session_state.step_results[current_step] = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 556,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif node == \"replanner\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 566,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "execution_state[\"tool_outputs\"].append({",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 587,
      "violation_type": "hardcoded_values",
      "severity": "medium",
      "description": "하드코딩된 매핑 딕셔너리",
      "code_snippet": "execution_state = {",
      "suggested_fix": "정적 매핑을 동적 로직 또는 설정 파일로 대체",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 607,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "if node == \"planner\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 614,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif node == \"router\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 619,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif node == \"replanner\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 624,
      "violation_type": "conditional_hardcode",
      "severity": "high",
      "description": "하드코딩된 조건문 탐지",
      "code_snippet": "elif node == \"final_responder\" or node == \"Final_Responder\":",
      "suggested_fix": "조건부 로직을 LLM 기반 동적 판단으로 대체",
      "llm_first_impact": 0.7,
      "confidence": 0.8,
      "context": {}
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 189,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'process_with_callbacks'",
      "code_snippet": "async def process_with_callbacks(",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_process_with_callbacks, llm_process_with_callbacks)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "process_with_callbacks",
        "pattern": "process_"
      }
    },
    {
      "file_path": "core/utils/streaming.py",
      "line_number": 322,
      "violation_type": "rule_based_logic",
      "severity": "medium",
      "description": "Rule 기반 함수명 패턴: 'format_tool_output'",
      "code_snippet": "def format_tool_output(content: str) -> str:",
      "suggested_fix": "LLM 기반 함수로 리팩토링 검토 (예: ai_format_tool_output, llm_format_tool_output)",
      "llm_first_impact": 0.5,
      "confidence": 0.6,
      "context": {
        "function_name": "format_tool_output",
        "pattern": "format_"
      }
    },
    {
      "file_path": "core/utils/streamlit_context.py",
      "line_number": 144,
      "violation_type": "template_response",
      "severity": "medium",
      "description": "템플릿 응답: 'message=\".*ScriptRunContext.*\"'",
      "code_snippet": "warnings.filterwarnings(\"ignore\", message=\".*ScriptRunContext.*\")",
      "suggested_fix": "고정 템플릿을 LLM 생성 응답으로 대체. 'message=\".*ScriptRunContext.*\"' 대신 동적 응답 생성",
      "llm_first_impact": 0.6,
      "confidence": 0.8,
      "context": {
        "pattern": "message\\s*=\\s*[f]?[\"\\'].*[\"\\']",
        "matched_text": "message=\".*ScriptRunContext.*\""
      }
    }
  ],
  "refactoring_priority": [
    "core/a2a/a2a_streamlit_client.py",
    "core/app_components/data_workspace.py",
    "core/query_processing/final_answer_structuring.py",
    "core/advanced_code_tracker.py",
    "core/specialized_data_agents.py",
    "core/utils/streaming.py",
    "core/query_processing/answer_predictor.py",
    "core/monitoring/a2a_performance_profiler.py",
    "core/streaming/streaming_orchestrator.py",
    "core/system_health_checker.py",
    "core/query_processing/user_personalized_result_optimizer.py",
    "core/integrated_alert_system.py",
    "core/multi_agent_orchestrator.py",
    "core/optimization/a2a_connection_optimizer.py",
    "core/auto_data_profiler.py",
    "core/a2a_task_executor.py",
    "core/query_processing/execution_plan_manager.py",
    "core/monitoring/mcp_config_manager.py",
    "core/query_processing/holistic_answer_synthesis_engine.py",
    "core/query_processing/query_enhancer.py"
  ]
}