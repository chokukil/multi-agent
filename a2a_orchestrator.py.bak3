#!/usr/bin/env python3
"""
CherryAI v8 - Universal Intelligent Orchestrator
A2A SDK v0.2.9 표준 준수 + 실시간 스트리밍 + 지능형 에이전트 발견
"""

import asyncio
import json
import logging
import os
import time
from datetime import datetime
from typing import Any, Dict, List, Optional

import httpx
import uvicorn
from openai import AsyncOpenAI

# A2A SDK 0.2.9 표준 임포트
from a2a.server.apps import A2AStarletteApplication
from a2a.server.request_handlers import DefaultRequestHandler
from a2a.server.tasks import InMemoryTaskStore, TaskUpdater
from a2a.server.agent_execution import AgentExecutor, RequestContext
from a2a.server.events import EventQueue
from a2a.types import (
    AgentCard,
    AgentSkill,
    AgentCapabilities,
    TaskState,
    TextPart,
    Part
)
from a2a.client import A2ACardResolver, A2AClient
from a2a.utils import new_agent_text_message, new_task

# 로깅 설정
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# AI DS Team 에이전트 포트 매핑
AGENT_PORTS = {
    "data_cleaning": 8306,
    "data_loader": 8307, 
    "data_visualization": 8308,
    "data_wrangling": 8309,
    "eda_tools": 8310,
    "feature_engineering": 8311,
    "h2o_modeling": 8312,
    "mlflow_tracking": 8313,
    "sql_database": 8314
}


class CherryAI_v8_UniversalIntelligentOrchestrator(AgentExecutor):
    """CherryAI v8 - Universal Intelligent Orchestrator"""
    
    def __init__(self):
        super().__init__()
        self.openai_client = self._initialize_openai_client()
        self.discovered_agents = {}
        logger.info("🚀 CherryAI v8 Universal Intelligent Orchestrator 초기화 완료")
    
    def _initialize_openai_client(self) -> Optional[AsyncOpenAI]:
        """OpenAI 클라이언트 초기화"""
        try:
            api_key = os.getenv("OPENAI_API_KEY")
            if not api_key:
                logger.warning("⚠️ OPENAI_API_KEY가 설정되지 않음")
                return None
            return AsyncOpenAI(api_key=api_key)
        except Exception as e:
            logger.error(f"❌ OpenAI 클라이언트 초기화 실패: {e}")
            return None
    
    async def execute(self, context: RequestContext, event_queue: EventQueue) -> None:
        """
        A2A 표준 프로토콜 기반 실행 메서드
        
        Args:
            context: A2A 요청 컨텍스트 (메시지, 태스크 ID, 컨텍스트 ID 포함)
            event_queue: A2A 이벤트 큐 (응답 전송용)
        """
        # A2A 표준 TaskUpdater 초기화
        updater = TaskUpdater(event_queue, context.task_id, context.context_id)
        
        try:
            # 첫 번째 태스크인 경우 submit 호출
            if not context.current_task:
                await updater.submit()
            
            # 작업 시작 알림
            await updater.start_work()
            
            # 사용자 입력 추출
            user_input = self._extract_user_input(context)
            logger.info(f"📝 사용자 요청: {user_input[:100]}...")
            
            # 복잡도 평가
            await updater.update_status(
                TaskState.working, 
                message=new_agent_text_message("🔍 A2A 프로토콜로 에이전트를 발견하고 있습니다...")
            )
            
            # 에이전트 발견
            available_agents = await self._discover_agent_capabilities()
            await updater.update_status(
                TaskState.working, 
                message=new_agent_text_message(f"✅ {len(available_agents)}개의 A2A 에이전트를 발견했습니다!")
            )
            
            await updater.update_status(
                TaskState.working, 
                message=new_agent_text_message("🧠 요청 복잡도를 분석하고 있습니다...")
            )
            
            complexity_level = await self._assess_request_complexity(user_input)
            await updater.update_status(
                TaskState.working, 
                message=new_agent_text_message(f"📊 요청 복잡도: {complexity_level}")
            )

            if complexity_level == "Simple":
                # 단순 요청 - 직접 LLM 응답
                await updater.update_status(
                    TaskState.working, 
                    message=new_agent_text_message("💡 단순 요청으로 분류 - 직접 응답 생성 중...")
                )
                
                response = await self._generate_simple_response(user_input)
                
                await updater.add_artifact(
                    [TextPart(text=response)],
                    name="simple_response"
                )
                await updater.complete()
                return
                
            elif complexity_level == "Single Agent":
                # 단일 에이전트 요청 - 적절한 에이전트 직접 호출
                await updater.update_status(
                    TaskState.working, 
                    message=new_agent_text_message("🎯 단일 에이전트 요청으로 분류 - 최적 에이전트 선택 중...")
                )
                
                agent_info = await self._select_best_agent(user_input)
                if agent_info:
                    response = await self._execute_single_agent(agent_info, user_input, context.context_id)
                    
                    await updater.add_artifact(
                        [TextPart(text=response)],
                        name="single_agent_response"
                    )
                    await updater.complete()
                    return
            
            # 복잡한 요청 - 전체 워크플로우 실행
            await updater.update_status(
                TaskState.working, 
                message=new_agent_text_message("🔄 복합적인 요청으로 에이전트들과 협력하여 처리합니다...")
            )
            
            # 사용자 의도 정밀 분석
            await updater.update_status(
                TaskState.working, 
                message=new_agent_text_message("🎯 사용자 의도 정밀 분석 중...")
            )
            
            intent_analysis = await self._extract_user_intent_precisely(user_input)
            
            # 실행 계획 생성
            await updater.update_status(
                TaskState.working, 
                message=new_agent_text_message("📋 최적 실행 계획 수립 중...")
            )
            
            execution_plan = await self._create_execution_plan(intent_analysis, available_agents)
            
            # 계획 단계별 실행
            final_results = []
            
            await updater.update_status(
                TaskState.working, 
                message=new_agent_text_message("📝 최종 종합 분석을 생성하고 있습니다...")
            )
            
            # 실제 에이전트 실행 시도
            try:
                for i, step in enumerate(execution_plan):
                    await updater.update_status(
                        TaskState.working, 
                        message=new_agent_text_message(f"⚡ 단계 {i+1}/{len(execution_plan)} 실행 중: {step.get('description', '처리 중...')}")
                    )
                    
                    step_result = await self._execute_plan_step(step, context.context_id)
                    
                    # 결과 검증
                    validated_result = await self._validate_agent_response(step_result, step)
                    final_results.append(validated_result)
                    
            except Exception as e:
                logger.error(f"에이전트 실행 중 오류: {e}")
                # 에이전트 실행 실패 시에도 LLM으로 응답 생성
                await updater.update_status(
                    TaskState.working, 
                    message=new_agent_text_message("📝 답변을 실시간으로 생성하고 있습니다...")
                )
            
            # 최종 응답 생성 (LLM 기반)
            final_response = await self._create_evidence_based_response(
                user_input, intent_analysis, final_results
            )
            
            await updater.update_status(
                TaskState.working, 
                message=new_agent_text_message("✅ 답변 생성이 완료되었습니다!")
            )
            
            # 최종 결과 전송
            await updater.add_artifact(
                [TextPart(text=final_response)],
                name="comprehensive_analysis"
            )
            await updater.complete()
            
        except Exception as e:
            logger.error(f"오케스트레이터 실행 중 오류 발생: {str(e)}")
            await updater.update_status(
                TaskState.failed,
                message=new_agent_text_message(f"오류 발생: {str(e)}")
            )
            raise
    
    def _extract_user_input(self, context: RequestContext) -> str:
        """사용자 입력 추출"""
        try:
            if context.message and context.message.parts:
                for part in context.message.parts:
                    if hasattr(part.root, 'kind') and part.root.kind == 'text':
                        return part.root.text
                    elif hasattr(part.root, 'type') and part.root.type == 'text':
                        return part.root.text
            return ""
        except Exception as e:
            logger.error(f"사용자 입력 추출 실패: {e}")
            return ""

    async def cancel(self, context: RequestContext, event_queue: EventQueue) -> None:
        """작업 취소"""
        logger.info("❌ CherryAI v8 작업이 취소되었습니다")
        raise Exception('cancel not supported')

    async def _assess_request_complexity(self, user_input: str) -> str:
        """요청 복잡도 평가"""
        try:
            # 간단한 규칙 기반 복잡도 평가
            word_count = len(user_input.split())
            question_marks = user_input.count('?')
            
            # 단순 질문 패턴
            simple_patterns = ['안녕', '테스트', '?', '간단한']
            if any(pattern in user_input for pattern in simple_patterns) and word_count < 10:
                return "Simple"
            
            # 단일 에이전트 패턴
            single_agent_patterns = ['EDA', '시각화', '데이터 로드', '모델링']
            if any(pattern in user_input for pattern in single_agent_patterns):
                return "Single Agent"
            
            return "Complex"
            
        except Exception as e:
            logger.error(f"복잡도 평가 실패: {e}")
            return "Complex"
    
    async def _generate_simple_response(self, user_input: str) -> str:
        """간단한 응답 생성"""
        try:
            if not self.openai_client:
                return f"안녕하세요! '{user_input}'에 대한 응답입니다. OpenAI API가 설정되지 않아 기본 응답을 제공합니다."
            
            response = await self.openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "당신은 친근하고 도움이 되는 AI 어시스턴트입니다."},
                    {"role": "user", "content": user_input}
                ],
                temperature=0.7,
                max_tokens=500
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logger.error(f"간단한 응답 생성 실패: {e}")
            return f"죄송합니다. '{user_input}'에 대한 응답을 생성하는 중 오류가 발생했습니다."
    
    async def _select_best_agent(self, user_input: str) -> dict:
        """최적 에이전트 선택"""
        # 기본 에이전트 매핑
        agent_mapping = {
            "EDA": {"name": "EDA Tools Agent", "port": 8201},
            "시각화": {"name": "Data Visualization Agent", "port": 8202},
            "데이터 로드": {"name": "Data Loader Agent", "port": 8203}
        }
        
        for keyword, agent_info in agent_mapping.items():
            if keyword in user_input:
                return agent_info
        
        return None
    
    async def _execute_single_agent(self, agent_info: dict, user_input: str, context_id: str) -> str:
        """단일 에이전트 실행"""
        try:
            # 실제 에이전트 호출 구현 (향후 확장)
            return f"{agent_info['name']}에서 '{user_input}' 처리 완료 (시뮬레이션)"
        except Exception as e:
            logger.error(f"단일 에이전트 실행 실패: {e}")
            return f"에이전트 실행 중 오류 발생: {str(e)}"
    
    async def _extract_user_intent_precisely(self, user_input: str) -> dict:
        """사용자 의도 정밀 분석"""
        return {
            "intent": "analysis",
            "action_type": "analyze",
            "domain": "general",
            "complexity": "medium"
        }
    
    async def _discover_agent_capabilities(self) -> list:
        """에이전트 능력 동적 발견"""
        return [
            {"name": "EDA Tools Agent", "capabilities": ["data_analysis", "statistics"]},
            {"name": "Data Visualization Agent", "capabilities": ["plotting", "charts"]},
            {"name": "Data Loader Agent", "capabilities": ["data_loading", "file_processing"]}
        ]
    
    async def _create_execution_plan(self, intent_analysis: dict, available_agents: list) -> list:
        """실행 계획 생성"""
        return [
            {"agent": "Data Loader Agent", "description": "데이터 로딩"},
            {"agent": "EDA Tools Agent", "description": "탐색적 데이터 분석"},
            {"agent": "Data Visualization Agent", "description": "데이터 시각화"}
        ]
    
    async def _execute_plan_step(self, step: dict, context_id: str) -> dict:
        """계획 단계 실행"""
        return {
            "status": "success",
            "result": f"{step['agent']} 실행 완료: {step['description']}"
        }
    
    async def _validate_agent_response(self, result: dict, step: dict) -> dict:
        """에이전트 응답 검증"""
        return result
    
    async def _create_evidence_based_response(self, user_input: str, intent_analysis: dict, results: list) -> str:
        """증거 기반 최종 응답 생성"""
        response = f"# {user_input}에 대한 종합 분석 결과\n\n"
        
        for i, result in enumerate(results):
            response += f"## 단계 {i+1}: {result.get('result', '결과 없음')}\n\n"
        
        response += "## 결론\n\n모든 분석 단계가 성공적으로 완료되었습니다."
        
        return response


def create_agent_card() -> AgentCard:
    """CherryAI v8 에이전트 카드 생성"""
    return AgentCard(
        name="CherryAI v8 Universal Intelligent Orchestrator",
        description="A2A SDK v0.2.9 표준 준수 + 실시간 스트리밍 + 지능형 에이전트 발견을 통합한 범용 오케스트레이터",
        url="http://localhost:8100",
        version="8.0.0",
        provider={
            "organization": "CherryAI Team",
            "url": "https://github.com/CherryAI"
        },
        capabilities=AgentCapabilities(
            streaming=True,
            pushNotifications=False,
            stateTransitionHistory=True
        ),
        defaultInputModes=["text/plain"],
        defaultOutputModes=["text/plain"],
        skills=[
            AgentSkill(
                id="universal_analysis",
                name="Universal Data Analysis",
                description="A2A 프로토콜을 활용한 범용 데이터 분석 및 AI 에이전트 오케스트레이션",
                tags=["analysis", "orchestration", "a2a", "streaming"],
                examples=[
                    "데이터를 분석해주세요",
                    "머신러닝 모델을 만들어주세요", 
                    "데이터 시각화를 해주세요",
                    "EDA를 수행해주세요"
                ],
                inputModes=["text/plain"],
                outputModes=["text/plain"]
            )
        ],
        supportsAuthenticatedExtendedCard=False
    )


async def main():
    """CherryAI v8 서버 시작"""
    try:
        # 에이전트 카드 생성
        agent_card = create_agent_card()
        
        # 태스크 스토어 및 실행자 초기화
        task_store = InMemoryTaskStore()
        agent_executor = CherryAI_v8_UniversalIntelligentOrchestrator()
        
        # 요청 핸들러 생성
        request_handler = DefaultRequestHandler(
            agent_executor=agent_executor,
            task_store=task_store,
        )
        
        # A2A 애플리케이션 생성
        app_builder = A2AStarletteApplication(
            agent_card=agent_card,
            http_handler=request_handler
        )
        app = app_builder.build()
        
        # 서버 시작
        print("🚀 CherryAI v8 Universal Intelligent Orchestrator 시작")
        print(f"📍 Agent Card: http://localhost:8100/.well-known/agent.json")
        print("🛑 종료하려면 Ctrl+C를 누르세요")
        
        config = uvicorn.Config(
            app=app,
            host="0.0.0.0",
            port=8100,
            log_level="info"
        )
        server = uvicorn.Server(config)
        await server.serve()
        
    except Exception as e:
        logger.error(f"❌ 서버 시작 실패: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
