"""
Cursor Collaboration Network Demo
D3.js Í∏∞Î∞ò ÏóêÏù¥Ï†ÑÌä∏ ÌòëÏóÖ ÎÑ§Ìä∏ÏõåÌÅ¨ ÏãúÍ∞ÅÌôî Îç∞Î™®
"""

import streamlit as st
import time
import random
import json
from datetime import datetime
from typing import Dict, List, Any

# Î°úÏª¨ Î™®Îìà ÏûÑÌè¨Ìä∏
from ui.cursor_collaboration_network import (
    get_cursor_collaboration_network,
    render_collaboration_network,
    NodeType,
    NodeStatus,
    ConnectionType
)
from ui.cursor_theme_system import apply_cursor_theme

def initialize_network_demo():
    """ÎÑ§Ìä∏ÏõåÌÅ¨ Îç∞Î™® Ï¥àÍ∏∞Ìôî"""
    if 'network_demo_initialized' not in st.session_state:
        st.session_state.network_demo_initialized = True
        st.session_state.simulation_running = False
        st.session_state.auto_simulate = False
        st.session_state.message_history = []
        st.session_state.network_events = []
        st.session_state.selected_scenario = None
        st.session_state.network_metrics = {
            'total_messages': 0,
            'successful_routes': 0,
            'failed_routes': 0,
            'avg_latency': 0.0
        }

def create_workflow_scenario():
    """ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏãúÎÇòÎ¶¨Ïò§ ÏÉùÏÑ±"""
    scenarios = [
        {
            'name': 'üìä Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù ÌååÏù¥ÌîÑÎùºÏù∏',
            'description': 'Îç∞Ïù¥ÌÑ∞ Î°úÎìú ‚Üí Ï†ïÏ†ú ‚Üí Î∂ÑÏÑù ‚Üí ÏãúÍ∞ÅÌôî ‚Üí Î≥¥Í≥†ÏÑú',
            'steps': [
                ('csv_data', 'data_loader', 'Data loading initiated'),
                ('data_loader', 'data_cleaner', 'Raw data processing'),
                ('data_cleaner', 'pandas_agent', 'Clean data analysis'),
                ('pandas_agent', 'viz_agent', 'Analysis results'),
                ('viz_agent', 'dashboard', 'Visualization complete'),
                ('pandas_agent', 'report', 'Report generation')
            ]
        },
        {
            'name': 'ü§ñ AI Î™®Îç∏ ÌòëÏóÖ',
            'description': 'Ïó¨Îü¨ AI ÏóêÏù¥Ï†ÑÌä∏Í∞Ä ÌòëÎ†•ÌïòÏó¨ Î™®Îç∏ Í∞úÎ∞ú',
            'steps': [
                ('orchestrator', 'pandas_agent', 'Data preparation task'),
                ('pandas_agent', 'ml_agent', 'Preprocessed data'),
                ('ml_agent', 'viz_agent', 'Model performance metrics'),
                ('viz_agent', 'knowledge_agent', 'Performance insights'),
                ('knowledge_agent', 'ml_agent', 'Optimization suggestions'),
                ('ml_agent', 'model', 'Final model output')
            ]
        },
        {
            'name': 'üîÑ Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ',
            'description': 'Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Î∞è Î™®ÎãàÌÑ∞ÎßÅ',
            'steps': [
                ('api_data', 'data_loader', 'Real-time data stream'),
                ('data_loader', 'orchestrator', 'Data availability alert'),
                ('orchestrator', 'pandas_agent', 'Processing request'),
                ('pandas_agent', 'viz_agent', 'Real-time metrics'),
                ('viz_agent', 'dashboard', 'Live dashboard update'),
                ('orchestrator', 'knowledge_agent', 'Pattern detection')
            ]
        }
    ]
    
    return scenarios

def execute_workflow_scenario(scenario: Dict[str, Any]):
    """ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏãúÎÇòÎ¶¨Ïò§ Ïã§Ìñâ"""
    network = get_cursor_collaboration_network()
    
    # ÏãúÎÇòÎ¶¨Ïò§ Ïã§Ìñâ
    for i, (source, target, message) in enumerate(scenario['steps']):
        # Î©îÏãúÏßÄ Ï†ÑÏÜ°
        message_id = network.send_message(
            source,
            target,
            "workflow_step",
            {
                "step": i + 1,
                "total_steps": len(scenario['steps']),
                "message": message,
                "scenario": scenario['name']
            }
        )
        
        # Ïù¥Î≤§Ìä∏ Í∏∞Î°ù
        event = {
            "timestamp": datetime.now().strftime("%H:%M:%S"),
            "source": source,
            "target": target,
            "message": message,
            "message_id": message_id,
            "step": i + 1,
            "scenario": scenario['name']
        }
        
        st.session_state.network_events.append(event)
        
        # Î©îÏãúÏßÄ ÌûàÏä§ÌÜ†Î¶¨ ÏóÖÎç∞Ïù¥Ìä∏
        st.session_state.message_history.append({
            "timestamp": datetime.now().strftime("%H:%M:%S"),
            "route": f"{source} ‚Üí {target}",
            "type": "workflow_step",
            "status": "sent",
            "data": message
        })
        
        # Î©îÌä∏Î¶≠ ÏóÖÎç∞Ïù¥Ìä∏
        st.session_state.network_metrics['total_messages'] += 1
        st.session_state.network_metrics['successful_routes'] += 1
        
        # ÏßÄÏó∞ ÏãúÎÆ¨Î†àÏù¥ÏÖò
        time.sleep(0.5)
    
    # ÏµúÍ∑º Ïù¥Î≤§Ìä∏Îßå Ïú†ÏßÄ (ÏµúÎåÄ 50Í∞ú)
    if len(st.session_state.network_events) > 50:
        st.session_state.network_events = st.session_state.network_events[-50:]
    
    if len(st.session_state.message_history) > 50:
        st.session_state.message_history = st.session_state.message_history[-50:]

def simulate_random_activity():
    """ÎûúÎç§ ÌôúÎèô ÏãúÎÆ¨Î†àÏù¥ÏÖò"""
    network = get_cursor_collaboration_network()
    
    # ÎûúÎç§ ÎÖ∏Îìú ÏÉÅÌÉú Î≥ÄÍ≤Ω
    node_ids = list(network.nodes.keys())
    if node_ids:
        node_id = random.choice(node_ids)
        statuses = [NodeStatus.THINKING, NodeStatus.WORKING, NodeStatus.COMPLETED, NodeStatus.IDLE]
        new_status = random.choice(statuses)
        
        network.update_node_status(node_id, new_status)
        
        # Ïù¥Î≤§Ìä∏ Í∏∞Î°ù
        event = {
            "timestamp": datetime.now().strftime("%H:%M:%S"),
            "type": "status_change",
            "node_id": node_id,
            "node_name": network.nodes[node_id].name,
            "new_status": new_status.value,
            "event_type": "node_update"
        }
        
        st.session_state.network_events.append(event)
    
    # ÎûúÎç§ Î©îÏãúÏßÄ ÌùêÎ¶Ñ
    if random.random() < 0.7:  # 70% ÌôïÎ•†Î°ú Î©îÏãúÏßÄ Ï†ÑÏÜ°
        message_id = network.simulate_message_flow()
        if message_id:
            st.session_state.network_metrics['total_messages'] += 1

def main():
    """Î©îÏù∏ Îç∞Î™® Ìï®Ïàò"""
    st.set_page_config(
        page_title="Cursor Collaboration Network Demo",
        page_icon="üï∏Ô∏è",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    initialize_network_demo()
    
    # ÌÜµÌï© ÌÖåÎßà Ï†ÅÏö©
    apply_cursor_theme()
    
    # Ï∂îÍ∞Ä ÎÑ§Ìä∏ÏõåÌÅ¨ ÏãúÍ∞ÅÌôî Ïä§ÌÉÄÏùº
    st.markdown("""
    <style>
    .network-header {
        background: linear-gradient(135deg, #2e7d32, #4caf50);
        color: white;
        padding: 2rem;
        border-radius: 12px;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 8px 32px rgba(76, 175, 80, 0.3);
    }
    
    .network-header h1 {
        margin: 0;
        font-size: 2.5rem;
        font-weight: 700;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }
    
    .scenario-card {
        background: var(--cursor-secondary-bg);
        border: 1px solid var(--cursor-border-light);
        border-radius: 8px;
        padding: 1.5rem;
        margin: 1rem 0;
        transition: var(--cursor-transition);
        cursor: pointer;
    }
    
    .scenario-card:hover {
        border-color: var(--cursor-accent-blue);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 122, 204, 0.15);
    }
    
    .scenario-card.selected {
        border-color: var(--cursor-accent-blue);
        background: var(--cursor-tertiary-bg);
    }
    
    .scenario-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--cursor-primary-text);
        margin-bottom: 0.5rem;
    }
    
    .scenario-description {
        color: var(--cursor-muted-text);
        font-size: 0.9rem;
        margin-bottom: 1rem;
    }
    
    .scenario-steps {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }
    
    .scenario-step {
        background: var(--cursor-accent-blue);
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }
    
    .network-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
        margin: 1rem 0;
    }
    
    .network-stat {
        background: var(--cursor-secondary-bg);
        border: 1px solid var(--cursor-border-light);
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
    }
    
    .network-stat-value {
        font-size: 1.8rem;
        font-weight: 600;
        color: var(--cursor-accent-blue);
        margin-bottom: 0.5rem;
    }
    
    .network-stat-label {
        color: var(--cursor-muted-text);
        font-size: 0.8rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .event-feed {
        background: var(--cursor-secondary-bg);
        border: 1px solid var(--cursor-border-light);
        border-radius: 8px;
        padding: 1rem;
        height: 300px;
        overflow-y: auto;
    }
    
    .event-item {
        display: flex;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid var(--cursor-border-light);
        font-size: 0.85rem;
    }
    
    .event-item:last-child {
        border-bottom: none;
    }
    
    .event-timestamp {
        color: var(--cursor-muted-text);
        font-family: monospace;
        min-width: 70px;
        margin-right: 0.5rem;
    }
    
    .event-content {
        flex: 1;
        color: var(--cursor-secondary-text);
    }
    
    .event-type {
        background: var(--cursor-tertiary-bg);
        color: var(--cursor-primary-text);
        padding: 0.125rem 0.5rem;
        border-radius: 12px;
        font-size: 0.7rem;
        margin-left: 0.5rem;
    }
    
    .message-history {
        background: var(--cursor-primary-bg);
        border: 1px solid var(--cursor-border-light);
        border-radius: 8px;
        padding: 1rem;
        font-family: monospace;
        font-size: 0.8rem;
        height: 200px;
        overflow-y: auto;
    }
    
    .message-entry {
        margin-bottom: 0.5rem;
        padding: 0.5rem;
        border-left: 3px solid var(--cursor-accent-blue);
        background: var(--cursor-secondary-bg);
    }
    
    .message-route {
        font-weight: 600;
        color: var(--cursor-accent-blue);
    }
    
    .message-data {
        color: var(--cursor-muted-text);
        font-size: 0.75rem;
        margin-top: 0.25rem;
    }
    
    .control-panel {
        background: var(--cursor-secondary-bg);
        border: 1px solid var(--cursor-border-light);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 2rem;
    }
    
    .control-title {
        font-size: 1.3rem;
        font-weight: 600;
        color: var(--cursor-primary-text);
        margin-bottom: 1rem;
    }
    
    .node-legend {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 0.5rem;
        margin: 1rem 0;
        padding: 1rem;
        background: var(--cursor-tertiary-bg);
        border-radius: 6px;
    }
    
    .legend-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.8rem;
    }
    
    .legend-color {
        width: 12px;
        height: 12px;
        border-radius: 50%;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Ìó§Îçî
    st.markdown("""
    <div class="network-header">
        <h1>üï∏Ô∏è Cursor Collaboration Network</h1>
        <p>D3.js Í∏∞Î∞ò A2A Message Router ÏãúÍ∞ÅÌôî Î∞è Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÌùêÎ¶Ñ</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Ï†úÏñ¥ Ìå®ÎÑê
    st.markdown('<div class="control-panel">', unsafe_allow_html=True)
    st.markdown('<h2 class="control-title">üéÆ ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†úÏñ¥</h2>', unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üöÄ ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏãúÏûë", use_container_width=True):
            if not st.session_state.simulation_running:
                st.session_state.simulation_running = True
                scenarios = create_workflow_scenario()
                scenario = random.choice(scenarios)
                st.session_state.selected_scenario = scenario
                
                with st.spinner(f"Ïã§Ìñâ Ï§ë: {scenario['name']}"):
                    execute_workflow_scenario(scenario)
                
                st.session_state.simulation_running = False
                st.success(f"ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏôÑÎ£å: {scenario['name']}")
                st.rerun()
    
    with col2:
        if st.button("üéØ ÎûúÎç§ ÌôúÎèô", use_container_width=True):
            simulate_random_activity()
            st.success("ÎûúÎç§ ÌôúÎèô ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏôÑÎ£å")
            st.rerun()
    
    with col3:
        if st.button("üìä ÎÑ§Ìä∏ÏõåÌÅ¨ Î∂ÑÏÑù", use_container_width=True):
            network = get_cursor_collaboration_network()
            stats = network.get_network_stats()
            st.json(stats)
    
    with col4:
        if st.button("üßπ ÎÑ§Ìä∏ÏõåÌÅ¨ Ï¥àÍ∏∞Ìôî", use_container_width=True):
            st.session_state.network_events = []
            st.session_state.message_history = []
            st.session_state.network_metrics = {
                'total_messages': 0,
                'successful_routes': 0,
                'failed_routes': 0,
                'avg_latency': 0.0
            }
            st.success("ÎÑ§Ìä∏ÏõåÌÅ¨ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
            st.rerun()
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ÏûêÎèô ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏÑ§Ï†ï
    auto_simulate = st.checkbox("üîÑ ÏûêÎèô ÏãúÎÆ¨Î†àÏù¥ÏÖò", value=st.session_state.auto_simulate)
    st.session_state.auto_simulate = auto_simulate
    
    # ÎÑ§Ìä∏ÏõåÌÅ¨ ÌÜµÍ≥Ñ
    st.markdown("### üìä ÎÑ§Ìä∏ÏõåÌÅ¨ ÌÜµÍ≥Ñ")
    
    network = get_cursor_collaboration_network()
    stats = network.get_network_stats()
    metrics = st.session_state.network_metrics
    
    st.markdown(f"""
    <div class="network-stats">
        <div class="network-stat">
            <div class="network-stat-value">{stats['total_nodes']}</div>
            <div class="network-stat-label">Ï¥ù ÎÖ∏Îìú</div>
        </div>
        <div class="network-stat">
            <div class="network-stat-value">{stats['active_nodes']}</div>
            <div class="network-stat-label">ÌôúÏÑ± ÎÖ∏Îìú</div>
        </div>
        <div class="network-stat">
            <div class="network-stat-value">{stats['total_connections']}</div>
            <div class="network-stat-label">Ï¥ù Ïó∞Í≤∞</div>
        </div>
        <div class="network-stat">
            <div class="network-stat-value">{stats['active_connections']}</div>
            <div class="network-stat-label">ÌôúÏÑ± Ïó∞Í≤∞</div>
        </div>
        <div class="network-stat">
            <div class="network-stat-value">{metrics['total_messages']}</div>
            <div class="network-stat-label">Ï¥ù Î©îÏãúÏßÄ</div>
        </div>
        <div class="network-stat">
            <div class="network-stat-value">{stats['message_flows']}</div>
            <div class="network-stat-label">Î©îÏãúÏßÄ ÌùêÎ¶Ñ</div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # ÎÖ∏Îìú ÌÉÄÏûÖ Î≤îÎ°Ä
    st.markdown("### üé® ÎÖ∏Îìú ÌÉÄÏûÖ Î≤îÎ°Ä")
    
    node_colors = {
        "Agent": "#007acc",
        "MCP Tool": "#2e7d32",
        "Data Source": "#f57c00",
        "Output": "#7b1fa2",
        "Router": "#d32f2f",
        "Orchestrator": "#1976d2"
    }
    
    st.markdown('<div class="node-legend">', unsafe_allow_html=True)
    for node_type, color in node_colors.items():
        st.markdown(f"""
        <div class="legend-item">
            <div class="legend-color" style="background: {color};"></div>
            <span>{node_type}</span>
        </div>
        """, unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Î©îÏù∏ ÎÑ§Ìä∏ÏõåÌÅ¨ ÏãúÍ∞ÅÌôî
    st.markdown("### üï∏Ô∏è ÌòëÏóÖ ÎÑ§Ìä∏ÏõåÌÅ¨ ÏãúÍ∞ÅÌôî")
    
    # D3.js ÎÑ§Ìä∏ÏõåÌÅ¨ Î†åÎçîÎßÅ
    render_collaboration_network()
    
    # Ïù¥Î≤§Ìä∏ ÌîºÎìúÏôÄ Î©îÏãúÏßÄ ÌûàÏä§ÌÜ†Î¶¨
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üìà ÎÑ§Ìä∏ÏõåÌÅ¨ Ïù¥Î≤§Ìä∏")
        
        st.markdown('<div class="event-feed">', unsafe_allow_html=True)
        for event in reversed(st.session_state.network_events[-20:]):  # ÏµúÍ∑º 20Í∞ú
            if event.get('event_type') == 'node_update':
                st.markdown(f"""
                <div class="event-item">
                    <div class="event-timestamp">{event['timestamp']}</div>
                    <div class="event-content">
                        {event['node_name']} ‚Üí {event['new_status']}
                    </div>
                    <div class="event-type">{event['type']}</div>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="event-item">
                    <div class="event-timestamp">{event['timestamp']}</div>
                    <div class="event-content">
                        {event['source']} ‚Üí {event['target']}: {event['message']}
                    </div>
                    <div class="event-type">step {event['step']}</div>
                </div>
                """, unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown("### üìã Î©îÏãúÏßÄ ÌûàÏä§ÌÜ†Î¶¨")
        
        st.markdown('<div class="message-history">', unsafe_allow_html=True)
        for message in reversed(st.session_state.message_history[-10:]):  # ÏµúÍ∑º 10Í∞ú
            st.markdown(f"""
            <div class="message-entry">
                <div class="message-route">{message['route']}</div>
                <div class="message-data">{message['timestamp']} - {message['data']}</div>
            </div>
            """, unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏãúÎÇòÎ¶¨Ïò§
    st.markdown("### üéØ ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏãúÎÇòÎ¶¨Ïò§")
    
    scenarios = create_workflow_scenario()
    
    for i, scenario in enumerate(scenarios):
        selected_class = "selected" if st.session_state.selected_scenario == scenario else ""
        
        st.markdown(f"""
        <div class="scenario-card {selected_class}">
            <div class="scenario-title">{scenario['name']}</div>
            <div class="scenario-description">{scenario['description']}</div>
            <div class="scenario-steps">
                {' ‚Üí '.join([f"<span class='scenario-step'>{step[0]}</span>" for step in scenario['steps']])}
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button(f"Ïã§Ìñâ: {scenario['name']}", key=f"scenario_{i}"):
            if not st.session_state.simulation_running:
                st.session_state.simulation_running = True
                st.session_state.selected_scenario = scenario
                
                with st.spinner(f"Ïã§Ìñâ Ï§ë: {scenario['name']}"):
                    execute_workflow_scenario(scenario)
                
                st.session_state.simulation_running = False
                st.success(f"ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏôÑÎ£å: {scenario['name']}")
                st.rerun()
    
    # ÏÇ¨Ïù¥ÎìúÎ∞î Ï†ïÎ≥¥
    with st.sidebar:
        st.markdown("## üï∏Ô∏è ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ïÎ≥¥")
        
        # ÎÑ§Ìä∏ÏõåÌÅ¨ Íµ¨ÏÑ±
        st.markdown("### üìä ÎÑ§Ìä∏ÏõåÌÅ¨ Íµ¨ÏÑ±")
        st.json(stats['node_types'])
        
        st.markdown("### üîó Ïó∞Í≤∞ ÌÉÄÏûÖ")
        st.json(stats['connection_types'])
        
        # Ïã§ÏãúÍ∞Ñ Î©îÌä∏Î¶≠
        st.markdown("---")
        st.markdown("### üìà Ïã§ÏãúÍ∞Ñ Î©îÌä∏Î¶≠")
        
        current_time = datetime.now().strftime("%H:%M:%S")
        st.metric("ÌòÑÏû¨ ÏãúÍ∞Ñ", current_time)
        st.metric("ÌôúÏÑ± ÎÖ∏Îìú ÎπÑÏú®", f"{(stats['active_nodes'] / stats['total_nodes'] * 100):.1f}%")
        st.metric("Ïó∞Í≤∞ ÌôúÏö©Î•†", f"{(stats['active_connections'] / stats['total_connections'] * 100):.1f}%")
        
        # ÏÑ±Îä• Î©îÌä∏Î¶≠
        st.markdown("---")
        st.markdown("### üöÄ ÏÑ±Îä• Î©îÌä∏Î¶≠")
        
        perf_metrics = {
            "ÎÑ§Ìä∏ÏõåÌÅ¨ ÏßÄÏó∞": f"{random.uniform(5, 20):.1f}ms",
            "Î©îÏãúÏßÄ Ï≤òÎ¶¨Ïú®": f"{random.uniform(50, 200):.0f}/s",
            "ÎùºÏö∞ÌåÖ ÏÑ±Í≥µÎ•†": f"{random.uniform(95, 100):.1f}%",
            "ÎÖ∏Îìú ÏùëÎãµÏãúÍ∞Ñ": f"{random.uniform(0.1, 0.5):.2f}s"
        }
        
        for metric, value in perf_metrics.items():
            st.metric(metric, value)
        
        # Í∏∞Ïà† Ï†ïÎ≥¥
        st.markdown("---")
        st.markdown("### üîß Í∏∞Ïà† Ïä§ÌÉù")
        
        tech_info = [
            "D3.js v7 Force Simulation",
            "A2A Message Router",
            "WebSocket Real-time Updates",
            "Streamlit Components",
            "Interactive Network Graph",
            "Dynamic Node Positioning",
            "Message Flow Animation"
        ]
        
        for tech in tech_info:
            st.markdown(f"‚úÖ {tech}")
        
        # ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÑ§Ï†ï
        st.markdown("---")
        st.markdown("### ‚öôÔ∏è ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÑ§Ï†ï")
        
        if st.button("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïû¨Íµ¨ÏÑ±", use_container_width=True):
            network = get_cursor_collaboration_network()
            # ÎÑ§Ìä∏ÏõåÌÅ¨ Ïû¨Íµ¨ÏÑ± Î°úÏßÅ
            st.success("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïû¨Íµ¨ÏÑ± ÏôÑÎ£å")
        
        if st.button("ÌÜµÍ≥Ñ Ï¥àÍ∏∞Ìôî", use_container_width=True):
            st.session_state.network_metrics = {
                'total_messages': 0,
                'successful_routes': 0,
                'failed_routes': 0,
                'avg_latency': 0.0
            }
            st.success("ÌÜµÍ≥Ñ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
    
    # ÏûêÎèô ÏãúÎÆ¨Î†àÏù¥ÏÖò
    if st.session_state.auto_simulate:
        time.sleep(5)
        if not st.session_state.simulation_running:
            simulate_random_activity()
        st.rerun()

if __name__ == "__main__":
    main() 